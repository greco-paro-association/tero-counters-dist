const positionCursorFocus = (target) => {
  if (target.innerText === "emptyName") target.innerText = "";
  const setpos = document.createRange();
  const set = window.getSelection();
  if (isNotUndefined(target.childNodes[0]))
    setpos.setStart(target.childNodes[0], target.innerText.length);
  setpos.collapse(true);
  set.removeAllRanges();
  set.addRange(setpos);
  target.focus();
};

const updateUserPassword = async (email, password) => {
  const response = await fetchQuery({
    endpoint: API.user.updatePassword,
    parameters: {
      email: email,
      password: password,
      method: LOCAL_LOGIN_METHOD,
    },
  });
  if (!response.errors) {
    return true;
  }
  return response.errors.msg ? response.errors.msg : response.errors[0].msg;
};

const hiddenClassName = "hidden";
const DEFAULT_USER_NAME = "Tabber";

const getEmailsFromString = (string) => {
  let emails = string.split(",");
  emails = emails.map((email) => email.trim());
  emails = emails.filter((email) => email.length > 0);
  return emails;
};

const validUserName = (userName) =>
  !!userName && userName.toLowerCase() !== DEFAULT_USER_NAME.toLowerCase();

const getDaysAsTabber = (date) => {
  let today = new Date();
  let initialDate = new Date(date);
  let difference = today.getTime() - initialDate.getTime();
  return Math.floor(difference / (1000 * 3600 * 24));
};

const getUserLevelObject = (treesSaved) => {
  let userLevelObject;
  userLevels.forEach((userLevel) => {
    if (treesSaved >= userLevel.trees) {
      userLevelObject = userLevel;
    }
  });
  return userLevelObject;
};

const ACHIEVEMENT_LINK_HEADER = "https://app.opentabs.org/achievement/";
const DEFAULT_ACHIEVEMENT_LINK = "https://app.opentabs.org/achievement/default";
const DEFAULT_REFERRAL_LINK = "https://app.opentabs.org/r/default";

const isChromeBrowser = ({ browser = getBrowserType() } = {}) =>
  browser === CHROME;
const browserType = getBrowserType();

const leadershipBoardFriendSchema = ({
  id,
  name,
  score,
  isAdmin = false,
  isSelf = false,
  isFriend = true,
} = {}) => ({
  id: id,
  name: name,
  score: score,
  isAdmin: isAdmin,
  isSelf: isSelf,
  isFriend: isFriend,
});

const leadershipBoardGroupSchema = ({
  id = "",
  name = "",
  score = 0,
  members = [],
  isAdmin = false,
} = {}) => ({
  id: id,
  name: name,
  score: score,
  members: members,
  isAdmin: isAdmin,
});

const fetchQuery = ({ endpoint, parameters } = {}) =>
  fetch(`${SUB_DOMAIN}/api/${endpoint}`, {
    body: JSON.stringify(parameters),
    method: "post",
    headers: {
      "content-type": "application/json",
    },
  })
    .then(async (response) => await response.json())
    .catch((error) => (error.response?.data ? error.response.data : error));

const getUserReferral = async (userId) => {
  const response = await fetchQuery({
    endpoint: API.user.getReferralUser,
    parameters: { userId: userId },
  });
  if (response.errors) {
    return;
  }
  return response;
};

const getUserReferrals = async (referralUserIdList) => {
  let userReferrals = [];
  const promises = referralUserIdList.map(async (referralUserId) => {
    const referralUser = await getUserReferral(referralUserId);
    userReferrals.push(referralUser);
  });
  await Promise.all(promises);
  return userReferrals;
};

const getResetPasswordOtp = async (email) => {
  const response = await fetchQuery({
    endpoint: API.user.sendVerificationOTP,
    parameters: {
      email: email,
    },
  });
  if (!response.errors) {
    return response.code;
  }
  return response.errors.msg ? response.errors.msg : response.errors[0].msg;
};

const copyToClipboard = (ref) => {
  const input = ref.current;
  input.select();
  input.setSelectionRange(0, 99999);
  navigator.clipboard.writeText(input.value);
};

const copyValueToClipboard = (value) => {
  navigator.clipboard.writeText(value);
};

const validUserId = (userId) => !!userId && userId.length > 20;

const arrayNotEmpty = (array) => array?.length > 0;

const stringNotEmpty = (string) => string?.length > 0;

const isNotNull = (value) => value !== null;

const isNull = (value) => value === null;

const isNotUndefined = (value) => value !== undefined;

const isBoolean = (value) => value === true || value === false;

// removed from leadership board
const getTreesSavedFromTabsOpened = (tabs) => Math.floor(tabs / 5);

const NumberFloor = (number) => Math.floor(number);

const getTotalTreesSaved = () => {
  const initialDate = SAVING_TREES_RATE_CHANGED_DATE;
  const instant = new Date();
  const finalDate = new Date(
    instant.getUTCFullYear(),
    instant.getUTCMonth(),
    instant.getUTCDate(),
    instant.getUTCHours(),
    instant.getUTCMinutes(),
    instant.getUTCSeconds()
  );
  return Math.floor(
    GLOBAL_TREES_SAVED_TILL_CHANGED_DATE +
      Math.floor(
        (finalDate - initialDate) / 1000 / DEFAULT_SECONDS_PER_TREE_SAVED
      )
  );
};

const getDefaultTotalTreesSaved = () => {
  const initialDate = SAVING_TREES_RATE_CHANGED_DATE;
  const instant = new Date();
  const finalDate = new Date(
    instant.getUTCFullYear(),
    instant.getUTCMonth(),
    instant.getUTCDate(),
    instant.getUTCHours(),
    instant.getUTCMinutes(),
    instant.getUTCSeconds()
  );
  return (
    GLOBAL_TREES_SAVED_TILL_CHANGED_DATE +
    Math.floor(
      (finalDate - initialDate) / 1000 / DEFAULT_SECONDS_PER_TREE_SAVED
    )
  );
};

const addCommas = (number) =>
  number?.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

const sumOfScoresInList = (list) =>
  list
    .map((object) => object.score)
    .reduce((score, accumulator) => score + accumulator, 0);

const numberOfAdsToTreeSaved = (numberOfAds) => {
  switch (numberOfAds) {
    case 0: {
      return 1 / 50;
    }
    case 1: {
      return 1 / 10;
    }
    case 2: {
      return 1 / 8;
    }
    case 3: {
      return 1 / 5;
    }
    default: {
      // Return treesSaved itself, if source is sponsored-survey
      return numberOfAds;
    }
  }
};

const numberOfAdsToTreeSavedSource = (numberOfAds) => {
  return 1;
};

const incrementTreesSaved = ({ user, advertisementCount, adsWhitelisted }) => {
  const { treesSaved } = user;
  const treeSaved = adsWhitelisted
    ? numberOfAdsToTreeSaved(advertisementCount)
    : numberOfAdsToTreeSaved(0);
  let updatedTreesSaved = treesSaved + treeSaved;
  if (getPercentageOfTreeSaved(updatedTreesSaved) > 95 && adsWhitelisted)
    updatedTreesSaved = Math.ceil(updatedTreesSaved);
  user = { ...user, treesSaved: updatedTreesSaved };
  return user;
};

const getPercentageOfTreeSaved = (treesSaved) => {
  const lowerBit = Math.floor(treesSaved);
  const percent = (treesSaved - lowerBit) * 100;
  return +percent.toFixed(0);
};

const isVowel = (word) =>
  word !== undefined
    ? ["a", "e", "i", "o", "u"].indexOf(word.charAt(0).toLowerCase()) !== -1
    : false;

const getReferralCount = (referrals) => referrals?.length;

const sumOfTreesInList = (list) =>
  list
    .map((object) => object.treesSaved)
    .reduce((score, accumulator) => score + accumulator, 0);

const treesToCO2Stored = (trees) => NumberFloor(trees * CO2_STORED_PER_TREE);

const setLocalStorage = (key, value) => localStorage.setItem(key, value);

const getLocalStorage = (key) => localStorage.getItem(key);

//const getTabsOpenedTodayFromStorage = () => {
// 	const tabsOpenedString = localStorage.getItem(STORAGE_RECENT_DAY_TABS_OPENED);
// 	const tabsOpenedParsed = parseInt(tabsOpenedString, 10);
// 	const tabsOpened = isNaN(tabsOpenedParsed) ? 0 : tabsOpenedParsed;
// 	return tabsOpened;
// };

function getBrowserType() {
  const userDeviceDetails = navigator.userAgent;
  const userAgentString = userDeviceDetails;
  let chromeAgent = userAgentString.indexOf("Chrome") > -1;
  let edgeAgent = userAgentString.indexOf("Edg") > -1;
  let firefoxAgent = userAgentString.indexOf("Firefox") > -1;
  let safariAgent = userAgentString.indexOf("Safari") > -1;

  // Discard Chrome since it also matches Edge
  if (chromeAgent && edgeAgent) chromeAgent = false;
  // Discard Safari since it also matches Chrome
  if (chromeAgent && safariAgent) safariAgent = false;

  return chromeAgent
    ? "chrome"
    : edgeAgent
    ? "edge"
    : firefoxAgent
    ? "firefox"
    : safariAgent
    ? "safari"
    : "chrome";
}

function getPostHeader(data) {
  return {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(data),
  };
}

const angle = (
  <svg
    width="6"
    height="10"
    viewBox="0 0 6 10"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    className="angle-icon"
  >
    <path
      d="M1 9L5 5L1 1"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    />
  </svg>
);

const settings = (
  <svg
    className="toggle-icon"
    width="21"
    height="22"
    viewBox="0 0 21 22"
    fill="#95979d"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M18.8999 11.66C18.7396 11.4775 18.6512 11.2429 18.6512 11C18.6512 10.7571 18.7396 10.5225 18.8999 10.34L20.1799 8.89999C20.3209 8.74266 20.4085 8.54469 20.4301 8.33449C20.4516 8.1243 20.4061 7.91267 20.2999 7.72999L18.2999 4.26999C18.1948 4.08751 18.0348 3.94286 17.8426 3.85667C17.6505 3.77048 17.4361 3.74714 17.2299 3.78999L15.3499 4.16999C15.1107 4.21942 14.8616 4.17958 14.6498 4.05799C14.4379 3.9364 14.2779 3.74147 14.1999 3.50999L13.5899 1.67999C13.5228 1.48137 13.395 1.30885 13.2245 1.18683C13.0541 1.06481 12.8495 0.999446 12.6399 0.999987H8.6399C8.42183 0.988605 8.20603 1.04891 8.02546 1.1717C7.84489 1.29449 7.70948 1.47301 7.6399 1.67999L7.0799 3.50999C7.0019 3.74147 6.84187 3.9364 6.63001 4.05799C6.41815 4.17958 6.16911 4.21942 5.9299 4.16999L3.9999 3.78999C3.80445 3.76237 3.6052 3.79321 3.42724 3.87863C3.24929 3.96404 3.1006 4.10021 2.9999 4.26999L0.999896 7.72999C0.891056 7.91064 0.842118 8.12107 0.860079 8.33121C0.878039 8.54135 0.961979 8.74043 1.0999 8.89999L2.3699 10.34C2.53022 10.5225 2.61863 10.7571 2.61863 11C2.61863 11.2429 2.53022 11.4775 2.3699 11.66L1.0999 13.1C0.961979 13.2595 0.878039 13.4586 0.860079 13.6688C0.842118 13.8789 0.891056 14.0893 0.999896 14.27L2.9999 17.73C3.10499 17.9125 3.26502 18.0571 3.45715 18.1433C3.64928 18.2295 3.86372 18.2528 4.0699 18.21L5.9499 17.83C6.18911 17.7806 6.43815 17.8204 6.65001 17.942C6.86187 18.0636 7.0219 18.2585 7.0999 18.49L7.7099 20.32C7.77948 20.527 7.91489 20.7055 8.09546 20.8283C8.27603 20.9511 8.49183 21.0114 8.7099 21H12.7099C12.9195 21.0005 13.1241 20.9352 13.2945 20.8131C13.465 20.6911 13.5928 20.5186 13.6599 20.32L14.2699 18.49C14.3479 18.2585 14.5079 18.0636 14.7198 17.942C14.9316 17.8204 15.1807 17.7806 15.4199 17.83L17.2999 18.21C17.5061 18.2528 17.7205 18.2295 17.9126 18.1433C18.1048 18.0571 18.2648 17.9125 18.3699 17.73L20.3699 14.27C20.4761 14.0873 20.5216 13.8757 20.5001 13.6655C20.4785 13.4553 20.3909 13.2573 20.2499 13.1L18.8999 11.66ZM17.4099 13L18.2099 13.9L16.9299 16.12L15.7499 15.88C15.0297 15.7328 14.2805 15.8551 13.6445 16.2238C13.0085 16.5925 12.53 17.1818 12.2999 17.88L11.9199 19H9.3599L8.9999 17.86C8.76975 17.1618 8.29128 16.5725 7.6553 16.2038C7.01932 15.8351 6.27012 15.7128 5.5499 15.86L4.3699 16.1L3.0699 13.89L3.8699 12.99C4.36185 12.44 4.63383 11.7279 4.63383 10.99C4.63383 10.2521 4.36185 9.54001 3.8699 8.98999L3.0699 8.08999L4.3499 5.88999L5.5299 6.12999C6.25012 6.27721 6.99932 6.15487 7.6353 5.78619C8.27128 5.4175 8.74975 4.82815 8.9799 4.12999L9.3599 2.99999H11.9199L12.2999 4.13999C12.53 4.83815 13.0085 5.4275 13.6445 5.79619C14.2805 6.16487 15.0297 6.28721 15.7499 6.13999L16.9299 5.89999L18.2099 8.11999L17.4099 9.01999C16.9235 9.56875 16.6549 10.2767 16.6549 11.01C16.6549 11.7433 16.9235 12.4512 17.4099 13ZM10.6399 6.99999C9.84877 6.99999 9.07541 7.23458 8.41761 7.67411C7.75982 8.11363 7.24713 8.73835 6.94438 9.46925C6.64163 10.2002 6.56241 11.0044 6.71675 11.7803C6.8711 12.5563 7.25206 13.269 7.81147 13.8284C8.37088 14.3878 9.08361 14.7688 9.85954 14.9231C10.6355 15.0775 11.4397 14.9983 12.1706 14.6955C12.9015 14.3928 13.5262 13.8801 13.9658 13.2223C14.4053 12.5645 14.6399 11.7911 14.6399 11C14.6399 9.93912 14.2185 8.9217 13.4683 8.17156C12.7182 7.42141 11.7008 6.99999 10.6399 6.99999ZM10.6399 13C10.2443 13 9.85765 12.8827 9.52876 12.6629C9.19986 12.4432 8.94351 12.1308 8.79214 11.7654C8.64076 11.3999 8.60116 10.9978 8.67833 10.6098C8.7555 10.2218 8.94598 9.86548 9.22568 9.58577C9.50539 9.30607 9.86175 9.11559 10.2497 9.03842C10.6377 8.96125 11.0398 9.00085 11.4053 9.15223C11.7707 9.3036 12.0831 9.55995 12.3028 9.88885C12.5226 10.2177 12.6399 10.6044 12.6399 11C12.6399 11.5304 12.4292 12.0391 12.0541 12.4142C11.679 12.7893 11.1703 13 10.6399 13Z"
      className="settings-icon"
    />
  </svg>
);

const globe = (
  <svg
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M19.7673 2.86279L14.9668 3.07188L11.9993 4.02229L2.69768 7.00113L0.0341797 12.6914C0.394253 18.9953 5.60525 24.0002 11.9993 24.0002C18.6267 24.0002 23.9993 18.6275 23.9993 12.0001C23.9993 8.33772 22.3538 5.06396 19.7673 2.86279Z"
      fill="#4DA6FF"
    />
    <path
      d="M24 12.0001C24 8.33772 22.3545 5.06396 19.7679 2.86279L14.9675 3.07188L12 4.02229V24.0002C18.6274 24.0002 24 18.6275 24 12.0001Z"
      fill="#1A8CCA"
    />
    <path
      d="M15.8759 15.2726L12.0002 13.111L11.492 12.8276L8.48242 15.8372L11.1373 20.9584L12.0002 20.68L18.5456 18.5687V15.2726H15.8759Z"
      fill="#3EDDB0"
    />
    <path
      d="M18.5455 15.2724H15.8757L12 13.1108V20.6799L18.5455 18.5686V15.2724Z"
      fill="#28AF89"
    />
    <path
      d="M12 0C5.37267 0 0 5.37252 0 12C0 12.2333 0.021673 12.4612 0.0349094 12.6913L5.66976 15.5093L9.17901 12L6.54547 9.3665V8.7273H10.2699L12 6.99718L16.8825 9.11508L19.768 2.8627C17.6741 1.08066 14.965 0 12 0Z"
      fill="#3EDDB0"
    />
    <path
      d="M16.8825 9.11508L19.7679 2.8627C17.6741 1.08066 14.965 0 12 0V6.99718L16.8825 9.11508Z"
      fill="#28AF89"
    />
  </svg>
);

const Ally = (
  <svg
    width="76"
    height="76"
    viewBox="0 0 76 76"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M76 38C76 58.7159 59.421 75.5621 38.8075 75.9911C37.9332 74.342 35.6205 74.2099 34.5652 75.7506L34.5043 75.8412C15.157 74.0763 0 57.8075 0 38C0 31.1392 1.81836 24.7045 4.99937 19.1484C11.5484 7.70836 23.8747 0 38 0C52.1253 0 64.4516 7.70836 71.0006 19.1484C74.1816 24.7045 76 31.1392 76 38Z"
      fill="#FFE564"
    />
    <path
      d="M76 38C76 58.7159 59.421 75.5621 38.8075 75.9911C37.9332 74.342 35.6205 74.2099 34.5652 75.7506L34.5043 75.8412C15.157 74.0763 0 57.8075 0 38C0 31.1392 1.81836 24.7045 4.99937 19.1484C11.0838 29.7766 22.1528 37.1836 35.0194 38.1796C35.6369 38.2286 36.2588 38.2627 36.8852 38.2806C37.2563 38.2909 37.6274 38.2969 38 38.2969C38.4438 38.2969 38.8847 38.2895 39.3241 38.2746C52.8942 37.8085 64.6564 30.2293 71.0006 19.1484C74.1816 24.7045 76 31.1392 76 38Z"
      fill="#FFDD0E"
    />
    <path
      d="M49.0853 46.4087V50.7312C49.0853 55.2571 46.881 59.5217 43.1879 62.1402L42.6402 62.5291C40.3245 64.1708 38.9337 66.8189 38.8936 69.657L38.8075 75.9909C38.5388 75.9968 38.2702 75.9998 38 75.9998C36.8214 75.9998 35.6547 75.9463 34.5043 75.8409L34.58 70.2849C34.58 70.2434 34.5815 70.2018 34.5815 70.1602C34.5815 67.2375 33.1431 64.5003 30.7325 62.8423C26.9399 60.2312 24.6763 55.9251 24.6763 51.3205V46.4087H28.981V51.3205C28.981 52.9148 29.3728 54.4555 30.0927 55.8256C30.8127 57.1957 31.8606 58.3921 33.1728 59.2961C33.8319 59.7488 34.7314 59.2842 34.7418 58.4841L35.0194 38.1794L35.0268 37.6479L36.8852 37.6732L39.3315 37.7073L39.3241 38.2744L39.0554 57.8429C39.045 58.6608 39.9683 59.1462 40.6363 58.6726L40.6986 58.6281C43.2591 56.8127 44.7806 53.8692 44.7806 50.7312V46.4087H49.0853Z"
      fill="#DB351D"
    />
    <path
      d="M49.0853 46.4089V50.7314C49.0853 55.2572 46.881 59.5219 43.1879 62.1403L42.6402 62.5292C40.3246 64.1709 38.9337 66.819 38.8936 69.6572L38.8075 75.991C38.5388 75.9969 38.2702 75.9999 38 75.9999C37.6274 75.9999 37.2563 75.994 36.8853 75.9836V37.6733L39.3315 37.7075L39.3241 38.2745L39.0554 57.843C39.045 58.6609 39.9683 59.1463 40.6363 58.6728L40.6986 58.6283C43.2592 56.8129 44.7806 53.8694 44.7806 50.7314V46.4089H49.0853Z"
      fill="#A52817"
    />
    <path
      d="M59.1706 27.7531C59.1706 25.1235 57.3374 22.9224 54.8801 22.3567C55.4994 21.2789 55.8542 20.0289 55.8542 18.6963C55.8542 14.6348 52.5614 11.3426 48.5004 11.3426C47.7462 11.3426 47.019 11.4564 46.3347 11.6666C45.8884 9.20702 43.7353 7.34131 41.1467 7.34131C38.2341 7.34131 35.8732 9.70221 35.8732 12.6143C35.8732 12.7106 35.8761 12.8059 35.881 12.901C34.6437 12.0233 33.1315 11.5071 31.4996 11.5071C27.4808 11.5071 24.1928 14.6342 23.9343 18.588C19.9884 18.7199 16.8306 21.9591 16.8306 25.937C16.8306 29.3166 19.1101 32.163 22.2156 33.0238C22.215 33.0618 22.2144 33.0991 22.2144 33.1371C22.2144 35.6794 23.9265 37.8209 26.2614 38.4709C26.7355 38.604 27.2354 38.6745 27.7517 38.6745H50.6902C53.7488 38.6745 56.2277 36.1956 56.2277 33.1371C56.2277 32.975 56.2204 32.8154 56.2072 32.6569C57.9687 31.7303 59.1706 29.8821 59.1706 27.7531Z"
      fill="#57AD00"
    />
    <path
      d="M51.6403 32.1827C51.6547 32.2316 51.6681 32.2804 51.6807 32.3303C52.5198 35.546 50.0325 38.6743 46.7089 38.6743H29.3712C28.7675 38.6743 28.1905 38.4051 27.8186 37.9298C27.8163 37.9268 27.8145 37.9243 27.812 37.9213C27.7842 37.8852 27.7566 37.849 27.7294 37.8122C26.6571 36.3556 26.6445 34.3717 27.6499 32.8682C27.8342 32.5934 28.036 32.3297 28.2559 32.079C26.6331 31.1747 25.3004 29.697 24.7438 27.924C24.1877 26.1517 24.4709 24.0969 25.6293 22.645C26.7883 21.1931 28.8384 20.4588 30.6131 21.0076C30.4908 19.1817 31.5686 17.2443 33.2687 16.5653C34.9681 15.8864 37.0765 16.4225 38.2459 17.8304C38.5965 16.0311 40.4158 14.5798 42.2399 14.7545C44.0641 14.9298 45.6117 16.6311 45.6129 18.4643C46.3773 18.0467 47.2497 17.6486 48.1196 17.622C49.769 17.5714 51.4052 18.5636 52.1232 20.0499C52.8408 21.536 52.6015 23.4343 51.5364 24.6951C53.031 25.218 54.3582 27.0578 54.3244 28.641C54.2916 30.2236 53.1554 31.723 51.6403 32.1827Z"
      fill="#519305"
    />
    <path
      d="M46.9458 32.3653C47.6741 33.7575 47.6452 35.5172 46.8711 36.884C46.7457 37.1056 46.596 37.3194 46.4267 37.5218C45.811 38.2584 44.8929 38.6743 43.9328 38.6743H33.2003C31.7746 38.6743 30.4889 37.7589 30.0806 36.3928C30.0683 36.3517 30.0567 36.3104 30.0459 36.2687C29.579 34.4789 30.6772 32.0313 32.3284 31.1987C31.1489 30.9245 30.0597 30.1878 29.4675 29.1313C28.8754 28.0747 28.8302 26.7022 29.4494 25.6612C30.0693 24.6202 31.3711 23.9992 32.5507 24.2751C32.4851 23.136 33.1941 21.9871 34.3152 21.7726C35.4364 21.5581 36.9225 22.0305 37.2822 23.1136C37.3641 22.1654 37.696 21.2136 38.3539 20.5256C39.0118 19.8376 40.0256 19.4568 40.9473 19.6924C41.8695 19.9286 43.0986 21.0147 42.9859 21.9599C43.4852 21.0972 44.5359 20.5888 45.5227 20.7334C46.5095 20.8774 47.3709 21.6647 47.6023 22.6352C47.8336 23.6051 47.4776 24.8056 46.6619 25.3798C48.0691 25.8527 49.1018 27.2727 49.1174 28.757C49.1333 30.2417 48.3428 31.8635 46.9458 32.3653Z"
      fill="#4B8204"
    />
    <path
      d="M46.938 40.7912C46.938 38.1616 45.1048 35.9604 42.6476 35.3947C43.2668 34.3169 43.6218 33.0669 43.6218 31.7344C43.6218 27.6729 40.329 24.3807 36.268 24.3807C35.5138 24.3807 34.7866 24.4945 34.1023 24.7047C33.656 22.245 31.5029 20.3794 28.9143 20.3794C26.0016 20.3794 23.6407 22.7403 23.6407 25.6523C23.6407 25.7487 23.6437 25.844 23.6486 25.9391C22.4112 25.0614 20.8991 24.5451 19.2672 24.5451C15.2484 24.5451 11.9603 27.6723 11.7019 31.6261C7.756 31.758 4.59814 34.9972 4.59814 38.975C4.59814 42.3547 6.8777 45.2011 9.98316 46.0619C9.98256 46.0999 9.98197 46.1372 9.98197 46.1752C9.98197 48.7173 11.694 50.859 14.029 51.509C14.5031 51.6421 15.003 51.7126 15.5194 51.7126H38.4579C41.5165 51.7126 43.9954 49.2337 43.9954 46.1752C43.9954 46.0131 43.9881 45.8535 43.9749 45.695C45.7361 44.7684 46.938 42.9202 46.938 40.7912Z"
      fill="#6FC200"
    />
    <path
      d="M39.4078 45.2206C39.4222 45.2695 39.4355 45.3183 39.4482 45.3682C40.2873 48.584 37.7999 51.7123 34.4764 51.7123H17.1386C16.5349 51.7123 15.9578 51.443 15.5861 50.9677C15.5837 50.9647 15.5819 50.9624 15.5794 50.9592C15.5517 50.9232 15.5241 50.887 15.4969 50.8503C14.4246 49.3937 14.412 47.4098 15.4173 45.9061C15.6017 45.6314 15.8034 45.3676 16.0234 45.117C14.4005 44.2128 13.0679 42.7351 12.5114 40.9621C11.9553 39.1898 12.2384 37.135 13.3969 35.6831C14.5559 34.2312 16.606 33.4969 18.3807 34.0457C18.2584 32.2198 19.3362 30.2823 21.0363 29.6034C22.7357 28.9244 24.8441 29.4606 26.0135 30.8685C26.3641 29.0692 28.1834 27.6179 30.0075 27.7926C31.8317 27.9679 33.3793 29.6692 33.3805 31.5024C34.1449 31.0849 35.0173 30.6867 35.8872 30.6601C37.5366 30.6095 39.1728 31.6017 39.8908 33.0878C40.6084 34.574 40.3691 36.4722 39.304 37.733C40.7986 38.256 42.1258 40.0957 42.092 41.6789C42.059 43.2616 40.9227 44.7609 39.4078 45.2206Z"
      fill="#57AD00"
    />
    <path
      d="M34.7133 45.4032C35.4417 46.7954 35.4128 48.5551 34.6387 49.9219C34.5133 50.1435 34.3636 50.3573 34.1943 50.5598C33.5785 51.2963 32.6605 51.7122 31.7004 51.7122H20.9679C19.5421 51.7122 18.2565 50.7968 17.8483 49.4307C17.836 49.3896 17.8244 49.3484 17.8136 49.3067C17.3467 47.5169 18.4449 45.0692 20.0961 44.2366C18.9166 43.9626 17.8274 43.2258 17.2351 42.1692C16.643 41.1126 16.5977 39.7403 17.217 38.6993C17.8369 37.6583 19.1388 37.0373 20.3183 37.3132C20.2527 36.1741 20.9616 35.0252 22.0828 34.8107C23.2039 34.5962 24.6901 35.0685 25.0498 36.1517C25.1317 35.2035 25.4636 34.2517 26.1215 33.5637C26.7794 32.8757 27.7932 32.4949 28.7148 32.7305C29.6371 32.9667 30.8661 34.0528 30.7535 34.998C31.2528 34.1353 32.3035 33.6269 33.2903 33.7715C34.2771 33.9155 35.1385 34.7028 35.3699 35.6733C35.6012 36.6432 35.2452 37.8439 34.4295 38.4179C35.8367 38.8908 36.8694 40.3108 36.885 41.7951C36.9007 43.2796 36.1104 44.9013 34.7133 45.4032Z"
      fill="#519305"
    />
    <path
      d="M67.3182 42.2678C67.3182 39.905 65.671 37.927 63.463 37.4186C64.0195 36.4502 64.3383 35.327 64.3383 34.1296C64.3383 30.4801 61.3795 27.5217 57.7305 27.5217C57.0527 27.5217 56.3994 27.624 55.7845 27.813C55.3834 25.6027 53.4487 23.9263 51.1226 23.9263C48.5054 23.9263 46.3839 26.0477 46.3839 28.6644C46.3839 28.7509 46.3866 28.8366 46.3909 28.9221C45.2791 28.1334 43.9203 27.6694 42.4539 27.6694C38.8429 27.6694 35.8884 30.4793 35.6561 34.032C32.1105 34.1506 29.2729 37.0612 29.2729 40.6356C29.2729 43.6723 31.3212 46.23 34.1117 47.0035C34.1111 47.0377 34.1107 47.0712 34.1107 47.1054C34.1107 49.3897 35.6491 51.314 37.7472 51.8981C38.1733 52.0178 38.6226 52.0811 39.0864 52.0811H59.698C62.4462 52.0811 64.6738 49.8537 64.6738 47.1054C64.6738 46.9598 64.6673 46.8164 64.6554 46.674C66.2383 45.8416 67.3182 44.1809 67.3182 42.2678Z"
      fill="#B1D511"
    />
    <path
      d="M60.5515 46.2482C60.5644 46.292 60.5765 46.3359 60.5877 46.3808C61.3418 49.2702 59.1066 52.0813 56.1202 52.0813H40.5412C39.9988 52.0813 39.4802 51.8394 39.1462 51.4123C39.1441 51.4097 39.1424 51.4074 39.1403 51.4048C39.1154 51.3723 39.0904 51.3398 39.0661 51.3068C38.1026 49.9979 38.0911 48.2153 38.9947 46.8642C39.1603 46.6174 39.3416 46.3803 39.5391 46.1551C38.0809 45.3426 36.8834 44.0148 36.3834 42.4216C35.8837 40.829 36.1381 38.9826 37.1791 37.6782C38.2206 36.3735 40.0627 35.7137 41.6573 36.2068C41.5475 34.5662 42.5159 32.8253 44.0435 32.2152C45.5705 31.6051 47.4651 32.087 48.5157 33.3519C48.8307 31.735 50.4656 30.431 52.1047 30.588C53.7437 30.7455 55.1344 32.2743 55.1355 33.9215C55.8224 33.5464 56.6062 33.1885 57.3879 33.1648C58.87 33.1193 60.3401 34.0109 60.9854 35.3462C61.6301 36.6815 61.4153 38.3872 60.4581 39.5203C61.8012 39.9901 62.9936 41.6432 62.9633 43.0658C62.9338 44.4879 61.9128 45.8351 60.5515 46.2482Z"
      fill="#6FC200"
    />
    <path
      d="M56.3329 46.4123C56.9873 47.6633 56.9614 49.2444 56.2658 50.4726C56.1531 50.6718 56.0186 50.8638 55.8665 51.0457C55.3133 51.7075 54.4883 52.0814 53.6257 52.0814H43.9818C42.7007 52.0814 41.5455 51.2589 41.1787 50.0313C41.1678 49.9944 41.1574 49.9572 41.1476 49.9198C40.7281 48.3115 41.7149 46.1123 43.1987 45.3641C42.1388 45.1179 41.16 44.4559 40.628 43.5063C40.0959 42.5569 40.0554 41.3237 40.6119 40.3884C41.1689 39.4531 42.3386 38.895 43.3985 39.1428C43.3395 38.1192 43.9766 37.087 44.9839 36.8942C45.9914 36.7015 47.3267 37.1259 47.6499 38.0992C47.7235 37.2471 48.0217 36.3919 48.6129 35.7738C49.204 35.1555 50.1151 34.8135 50.9433 35.0252C51.772 35.2375 52.8762 36.2134 52.7751 37.0626C53.2239 36.2875 54.1679 35.8306 55.0545 35.9605C55.9412 36.0899 56.7153 36.7974 56.9231 37.6695C57.1309 38.5409 56.811 39.6198 56.0782 40.1357C57.3427 40.5607 58.2704 41.8365 58.2845 43.1704C58.2983 44.5041 57.5881 45.9613 56.3329 46.4123Z"
      fill="#57AD00"
    />
    <path
      d="M20.1472 57.794C20.1413 57.8648 20.138 57.936 20.138 58.0084C20.138 59.3744 21.2452 60.4816 22.6111 60.4816H32.8557C33.0862 60.4816 33.3096 60.4501 33.5213 60.3906C34.564 60.1002 35.3288 59.1438 35.3288 58.0084C35.3288 57.9915 35.3285 57.9748 35.3282 57.9578C36.715 57.5734 37.7332 56.3022 37.7332 54.7927C37.7332 53.0162 36.3229 51.5695 34.5606 51.5106C34.4453 49.7448 32.9768 48.3483 31.1819 48.3483C30.4531 48.3483 29.7777 48.5788 29.2252 48.9709C29.2273 48.9284 29.2288 48.8858 29.2288 48.8427C29.2288 47.5421 28.1744 46.4878 26.8735 46.4878C25.7175 46.4878 24.7559 47.321 24.5564 48.4196C24.2508 48.3256 23.926 48.2748 23.5892 48.2748C21.7756 48.2748 20.3048 49.7451 20.3048 51.559C20.3048 52.1541 20.4634 52.7124 20.7399 53.1937C19.6425 53.4464 18.8237 54.4295 18.8237 55.6039C18.8237 56.5547 19.3605 57.3801 20.1472 57.794Z"
      fill="#6FC200"
    />
    <path
      d="M22.1869 57.5822C22.1803 57.604 22.1745 57.6258 22.1689 57.6481C21.7941 59.0842 22.905 60.4814 24.3894 60.4814H32.1325C32.402 60.4814 32.6599 60.3612 32.8258 60.1489C32.8269 60.1476 32.8278 60.1466 32.8288 60.1452C32.8411 60.129 32.8536 60.1129 32.8656 60.0965C33.3445 59.4459 33.3501 58.5601 32.9011 57.8885C32.8187 57.7659 32.7286 57.6481 32.6305 57.5361C33.3553 57.1322 33.9504 56.4723 34.199 55.6805C34.4474 54.8891 34.3209 53.9713 33.8036 53.3229C33.286 52.6745 32.3704 52.3465 31.5778 52.5917C31.6324 51.7762 31.151 50.9109 30.3918 50.6077C29.6328 50.3044 28.6911 50.5438 28.1689 51.1726C28.0123 50.369 27.1997 49.7209 26.3851 49.7988C25.5705 49.8771 24.8792 50.6369 24.8788 51.4557C24.5374 51.2693 24.1477 51.0914 23.7593 51.0796C23.0226 51.057 22.292 51.5001 21.9712 52.1637C21.6507 52.8274 21.7576 53.6753 22.2332 54.2383C21.5656 54.4718 20.9729 55.2935 20.9881 56.0006C21.0028 56.7073 21.5101 57.3769 22.1869 57.5822Z"
      fill="#57AD00"
    />
    <path
      d="M24.2836 57.6639C23.9583 58.2857 23.9712 59.0715 24.317 59.6821C24.3729 59.7811 24.4397 59.8765 24.5154 59.9669C24.7905 60.2959 25.2005 60.4817 25.6291 60.4817H30.4223C31.0591 60.4817 31.6333 60.0729 31.8156 59.4628C31.8211 59.4444 31.8263 59.426 31.831 59.4075C32.0396 58.6081 31.549 57.515 30.8115 57.1432C31.3384 57.0207 31.8248 56.6918 32.0893 56.2198C32.3538 55.7479 32.374 55.135 32.0973 54.6701C31.8205 54.2052 31.239 53.9277 30.7122 54.051C30.7415 53.5423 30.4249 53.0291 29.9242 52.9334C29.4235 52.8376 28.7597 53.0486 28.5991 53.5323C28.5624 53.1088 28.4143 52.6837 28.1204 52.3764C27.8266 52.0692 27.3737 51.8992 26.9621 52.0043C26.5502 52.1098 26.0013 52.5949 26.0516 53.0169C25.8285 52.6316 25.3593 52.4046 24.9186 52.4692C24.4779 52.5335 24.0931 52.8851 23.9898 53.3186C23.8865 53.7517 24.0455 54.2879 24.4097 54.5444C23.7812 54.7556 23.32 55.3897 23.3131 56.0526C23.3067 56.7154 23.6597 57.4398 24.2836 57.6639Z"
      fill="#519305"
    />
    <path
      d="M61.706 52.2992C61.706 50.9534 60.7678 49.8267 59.5101 49.5373C59.827 48.9857 60.0087 48.3459 60.0087 47.6638C60.0087 45.5851 58.3233 43.9 56.2449 43.9C55.8588 43.9 55.4867 43.9584 55.1365 44.0658C54.908 42.8069 53.806 41.8521 52.4811 41.8521C50.9903 41.8521 49.7819 43.0603 49.7819 44.5508C49.7819 44.6001 49.7834 44.6489 49.7859 44.6976C49.1527 44.2484 48.3787 43.9841 47.5435 43.9841C45.4866 43.9841 43.8037 45.5847 43.6715 47.6082C41.652 47.6757 40.0356 49.3336 40.0356 51.3694C40.0356 53.0992 41.2024 54.5561 42.7918 54.9966C42.7915 55.0161 42.7912 55.0352 42.7912 55.0547C42.7912 56.3559 43.6675 57.452 44.8625 57.7846C45.1052 57.8527 45.3611 57.8888 45.6254 57.8888H57.3656C58.931 57.8888 60.1997 56.62 60.1997 55.0547C60.1997 54.9717 60.196 54.8901 60.1892 54.8089C61.0909 54.3348 61.706 53.3889 61.706 52.2992Z"
      fill="#B1D511"
    />
    <path
      d="M57.8517 54.5662C57.8591 54.5912 57.8659 54.6161 57.8723 54.6418C58.3019 56.2877 57.0287 57.8889 55.3276 57.8889H46.4539C46.145 57.8889 45.8496 57.751 45.6593 57.5078C45.6581 57.5063 45.6572 57.505 45.6559 57.5035C45.6416 57.485 45.6275 57.4665 45.6136 57.4477C45.0648 56.7021 45.0583 55.6868 45.5729 54.9173C45.6673 54.7767 45.7705 54.6416 45.8832 54.5134C45.0525 54.0506 44.3704 53.2943 44.0856 52.3869C43.801 51.4798 43.9459 50.4281 44.5388 49.685C45.1319 48.9419 46.1812 48.5661 47.0897 48.8469C47.027 47.9124 47.5786 46.9208 48.4487 46.5733C49.3186 46.2258 50.3977 46.5003 50.9962 47.2208C51.1757 46.2999 52.1068 45.5571 53.0405 45.6465C53.9742 45.7363 54.7662 46.6069 54.7668 47.5451C55.1581 47.3314 55.6046 47.1276 56.0498 47.1141C56.894 47.0882 57.7314 47.596 58.099 48.3566C58.4662 49.1172 58.3437 50.0889 57.7987 50.7342C58.5636 51.0018 59.2428 51.9435 59.2256 52.7537C59.2087 53.5635 58.6271 54.331 57.8517 54.5662Z"
      fill="#6FC200"
    />
    <path
      d="M55.4488 54.66C55.8216 55.3725 55.8069 56.2733 55.4105 56.9728C55.3463 57.0863 55.2698 57.1956 55.1831 57.2993C54.868 57.6761 54.398 57.8891 53.9067 57.8891H48.4136C47.6839 57.8891 47.0259 57.4207 46.8169 56.7215C46.8107 56.7005 46.8047 56.6794 46.7991 56.658C46.5601 55.742 47.1222 54.4892 47.9673 54.0632C47.3636 53.9229 46.8061 53.5457 46.503 53.005C46.1998 52.4642 46.1767 51.7618 46.4937 51.2289C46.811 50.6962 47.4773 50.3782 48.081 50.5195C48.0474 49.9365 48.4102 49.3485 48.9841 49.2387C49.5579 49.1288 50.3185 49.3706 50.5026 49.925C50.5446 49.4396 50.7144 48.9526 51.0511 48.6004C51.3877 48.2483 51.9067 48.0534 52.3784 48.1739C52.8504 48.2947 53.4795 48.8506 53.4218 49.3346C53.6774 48.8929 54.2152 48.6327 54.7202 48.7068C55.2251 48.7804 55.6662 49.1834 55.7845 49.6803C55.9029 50.1766 55.7206 50.7912 55.3032 51.0851C56.0234 51.3272 56.552 52.0539 56.56 52.8136C56.5684 53.5732 56.1639 54.4031 55.4488 54.66Z"
      fill="#57AD00"
    />
  </svg>
);

const Helper = (
  <svg
    width="76"
    height="76"
    viewBox="0 0 76 76"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M57.1167 5.21031C51.4861 1.89901 44.9252 0 37.9209 0C30.3637 0 24.3093 2.20758 20.2244 4.33813L19.7969 14.4668H67.7192C64.7988 10.7616 61.2032 7.61374 57.1167 5.21031Z"
      fill="#C1F8F4"
    />
    <path
      d="M70.6097 18.6937L64.874 11.2491C63.0582 9.41402 61.0561 7.7641 58.8986 6.32861L42.2822 7.18339L71.8256 31.4604L75.0966 30.4074C74.2524 26.2108 72.7149 22.265 70.6097 18.6937Z"
      fill="#9BB9C3"
    />
    <path
      d="M18.2002 40.1635H75.7749C75.8161 39.459 75.8414 38.709 75.8414 37.9208C75.8414 35.7126 75.6504 33.5492 75.2882 31.4444L42.282 7.18359L18.2002 40.1635Z"
      fill="#738C96"
    />
    <path
      d="M18.708 5.17457L16.4238 21.5722L23.6929 31.4606L65.7798 30.4078L20.2241 4.33838C19.6837 4.62033 19.1784 4.90065 18.708 5.17457Z"
      fill="#9BB9C3"
    />
    <path
      d="M0.344727 32.8112L24.9013 30.4078C20.0025 22.8216 17.8897 14.42 18.7559 5.14648C15.8858 6.81187 14.3235 8.23933 14.3132 8.24513C6.84999 14.191 1.68132 22.8937 0.344727 32.8112Z"
      fill="#738C96"
    />
    <path
      d="M75.0958 30.4077H24.9019L27.2622 53.3263L53.637 65.0551L73.5609 50.8986C74.1388 49.3099 74.6143 47.6701 74.9791 45.9863C74.9944 45.8928 75.281 44.738 75.5197 42.8949L75.6699 41.5514C75.771 40.4781 75.8418 39.2522 75.8418 37.9206C75.8415 35.3483 75.5841 32.8363 75.0958 30.4077Z"
      fill="#05CDFF"
    />
    <path
      d="M62.5471 63.7536C43.1526 63.7536 27.1611 49.193 24.9019 30.4077H0.746518C0.258158 32.8363 0 35.3481 0 37.9206C0 46.2196 2.6659 53.8958 7.18799 60.1398L8.11876 61.3717C15.0627 70.1837 25.831 75.8414 37.9207 75.8414C48.8877 75.8414 58.8506 71.1599 65.8102 63.6138C64.7338 63.7058 63.6456 63.7536 62.5471 63.7536Z"
      fill="#00AFF4"
    />
    <path
      d="M8.11922 61.3713L59.2533 64.6329V56.8174L7.18994 60.1383C7.49197 60.5553 7.80084 60.9673 8.11922 61.3713Z"
      fill="#6EE1FF"
    />
    <path
      d="M64.3404 53.2888C58.2487 54.8684 52.4487 57.2957 47.0986 60.4723L48.4957 68.7225L65.8099 63.6135C69.1666 59.9735 71.8244 55.6672 73.5594 50.8984L64.3404 53.2888Z"
      fill="#8BC852"
    />
    <path
      d="M65.8078 63.6142C59.3875 64.1634 52.9649 63.0934 47.0992 60.4731C36.4531 66.7943 30.5112 74.5172 30.0127 75.0133C43.1248 77.7955 56.7155 73.4865 65.8078 63.6142Z"
      fill="#5EA55C"
    />
    <path
      d="M0.932489 46.3052L75.5196 42.8949C75.5821 42.4131 75.641 41.8847 75.6912 41.3154L0.000976562 37.9722C0.00484299 40.8356 0.327244 43.624 0.932489 46.3052Z"
      fill="#00AFF4"
    />
    <path
      d="M64.956 56.5605H62.1761L61.7646 25.5137H64.956V56.5605Z"
      fill="#664545"
    />
    <path
      d="M59.3955 25.5137H62.1755V56.5605H59.3955V25.5137Z"
      fill="#523838"
    />
    <path
      d="M71.5909 25.2885C73.1817 25.2885 74.6225 24.3096 75.1675 22.8151C75.1708 22.8063 75.1739 22.7975 75.177 22.7887C75.7283 21.2673 76.0201 19.6217 75.9988 17.9051C75.9072 10.4666 69.8445 4.37845 62.4064 4.25725C59.486 4.20966 56.7685 5.06801 54.5168 6.56937C54.5138 6.57146 54.5107 6.57339 54.5077 6.57547C53.9575 6.94308 53.6367 7.56974 53.6367 8.23134V11.5075C53.6367 19.1185 59.8066 25.2884 67.4176 25.2884H71.5909V25.2885Z"
      fill="#5EA55C"
    />
    <path
      d="M67.5176 25.1031C59.8829 25.1031 53.6937 18.914 53.6937 11.2791C53.6937 9.62549 53.9841 8.03966 54.5166 6.56982C50.8002 9.04776 48.3521 13.2778 48.3521 18.0797C48.3521 25.7144 54.5413 31.9037 62.176 31.9037C68.1571 31.9037 73.2509 28.1052 75.177 22.7892C72.9845 24.251 70.3505 25.1031 67.5176 25.1031Z"
      fill="#4F8980"
    />
    <path
      d="M45.7468 70.5738H42.967L40.187 39.5269H45.7468V70.5738Z"
      fill="#664545"
    />
    <path d="M40.187 39.5269H42.967V70.5737H40.187V39.5269Z" fill="#523838" />
    <path
      d="M52.19 39.4335C53.8652 39.4335 55.384 38.4035 55.958 36.8297C55.9614 36.8205 55.9647 36.8112 55.9681 36.8019C56.5191 35.2809 56.8108 33.6359 56.79 31.92C56.6993 24.4814 50.6373 18.3925 43.1992 18.2705C40.2781 18.2226 37.56 19.0808 35.3078 20.5826C35.3041 20.585 35.3005 20.5875 35.2968 20.5899C34.6382 21.0299 34.2524 21.7785 34.2524 22.5707V25.3557C34.2524 33.1306 40.5553 39.4333 48.3301 39.4333H52.19V39.4335Z"
      fill="#8BC852"
    />
    <path
      d="M48.3087 39.1158C40.6739 39.1158 34.4847 32.9267 34.4847 25.2918C34.4847 23.6382 34.7751 22.0524 35.3076 20.5825C31.5913 23.0605 29.1431 27.2905 29.1431 32.0924C29.1431 39.7272 35.3323 45.9164 42.967 45.9164C48.9481 45.9164 54.042 42.118 55.9681 36.8019C53.7755 38.2637 51.1416 39.1158 48.3087 39.1158Z"
      fill="#5EA55C"
    />
    <path d="M44.0747 49.981H48.4951V52.9551H44.0747V49.981Z" fill="#664545" />
  </svg>
);

const Apprentice = (
  <svg
    width="76"
    height="76"
    viewBox="0 0 76 76"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <g clipPath="url(#clip0_1359_21896)">
      <path
        d="M37.9998 0C23.3763 0 14.3683 8.24853 14.3434 8.26239C14.3434 8.26239 13.9689 8.72987 13.8988 9.04057C13.3299 11.5662 12.7983 14.9511 12.7983 17.4211L71.5995 20.2337C65.2225 8.19861 52.5687 0 37.9998 0Z"
        fill="#C1F8F4"
      />
      <path
        d="M71.5971 20.2349L38.2087 6.26088C34.7917 4.83074 30.8802 5.25023 27.8441 7.37256L14.5542 16.6629L15.7113 48.7076C15.9438 55.1471 22.6998 59.2384 28.5141 56.461L75.7789 33.8821C75.2517 28.9958 73.7972 24.3875 71.5971 20.2349Z"
        fill="#5EA55C"
      />
      <path
        d="M56.3947 47.8559L27.8445 7.37305L2.22933 25.1487C0.786525 29.1627 0 33.4896 0 38.0002C0 41.4091 0.450486 44.7126 1.2926 47.8559H56.3947Z"
        fill="#4F8980"
      />
      <path
        d="M25.6194 0.836914C25.6194 0.836914 25.6032 0.863887 25.5722 0.916491C23.3575 4.66076 22.1948 8.9336 22.1948 13.2838V31.7123H31.6768C32.4308 31.7123 33.0837 31.1778 33.2203 30.4362C33.2211 30.4319 33.222 30.4274 33.2227 30.4231C33.586 28.4485 33.7857 26.2983 33.7857 24.0482C33.7857 14.4142 25.6194 0.836914 25.6194 0.836914Z"
        fill="#8BC852"
      />
      <path
        d="M30.6534 31.304C26.1433 31.304 22.4871 23.4942 22.4871 13.8602C22.4871 9.78867 23.9456 5.01289 25.6299 0.855392C25.6226 0.843173 25.6189 0.836914 25.6189 0.836914C25.6189 0.836914 17.4526 14.4141 17.4526 24.0482C17.4526 33.6823 21.1088 41.492 25.6189 41.492C29.0757 41.492 32.0308 36.904 33.2226 30.4231C32.4146 30.9948 31.5509 31.304 30.6534 31.304Z"
        fill="#5EA55C"
      />
      <path
        d="M27.5754 48.1452H23.6626V40.4446C23.6626 39.3641 24.5385 38.4883 25.6189 38.4883C26.6995 38.4883 27.5753 39.3642 27.5753 40.4446V48.1452H27.5754Z"
        fill="#664545"
      />
      <path
        d="M10.4184 0.836914C10.4184 0.836914 4.8208 11.3029 4.8208 20.2338C4.8208 22.5342 5.31197 25.0736 6.00342 27.5084C7.50956 32.813 14.2396 34.4353 18.0223 30.4231C18.3855 28.4485 18.5848 26.298 18.5848 24.0481C18.5847 14.4142 10.4184 0.836914 10.4184 0.836914Z"
        fill="#8BC852"
      />
      <path
        d="M15.4527 31.304C10.9426 31.304 7.28643 23.4942 7.28643 13.8602C7.28643 9.78867 8.74489 5.01289 10.4293 0.855392C10.422 0.843173 10.4182 0.836914 10.4182 0.836914C10.4182 0.836914 2.25195 14.4141 2.25195 24.0482C2.25195 33.6823 5.90815 41.492 10.4182 41.492C13.875 41.492 16.8301 36.904 18.022 30.4231C17.2141 30.9948 16.3503 31.304 15.4527 31.304Z"
        fill="#5EA55C"
      />
      <path
        d="M12.3746 47.9962H8.46191V40.4446C8.46191 39.3641 9.33785 38.4883 10.4182 38.4883C11.4988 38.4883 12.3746 39.3642 12.3746 40.4446V47.9962Z"
        fill="#664545"
      />
      <path
        d="M51.1831 41.4919L40.8474 40.1285L32.9727 47.1017H74.898C74.9811 46.7636 75.0613 46.4241 75.1354 46.0823C75.1619 45.9206 75.9998 42.584 75.9998 37.9999C75.9998 36.6085 75.9228 35.2351 75.777 33.8823H60.1407L51.1831 41.4919Z"
        fill="#87A0AF"
      />
      <path
        d="M40.8477 40.129L45.7218 41.8195C49.0892 42.9873 52.8127 42.4643 55.728 40.4138C57.939 38.8586 59.5054 36.5488 60.1321 33.9193L60.1409 33.8828L51.0849 40.129H40.8477Z"
        fill="#738C96"
      />
      <path
        d="M23.6714 47.1021V56.4502H39.9293L71.6809 55.6091C73.0736 52.949 74.1622 50.0988 74.8985 47.1021H23.6714Z"
        fill="#DCBE82"
      />
      <path
        d="M27.98 55.6089V67.9294C27.98 67.9294 49.3835 74.678 54.3502 72.3065C59.7089 69.7479 64.3889 65.9672 68.0136 61.307L68.4096 59.4061L70.5671 57.5883C70.9571 56.9411 71.3284 56.2811 71.6803 55.6089H27.98Z"
        fill="#93D8E4"
      />
      <path
        d="M23.9235 47.1021H1.1001C1.83536 50.0927 2.92425 52.9438 4.32056 55.609L28.5401 56.4502C26.5868 53.5957 25.023 50.4542 23.9235 47.1021Z"
        fill="#C8A06E"
      />
      <path
        d="M27.9799 55.6089H4.32031C10.6703 67.7291 23.3683 76 37.9999 76C43.8336 76 49.3828 74.677 54.3496 72.3055C43.2886 70.8727 33.7575 64.5657 27.9799 55.6089Z"
        fill="#70C6DA"
      />
      <path
        d="M70.6149 57.5063L9.24268 59.4598L68.0124 61.3065C68.9532 60.0971 69.8229 58.8283 70.6149 57.5063Z"
        fill="#93EDE7"
      />
      <path
        d="M64.1248 65.5898L9.26221 62.8584C11.094 64.9743 13.1546 66.8866 15.4069 68.5551L63.51 66.1604C63.7174 65.9726 63.9217 65.7819 64.1248 65.5898Z"
        fill="#70C6DA"
      />
    </g>
    <defs>
      <clipPath id="clip0_1359_21896">
        <rect width="76" height="76" fill="white" />
      </clipPath>
    </defs>
  </svg>
);

const Fellow = (
  <svg
    width="76"
    height="76"
    viewBox="0 0 76 76"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M37.9256 0.148926C23.3307 0.148926 14.3403 8.38132 14.3154 8.39515C14.3154 8.39515 13.9417 8.86171 13.8718 9.17181C13.3039 11.6925 12.7734 15.0708 12.7734 17.536C12.7734 38.4818 30.4368 55.4575 51.3826 55.4575C59.4483 55.4575 68.4221 51.5917 74.4279 46.9438C74.5622 46.8399 74.9884 46.1413 74.9884 46.1413C75.0149 45.9796 75.851 42.6496 75.851 38.0744C75.8512 17.1288 58.8714 0.148926 37.9256 0.148926Z"
      fill="#C1F8F4"
    />
    <path
      d="M51.3794 54.3868C30.4336 54.3868 13.4538 37.4069 13.4538 16.4611C13.4538 13.6926 13.7523 10.9949 14.3157 8.39502C5.59351 15.3436 0 26.056 0 38.0744C0 47.188 3.21461 55.5509 8.57164 62.0907L37.9259 67.1509L67.2802 62.0907C70.9993 57.5521 73.6926 52.1231 74.9887 46.1411C68.5101 51.3014 60.3056 54.3868 51.3794 54.3868Z"
      fill="#93EDE7"
    />
    <path
      d="M55.3676 13.0936C53.5721 13.0532 51.8338 13.2709 50.1868 13.7123C49.2101 13.9743 48.1614 14.8532 47.0742 16.2076C35.1435 31.0692 53.302 51.2337 69.4472 41.1075L71.0972 40.0726C72.5039 37.4541 73.2924 34.454 73.2677 31.2676C73.1911 21.4107 65.2221 13.316 55.3676 13.0936Z"
      fill="#8BC852"
    />
    <path
      d="M66.3406 40.696C56.2204 40.696 48.0162 32.4918 48.0162 22.3716C48.0162 19.2396 48.8021 16.2909 50.1874 13.7124C42.3735 15.8071 36.6201 22.9381 36.6201 31.4131C36.6201 41.5333 44.8242 49.7374 54.9444 49.7374C61.9326 49.7374 68.0071 45.8256 71.0976 40.0725C69.5806 40.479 67.9859 40.696 66.3406 40.696Z"
      fill="#5EA55C"
    />
    <path
      d="M53.8594 40.6963H57.5477V63.4456H53.8594V40.6963Z"
      fill="#664545"
    />
    <path
      d="M52.3418 40.6963H54.1158V63.4456H52.3418V40.6963Z"
      fill="#523838"
    />
    <path
      d="M21.8531 0.00197886C19.9177 -0.0246435 18.043 0.217932 16.2642 0.694754C14.9038 1.05944 13.5856 2.33389 12.3299 4.26095C1.49685 20.8858 20.4557 40.8546 37.7353 31.1001L39.5644 30.0676C41.0704 27.2641 41.9406 24.0681 41.9819 20.6726C42.1188 9.45424 33.0712 0.156656 21.8531 0.00197886Z"
      fill="#8BC852"
    />
    <path
      d="M34.2641 30.7624C22.9872 30.7624 13.8455 21.6207 13.8455 10.3438C13.8455 6.8538 14.7212 3.56825 16.2647 0.694824C7.55789 3.02896 1.14697 10.975 1.14697 20.4185C1.14697 31.6954 10.2887 40.8371 21.5655 40.8371C29.3523 40.8371 36.1209 36.4783 39.5649 30.0676C37.8744 30.5206 36.0976 30.7624 34.2641 30.7624Z"
      fill="#5EA55C"
    />
    <path
      d="M8.57129 62.0908C11.4658 65.6244 14.9858 68.6259 18.9622 70.9261L24.1677 73.4278L44.3121 68.7721L57.547 62.091H8.57129V62.0908Z"
      fill="#5EA570"
    />
    <path
      d="M57.5468 62.0908L24.1675 73.4278C28.4326 75.0888 33.0724 76.0002 37.9251 76.0002C49.6861 76.0002 60.2927 70.6171 67.2795 62.0908H57.5468Z"
      fill="#C8BEC3"
    />
    <path
      d="M19.8584 29.7017L20.6989 71.8695C21.8241 72.4443 22.9812 72.9656 24.1681 73.4277V29.7017H19.8584Z"
      fill="#664545"
    />
    <path
      d="M20.7538 29.7017H18.9624V70.9262C19.5496 71.2659 20.1473 71.5894 20.7538 71.898V29.7017Z"
      fill="#523838"
    />
    <path
      d="M21.5653 31.1889C15.3823 31.1889 10.3521 26.1586 10.3521 19.9756H13.3266C13.3266 24.5183 17.0225 28.2144 21.5653 28.2144C26.1082 28.2144 29.804 24.5185 29.804 19.9756H32.7786C32.7786 26.1586 27.7482 31.1889 21.5653 31.1889Z"
      fill="#664545"
    />
    <path
      d="M11.839 25.1219C16.1083 25.1219 19.5692 21.661 19.5692 17.3918C19.5692 13.1225 16.1083 9.66162 11.839 9.66162C7.56978 9.66162 4.10889 13.1225 4.10889 17.3918C4.10889 21.661 7.56978 25.1219 11.839 25.1219Z"
      fill="#AAD540"
    />
    <path
      d="M30.5477 25.8834C37.4943 25.8834 43.1256 20.2521 43.1256 13.3055C43.1256 6.35887 37.4943 0.727539 30.5477 0.727539C23.6011 0.727539 17.9697 6.35887 17.9697 13.3055C17.9697 20.2521 23.6011 25.8834 30.5477 25.8834Z"
      fill="#AAD540"
    />
    <path
      d="M54.9446 42.1836C48.7617 42.1836 43.7314 37.1533 43.7314 30.9702H46.706C46.706 35.513 50.4019 39.209 54.9446 39.209C59.4875 39.209 63.1834 35.5131 63.1834 30.9702H66.158C66.1578 37.1533 61.1276 42.1836 54.9446 42.1836Z"
      fill="#664545"
    />
    <path
      d="M45.2186 38.112C50.5901 38.112 54.9445 33.7575 54.9445 28.3861C54.9445 23.0146 50.5901 18.6602 45.2186 18.6602C39.8471 18.6602 35.4927 23.0146 35.4927 28.3861C35.4927 33.7575 39.8471 38.112 45.2186 38.112Z"
      fill="#AAD540"
    />
    <path
      d="M63.9264 34.1112C67.6116 34.1112 70.5989 31.1238 70.5989 27.4386C70.5989 23.7535 67.6116 20.7661 63.9264 20.7661C60.2413 20.7661 57.2539 23.7535 57.2539 27.4386C57.2539 31.1238 60.2413 34.1112 63.9264 34.1112Z"
      fill="#AAD540"
    />
  </svg>
);

const Believer = (
  <svg
    width="76"
    height="76"
    viewBox="0 0 76 76"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M38 76C58.9868 76 76 58.9868 76 38C76 17.0132 58.9868 0 38 0C17.0132 0 0 17.0132 0 38C0 58.9868 17.0132 76 38 76Z"
      fill="#9AF4EF"
    />
    <path
      d="M0.611117 31.2429C0.217164 33.4369 0 35.6926 0 38C0 40.3075 0.217164 42.5632 0.611117 44.7572C8.94588 47.8959 22.9198 49.9555 38.759 49.9555C53.6153 49.9555 66.826 48.1425 75.2869 45.3278C75.7505 42.9561 76 40.5076 76 38C76 35.4925 75.7505 33.044 75.2871 30.6723C66.8261 27.8576 53.6155 26.0444 38.7591 26.0444C22.9198 26.0444 8.94603 28.1042 0.611117 31.2429Z"
      fill="#4CD3CB"
    />
    <path
      d="M67.0331 13.4941C65.2696 13.9304 63.7573 15.0015 62.749 16.451C62.3285 16.3185 61.8895 16.227 61.4254 16.227C58.9813 16.227 57 18.2082 57 20.6524H71.8056C70.4841 18.0823 68.8817 15.6821 67.0331 13.4941Z"
      fill="white"
    />
    <path
      d="M65.2156 64.5075C71.2108 58.353 75.1312 50.1756 75.8637 41.0936L74.4418 38.9607H75.9755C75.9834 38.6404 75.9997 38.3223 75.9997 38.0001C75.9997 37.0881 75.9562 36.1868 75.893 35.291L71.8434 29.2168L65.3475 38.9607H69.245L64.0482 46.7559H67.9458L62.749 54.5511H66.6465L61.4497 62.3463C61.4497 62.3463 65.4556 62.3463 65.3472 62.3463L63.9389 64.4588C64.3655 64.4698 64.7894 64.4931 65.2156 64.5075Z"
      fill="#00BDB3"
    />
    <path
      d="M8.75929 54.5509H12.6568L7.46002 46.7557H11.3575L6.16075 38.9605H10.0583L3.5625 29.2168L0.183172 34.2856C0.0645703 35.5082 0 36.7466 0 38.0001C0 38.3222 0.0163281 38.6403 0.0243437 38.9607H0.96425L0.0752578 40.2941C0.648672 49.9161 4.7975 58.574 11.2176 64.9537C11.4141 64.9579 11.6084 64.9619 11.8051 64.966L10.0584 62.3461C9.95021 62.3461 13.9559 62.3461 13.9559 62.3461L8.75929 54.5509Z"
      fill="#00BDB3"
    />
    <path
      d="M24.0723 57.7737L22.6639 59.8862C26.2775 59.9797 29.8904 60.2122 33.4166 60.2794C35.204 60.3136 37.0052 60.3551 38.8108 60.3934L37.0641 57.7735C36.9559 57.7735 40.9616 57.7735 40.9616 57.7735L35.7648 49.9783H39.6625L34.4657 42.1831H38.3632L33.1664 34.3879H37.064L30.5681 24.644L24.0721 34.3879H27.9697L22.7729 42.1831H26.6704L21.4736 49.9783H25.3711L20.1743 57.7735C20.1748 57.7737 24.1805 57.7737 24.0723 57.7737Z"
      fill="#00BDB3"
    />
    <path
      d="M38.5202 57.7737L37.1118 59.8862C40.7254 59.9797 44.3383 60.2122 47.8645 60.2794C49.652 60.3136 51.4531 60.3551 53.2587 60.3934L51.512 57.7735C51.4038 57.7735 55.4096 57.7735 55.4096 57.7735L50.2128 49.9783H54.1103L48.9135 42.1831H52.811L47.6142 34.3879H51.5117L45.0158 24.644L38.5199 34.3879H42.4174L37.2206 42.1831H41.1181L35.9213 49.9783H39.8189L34.6221 57.7735C34.6227 57.7737 38.6285 57.7737 38.5202 57.7737Z"
      fill="#00BDB3"
    />
    <path
      d="M64.4027 34.4378L44.4958 31.7129L22.5624 33.0754L16.229 31.8809L7.39746 36.4629L12.6567 54.551H52.141L64.4027 39.1878V34.4378Z"
      fill="#00BDB3"
    />
    <path
      d="M51.6913 59.8482L50.2829 61.9608C53.8965 62.0543 57.5094 62.2868 61.0356 62.354C62.823 62.3881 64.6242 62.4297 66.4298 62.468L64.6831 59.8481C64.5749 59.8481 68.5806 59.8481 68.5806 59.8481L63.3838 52.0529H67.2814L62.0846 44.2577H65.9821L60.7853 36.4625H64.6828L58.1872 26.7188L51.6913 36.4626H55.5888L50.392 44.2578H54.2895L49.0927 52.053H52.9903L47.7935 59.8482C47.7936 59.8482 51.7995 59.8482 51.6913 59.8482Z"
      fill="#00BDB3"
    />
    <path
      d="M9.73327 59.8482L8.32489 61.9608C11.9385 62.0543 15.5514 62.2868 19.0776 62.354C20.865 62.3881 22.6662 62.4297 24.4718 62.468L22.7251 59.8481C22.6169 59.8481 26.6226 59.8481 26.6226 59.8481L21.4258 52.0529H25.3235L20.1267 44.2577H24.0242L18.8274 36.4625H22.725L16.2292 26.7188L9.73327 36.4626H13.6308L8.434 44.2578H12.3315L7.13472 52.053H11.0322L5.83545 59.8482C5.83575 59.8482 9.84163 59.8482 9.73327 59.8482Z"
      fill="#00BDB3"
    />
    <path
      d="M72.4805 53.9708L71.2018 52.053H73.3047C73.532 51.4827 73.7455 50.9059 73.9455 50.3224L69.9026 44.2578H73.8001L68.6033 36.4626H72.5008L66.005 26.7188L59.5091 36.4626H63.4066L58.2098 44.2578H62.1074L56.9106 52.053H60.8081L55.6113 59.8482C55.6113 59.8482 59.617 59.8482 59.5088 59.8482L54.312 67.6434H58.2095L55.4801 71.7378C62.9312 67.869 68.9361 61.6099 72.4805 53.9708Z"
      fill="#00A07D"
    />
    <path
      d="M3.5204 53.9708L4.79904 52.053H2.69598C2.46872 51.4827 2.25527 50.9059 2.05518 50.3224L6.09817 44.2578H2.2005L7.39729 36.4626H3.49977L9.99569 26.7188L16.4916 36.4626H12.5941L17.7909 44.2578H13.8932L19.09 52.053H15.1925L20.3893 59.8482C20.3893 59.8482 16.3835 59.8482 16.4918 59.8482L21.6885 67.6434H17.791L20.5205 71.7378C13.0695 67.869 7.06479 61.6099 3.5204 53.9708Z"
      fill="#00A07D"
    />
    <path
      d="M61.8049 67.6108L60.0451 64.9713L63.9427 64.9714L58.7459 57.1762C58.6377 57.1762 62.6434 57.1762 62.6434 57.1762L57.4466 49.381H61.3441L56.1473 41.5858H60.0448L54.8481 33.7906H58.7456L52.2501 24.0469L45.7542 33.7908H49.6517L44.4549 41.586H48.3524L43.1556 49.3812H47.0532L41.8564 57.1764C41.8564 57.1764 45.8621 57.1764 45.7539 57.1764L40.5571 64.9715H44.4546L39.2578 72.7667H43.1553L41.0901 75.8645C48.9012 75.235 56.0428 72.249 61.8049 67.6108Z"
      fill="#36B294"
    />
    <path
      d="M14.1852 67.6108L15.9449 64.9713L12.0474 64.9714L17.2442 57.1762C17.3524 57.1762 13.3466 57.1762 13.3466 57.1762L18.5434 49.381H14.6458L19.8426 41.5858H15.945L21.1418 33.7906H17.2443L23.7401 24.0469L30.236 33.7908H26.3385L31.5353 41.586H27.6376L32.8344 49.3812H28.9369L34.1337 57.1764C34.1337 57.1764 30.1279 57.1764 30.2362 57.1764L35.4329 64.9715H31.5354L36.7322 72.7667H32.8344L34.8996 75.8645C27.0888 75.235 19.9472 72.249 14.1852 67.6108Z"
      fill="#36B294"
    />
    <path
      d="M33.2427 15.7586C33.2427 13.595 34.9966 11.8411 37.1602 11.8411C37.4868 11.8411 37.799 11.8927 38.1022 11.968C39.1245 10.8641 40.5739 10.1621 42.197 10.1621C45.2879 10.1621 47.7936 12.6677 47.7936 15.7586H33.2427Z"
      fill="white"
    />
    <g opacity="0.6">
      <path
        opacity="0.6"
        d="M42.6411 22.0211C42.6411 20.6086 43.7863 19.4634 45.1988 19.4634C45.412 19.4634 45.6158 19.4971 45.8138 19.5462C46.4812 18.8256 47.4275 18.3672 48.4873 18.3672C50.5054 18.3672 52.1411 20.0031 52.1411 22.021H42.6411V22.0211Z"
        fill="white"
      />
    </g>
    <g opacity="0.6">
      <path
        opacity="0.6"
        d="M53.0663 11.5975C53.0663 10.1467 51.8902 8.97063 50.4394 8.97063C50.2205 8.97063 50.011 9.00521 49.8077 9.05568C49.1222 8.31542 48.1502 7.84473 47.0619 7.84473C44.9892 7.84473 43.3091 9.52489 43.3091 11.5975H53.0663Z"
        fill="white"
      />
    </g>
    <path
      d="M35.1963 14.8047C34.8225 14.8047 34.4692 14.8783 34.1306 14.985C33.0582 13.4434 31.2792 12.4297 29.2588 12.4297C27.2384 12.4297 25.4594 13.4434 24.3869 14.985C24.0483 14.8783 23.6951 14.8047 23.3213 14.8047C21.3537 14.8047 19.7588 16.3996 19.7588 18.3672H38.7588C38.7588 16.3996 37.1638 14.8047 35.1963 14.8047Z"
      fill="white"
    />
    <g opacity="0.6">
      <path
        opacity="0.6"
        d="M29.5756 8.37176C29.3695 8.37176 29.1749 8.41229 28.9883 8.47122C28.3973 7.62156 27.4168 7.06299 26.3034 7.06299C25.19 7.06299 24.2095 7.62156 23.6185 8.47122C23.4319 8.41243 23.2371 8.37176 23.0313 8.37176C21.9469 8.37176 21.0679 9.25081 21.0679 10.3351H31.5389C31.5389 9.25081 30.6599 8.37176 29.5756 8.37176Z"
        fill="white"
      />
    </g>
    <path
      d="M45.7952 62.8931L49.6927 62.8933L44.4959 55.0981C44.3877 55.0981 48.3934 55.0981 48.3934 55.0981L43.1966 47.3029H47.0941L41.8973 39.5077H45.7949L40.5981 31.7125H44.4956L38.0001 21.9688L31.5042 31.7126H35.4017L30.2049 39.5078H34.1024L28.9056 47.303H32.8032L27.6064 55.0982C27.6064 55.0982 31.6121 55.0982 31.5039 55.0982L26.3071 62.8934H30.2046L25.0078 70.6886H28.9053L26.5394 74.2375C30.1565 75.3801 34.0055 76 38.0001 76C41.9947 76 45.8437 75.3801 49.4604 74.2373L47.0944 70.6882H50.9919L45.7952 62.8931Z"
      fill="#00A07D"
    />
    <g opacity="0.6">
      <path
        opacity="0.6"
        d="M15.4374 20.6521C15.4374 18.6846 13.8425 17.0896 11.8749 17.0896C11.5012 17.0896 11.1479 17.1633 10.8093 17.27C10.0734 16.2121 9.00015 15.413 7.74927 15.0093C6.40531 16.7749 5.21692 18.6634 4.19434 20.6521H15.4374Z"
        fill="white"
      />
    </g>
  </svg>
);

const Supporter = (
  <svg
    width="74"
    height="74"
    viewBox="0 0 74 74"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <g clipPath="url(#clip0_364_4305)">
      <path
        d="M37 74C57.4345 74 74 57.4345 74 37C74 16.5655 57.4345 0 37 0C16.5655 0 0 16.5655 0 37C0 57.4345 16.5655 74 37 74Z"
        fill="#9AF4EF"
      />
      <path
        d="M71.042 22.4862C69.8116 22.6162 68.7313 23.2326 68.0153 24.1651C67.7479 24.1015 67.4728 24.059 67.1859 24.059C66.6272 24.059 66.1051 24.1979 65.6337 24.426C65.0465 23.2487 63.8427 22.4325 62.4377 22.4325C61.4735 22.4325 60.6023 22.8178 59.9583 23.4371C59.6085 23.3231 59.242 23.2458 58.8542 23.2458C58.3206 23.2458 57.8188 23.3701 57.3637 23.5793C56.7095 22.8778 55.7844 22.4325 54.7495 22.4325C54.0538 22.4325 53.4099 22.6393 52.8602 22.9824C52.2039 22.2476 51.2595 21.7759 50.1968 21.7759C48.2176 21.7759 46.6133 23.3803 46.6133 25.3594C46.6133 27.3384 48.2177 28.9429 50.1968 28.9429C50.8924 28.9429 51.5364 28.7361 52.0861 28.3929C52.7424 29.1277 53.6868 29.5995 54.7495 29.5995C55.2831 29.5995 55.7849 29.4752 56.2401 29.2659C56.8942 29.9675 58.8013 33.1518 59.8363 33.1518C60.8005 33.1518 60.6898 30.0274 61.3338 29.4081C61.6836 29.5222 62.0501 29.5995 62.4379 29.5995C62.9965 29.5995 63.5187 29.4606 63.99 29.2325C64.5772 30.4099 65.781 31.2262 67.186 31.2262C67.9467 31.2262 68.6491 30.9857 69.2292 30.5816C69.8921 30.9822 70.6607 31.2262 71.4917 31.2262C72.2041 31.2262 72.8672 31.0408 73.4623 30.74C72.9714 27.8625 72.1563 25.0962 71.042 22.4862Z"
        fill="#00C8B4"
      />
      <path
        d="M24.5925 21.7754C23.6336 21.7754 22.7674 22.1574 22.1242 22.7708C21.4811 22.1574 20.6149 21.7754 19.6559 21.7754C18.8315 21.7754 18.0815 22.0649 17.4761 22.5327C16.8707 22.0649 16.1207 21.7754 15.2963 21.7754C14.1653 21.7754 13.1691 22.3097 12.5123 23.1279C12.1961 23.0367 11.8687 22.9723 11.5233 22.9723C10.9693 22.9723 10.451 23.1085 9.98273 23.333C9.31283 22.7202 8.42902 22.337 7.44953 22.337C6.40775 22.337 5.46526 22.7602 4.78336 23.4439C4.20668 23.1521 3.56424 22.9723 2.87381 22.9723C2.8332 22.9723 2.79562 22.9831 2.75544 22.9842C1.74127 25.4595 0.990426 28.0687 0.53125 30.7785C1.20361 31.2231 2.00735 31.4853 2.87381 31.4853C4.30756 31.4853 6.79422 32.5717 7.5653 31.4853C7.91796 31.5946 8.17941 30.8573 8.56806 30.8573C9.24996 30.8573 8.76202 29.6743 9.31369 29.3575C9.92405 29.8397 10.685 30.1394 11.5233 30.1394C12.6542 30.1394 13.6505 29.6052 14.3073 28.7869C14.6235 28.8781 14.9507 28.9426 15.2963 28.9426C16.1207 28.9426 16.8707 28.6531 17.4761 28.1852C18.0815 28.6531 18.8315 28.9426 19.6559 28.9426C20.6149 28.9426 21.4809 28.5606 22.1241 27.9472C22.7672 28.5606 23.6334 28.9426 24.5924 28.9426C26.5716 28.9426 28.1759 27.3381 28.1759 25.359C28.176 23.3797 26.5717 21.7754 24.5925 21.7754Z"
        fill="#00C8B4"
      />
      <path
        d="M0.00439453 37.165C0.0938594 57.5231 16.6212 73.9998 37.0002 73.9998C57.3793 73.9998 73.9066 57.5231 73.996 37.165H0.00439453Z"
        fill="#52C883"
      />
      <path
        d="M5.35783 56.1774C13.9716 55.5825 25.527 62.9433 35.844 62.9433C56.3386 62.9433 59.0654 55.3054 69.1471 55.3054C72.2022 49.9507 73.9671 43.7646 73.996 37.165H0.00439453C0.0348906 44.1242 1.98838 50.6284 5.35783 56.1774Z"
        fill="#34BE71"
      />
      <path
        d="M4.10865 53.9419C12.9204 53.5738 29.178 52.7706 41.3561 54.5754C51.6659 56.1032 63.2085 54.5916 70.5581 52.5365C72.7305 47.8572 73.9719 42.6582 73.996 37.165H0.00439453C0.0308438 43.2106 1.512 48.9109 4.10865 53.9419Z"
        fill="#00A07D"
      />
      <path
        d="M1.78719 48.3399C7.41943 51.3691 16.7144 52.2311 27.7502 51.0759C39.7944 49.815 51.9398 49.605 60.7056 50.2882C65.5437 50.6651 69.2305 50.4126 71.5696 50.1108C73.1056 46.083 73.9759 41.728 73.996 37.165H0.00439453C0.0214492 41.0638 0.651172 44.8154 1.78719 48.3399Z"
        fill="#00827E"
      />
      <path
        d="M71.1621 51.2103C71.6102 50.1344 72.0101 49.0337 72.3565 47.9092L71.864 37.165H71.4713L71.1621 51.2103Z"
        fill="#4F6E6E"
      />
      <path
        d="M3.5345 52.7763L2.84768 37.7964H2.46612L2.20654 49.5891C2.6001 50.6766 3.04468 51.739 3.5345 52.7763Z"
        fill="#4F6E6E"
      />
      <path
        d="M70.5711 27.25C69.3616 27.25 68.2485 28.7586 67.3462 30.7451C66.9996 32.7793 66.8091 34.8668 66.8091 36.9998C66.8091 39.3591 67.0393 41.6635 67.4615 43.9002C68.3431 44.5192 69.4119 44.8889 70.5711 44.8889C71.5741 44.8889 72.5019 44.5979 73.3081 44.1234C73.758 41.8176 74.0004 39.4375 74.0004 36.9998C74.0004 34.5017 73.7492 32.0627 73.2773 29.7036C72.4801 28.2572 71.5578 27.25 70.5711 27.25Z"
        fill="#00A07D"
      />
      <path
        d="M0.652414 43.9002C1.53405 44.5192 2.60286 44.8889 3.762 44.8889C6.75944 44.8889 9.18944 42.4589 9.18944 39.4616C9.18944 36.4642 6.75944 27.25 3.762 27.25C2.55257 27.25 1.43939 28.7586 0.537078 30.7451C0.190492 32.7793 0 34.8668 0 36.9998C0 39.3591 0.230238 41.6635 0.652414 43.9002Z"
        fill="#00A07D"
      />
      <path
        d="M35.6743 52.6503H34.207L34.5591 36.6489H34.9407L35.6743 52.6503Z"
        fill="#00827E"
      />
      <path
        d="M31.3022 53.0014H29.835L30.187 37H30.5686L31.3022 53.0014Z"
        fill="#00827E"
      />
      <path
        d="M40.5171 52.6504H39.2603L39.5619 38.9443H39.8887L40.5171 52.6504Z"
        fill="#00827E"
      />
      <path
        d="M38.5772 51.8535H37.3203L37.622 38.1475H37.9487L38.5772 51.8535Z"
        fill="#00827E"
      />
      <path
        d="M46.7935 52.6504H45.5366L45.8383 38.9443H46.1651L46.7935 52.6504Z"
        fill="#00827E"
      />
      <path
        d="M59.475 52.1118H58.2183L58.5199 38.4058H58.8466L59.475 52.1118Z"
        fill="#00827E"
      />
      <path
        d="M65.9702 51.8535H64.7134L65.015 38.1475H65.3418L65.9702 51.8535Z"
        fill="#00827E"
      />
      <path
        d="M68.8608 51.5024H67.604L67.9056 37.7964H68.2324L68.8608 51.5024Z"
        fill="#00827E"
      />
      <path
        d="M9.1963 52.2861H7.93945L8.24109 38.5801H8.56787L9.1963 52.2861Z"
        fill="#00827E"
      />
      <path
        d="M5.34376 52.1118H4.08691L4.38855 38.4058H4.71534L5.34376 52.1118Z"
        fill="#00827E"
      />
      <path
        d="M28.2661 52.6503H26.7988L27.1509 36.6489H27.5325L28.2661 52.6503Z"
        fill="#00827E"
      />
      <path
        d="M23.2524 52.6503H21.7852L22.1372 36.6489H22.5188L23.2524 52.6503Z"
        fill="#00827E"
      />
      <path
        d="M19.6558 52.6503H18.1885L18.5406 36.6489H18.9221L19.6558 52.6503Z"
        fill="#00827E"
      />
      <path
        d="M14.479 52.4198H13.0117L13.3639 36.4185H13.7454L14.479 52.4198Z"
        fill="#00827E"
      />
      <path
        d="M41.3559 54.5754H39.8887L40.2409 38.5742H40.6223L41.3559 54.5754Z"
        fill="#4F6E6E"
      />
      <path
        d="M44.7861 54.2839H43.3188L43.6709 38.2827H44.0525L44.7861 54.2839Z"
        fill="#4F6E6E"
      />
      <path
        d="M50.1963 54.2839H48.729L49.0812 38.2827H49.4626L50.1963 54.2839Z"
        fill="#4F6E6E"
      />
      <path
        d="M54.749 53.9818H53.2817L53.634 37.9805H54.0154L54.749 53.9818Z"
        fill="#4F6E6E"
      />
      <path
        d="M60.3135 53.4335H58.8462L59.1984 37.4321H59.5798L60.3135 53.4335Z"
        fill="#4F6E6E"
      />
      <path
        d="M66.8091 52.6439H65.3418L65.6939 36.6426H66.0754L66.8091 52.6439Z"
        fill="#4F6E6E"
      />
      <path
        d="M69.6992 53.2597H68.2319L68.584 37.2583H68.9656L69.6992 53.2597Z"
        fill="#4F6E6E"
      />
      <path
        d="M10.6567 53.9818H9.18945L9.54168 37.9805H9.92309L10.6567 53.9818Z"
        fill="#4F6E6E"
      />
      <path
        d="M6.18261 54.2839H4.71533L5.06755 38.2827H5.44897L6.18261 54.2839Z"
        fill="#4F6E6E"
      />
      <path
        d="M27.5325 57.511H25.5269L26.0081 35.6387H26.5296L27.5325 57.511Z"
        fill="#6C5F59"
      />
      <path
        d="M33.656 57.511H31.6504L32.1318 35.6387H32.6531L33.656 57.511Z"
        fill="#6C5F59"
      />
      <path
        d="M42.6277 57.3279H40.6221L41.1035 35.4556H41.625L42.6277 57.3279Z"
        fill="#6C5F59"
      />
      <path
        d="M48.1707 57.3279H46.165L46.6463 35.4556H47.1678L48.1707 57.3279Z"
        fill="#6C5F59"
      />
      <path
        d="M57.9236 57.511H55.918L56.3994 35.6387H56.9209L57.9236 57.511Z"
        fill="#6C5F59"
      />
      <path
        d="M63.4401 56.8642H61.4346L61.9159 34.9917H62.4373L63.4401 56.8642Z"
        fill="#6C5F59"
      />
      <path
        d="M18.9222 56.1952H16.9165L17.3978 34.3228H17.9193L18.9222 56.1952Z"
        fill="#6C5F59"
      />
      <path
        d="M15.4814 54.2839H14.0142L14.3662 38.2827H14.7478L15.4814 54.2839Z"
        fill="#4F6E6E"
      />
      <path
        d="M24.5923 54.3923H23.125L23.4771 38.3911H23.8586L24.5923 54.3923Z"
        fill="#4F6E6E"
      />
      <path
        d="M30.5684 54.5754H29.1011L29.4533 38.5742H29.8347L30.5684 54.5754Z"
        fill="#4F6E6E"
      />
      <path
        d="M36.5776 54.5754H35.1104L35.4624 38.5742H35.844L36.5776 54.5754Z"
        fill="#4F6E6E"
      />
      <path
        d="M8.56816 56.3691H6.5625L7.04379 34.4966H7.56526L8.56816 56.3691Z"
        fill="#6C5F59"
      />
      <path
        d="M70.6781 42.7502C70.6781 46.716 67.4633 49.9308 63.4975 49.9308C59.5317 49.9308 56.3169 46.716 56.3169 42.7502C56.3169 38.7844 59.5317 26.5938 63.4975 26.5938C67.4633 26.5938 70.6781 38.7844 70.6781 42.7502Z"
        fill="#34BE71"
      />
      <path
        d="M63.1251 44.4194L62.7827 58.8726H64.8908L64.1776 44.4194H63.1251Z"
        fill="#805F59"
      />
      <path
        d="M63.4976 46.5984L66.7906 43.9199L67.1857 44.6433L63.4976 47.9364V46.5984Z"
        fill="#805F59"
      />
      <path
        d="M63.4975 26.5938C62.5072 26.5938 61.5638 27.3541 60.7056 28.5565C60.9689 28.4491 61.2361 28.3872 61.5073 28.3872C65.4729 28.3872 68.6879 40.5779 68.6879 44.5437C68.6879 46.1761 68.1368 47.6764 67.2192 48.8826C69.2903 47.6229 70.6782 45.3516 70.6782 42.7502C70.6782 38.7844 67.4633 26.5938 63.4975 26.5938Z"
        fill="#52C883"
      />
      <path
        d="M18.9224 42.1333C18.9224 46.2507 15.5846 49.5887 11.4671 49.5887C7.34952 49.5887 4.01172 46.2509 4.01172 42.1333C4.01172 38.0158 7.34967 25.3589 11.4671 25.3589C15.5845 25.3589 18.9224 38.0159 18.9224 42.1333Z"
        fill="#34BE71"
      />
      <path
        d="M11.0802 43.8662L10.7246 58.8722H12.9135L12.1728 43.8662H11.0802Z"
        fill="#805F59"
      />
      <path
        d="M11.4668 46.1284L14.8858 43.3477L15.2962 44.0986L11.4668 47.5177V46.1284Z"
        fill="#805F59"
      />
      <path
        d="M11.4671 25.3589C10.4389 25.3589 9.45939 26.1483 8.56836 27.3968C8.84167 27.2852 9.11917 27.221 9.40072 27.221C13.5181 27.221 16.8561 39.8781 16.8561 43.9955C16.8561 45.6904 16.2839 47.248 15.3311 48.5004C17.4815 47.1923 18.9224 44.8342 18.9224 42.1333C18.9224 38.0159 15.5846 25.3589 11.4671 25.3589Z"
        fill="#52C883"
      />
      <path
        d="M31.7299 14.141C31.2979 14.141 30.8898 14.226 30.4985 14.3494C29.2592 12.5678 27.2032 11.3965 24.8684 11.3965C22.5337 11.3965 20.4777 12.5678 19.2384 14.3494C18.8471 14.226 18.439 14.141 18.007 14.141C15.7333 14.141 13.8901 15.9842 13.8901 18.2578H35.8468C35.8468 15.9842 34.0035 14.141 31.7299 14.141Z"
        fill="white"
      />
      <g opacity="0.6">
        <path
          opacity="0.6"
          d="M52.13 15.8048C51.8552 15.8048 51.5955 15.8589 51.3465 15.9374C50.5579 14.8038 49.2499 14.0586 47.7644 14.0586C46.2789 14.0586 44.9709 14.8038 44.1825 15.9374C43.9336 15.8589 43.6739 15.8048 43.399 15.8048C41.9524 15.8048 40.7798 16.9775 40.7798 18.424H54.7492C54.7492 16.9775 53.5766 15.8048 52.13 15.8048Z"
          fill="white"
        />
      </g>
      <path
        d="M43.5354 34.5378C43.4247 34.0933 43.3595 33.6307 43.3595 33.1516C43.3595 30.0128 45.8832 27.4682 48.9962 27.4682C49.3232 27.4682 49.6416 27.5023 49.9532 27.5562C50.9387 26.9496 52.0928 26.5938 53.332 26.5938C56.9241 26.5938 59.8359 29.5298 59.8359 33.1514C59.8359 33.3139 59.8234 33.4733 59.8118 33.6327C61.4404 35.4847 62.4375 37.9139 62.4375 40.5836C62.4375 46.3783 57.7785 51.076 52.0312 51.076C46.284 51.076 41.625 46.3783 41.625 40.5836C41.6251 38.3301 42.3362 36.2476 43.5354 34.5378Z"
        fill="#00A07D"
      />
      <path
        d="M52.9783 58.8722H51.1567L51.5938 40.4194H52.0674L52.9783 58.8722Z"
        fill="#805F59"
      />
      <path
        d="M51.7579 47.5392L47.6593 44.2056L47.1675 44.4789L51.7579 48.5775V47.5392Z"
        fill="#805F59"
      />
      <path
        d="M52.0309 43.5013L49.2499 41.2393L48.916 41.4247L52.0309 44.2058V43.5013Z"
        fill="#805F59"
      />
      <path
        d="M52.0312 45.7905L56.1299 42.457L56.6217 42.7303L52.0312 46.8288V45.7905Z"
        fill="#805F59"
      />
      <path
        d="M59.8117 33.6329C59.8233 33.4733 59.8359 33.314 59.8359 33.1516C59.8359 29.5298 56.924 26.5938 53.332 26.5938C52.0928 26.5938 50.9387 26.9494 49.953 27.556C49.6414 27.5021 49.323 27.468 48.996 27.468C47.3128 27.468 45.819 28.2271 44.7861 29.4066C45.3816 29.1908 46.0144 29.0528 46.6834 29.0528C47.0103 29.0528 47.3287 29.0869 47.6403 29.1407C48.626 28.5342 49.7801 28.1784 51.0193 28.1784C54.6114 28.1784 57.5232 31.1144 57.5232 34.7362C57.5232 34.8988 57.5108 35.0581 57.4991 35.2175C59.1278 37.0694 60.1249 39.4987 60.1249 42.1683C60.1249 45.2711 58.7812 48.0506 56.6579 49.9715C60.0803 48.2532 62.4374 44.7002 62.4374 40.5835C62.4374 37.9139 61.4405 35.4847 59.8117 33.6329Z"
        fill="#36B294"
      />
      <path
        d="M30.9072 32.0791C31.03 31.5897 31.1025 31.0803 31.1025 30.5529C31.1025 27.0968 28.3009 24.2952 24.8448 24.2952C24.4819 24.2952 24.1284 24.3328 23.7825 24.3921C22.6883 23.7243 21.407 23.3325 20.0314 23.3325C16.0437 23.3325 12.811 26.5651 12.811 30.5529C12.811 30.7318 12.8249 30.9071 12.8378 31.0829C11.0298 33.1219 9.92285 35.7965 9.92285 38.7359C9.92285 45.1161 15.095 50.2885 21.4754 50.2885C27.8557 50.2885 33.0279 45.1163 33.0279 38.7359C33.0279 36.2548 32.2385 33.9618 30.9072 32.0791Z"
        fill="#00A07D"
      />
      <path
        d="M30.9073 32.0791C31.0301 31.5897 31.1025 31.0803 31.1025 30.5529C31.1025 27.0968 28.3009 24.2952 24.8449 24.2952C24.482 24.2952 24.1285 24.3328 23.7826 24.3921C22.6884 23.7243 21.4071 23.3325 20.0314 23.3325C17.0646 23.3325 14.5184 25.1233 13.4077 27.6816C14.6939 26.1997 16.5939 25.258 18.7189 25.258C20.0553 25.258 21.2997 25.6358 22.3626 26.2797C22.6986 26.2224 23.042 26.1863 23.3945 26.1863C26.7516 26.1863 29.4729 28.8879 29.4729 32.2203C29.4729 32.7289 29.4026 33.2202 29.2832 33.6921C30.5763 35.5074 31.3432 37.7184 31.3432 40.111C31.3432 43.6315 29.6939 46.7654 27.1253 48.8069C30.6458 46.8274 33.028 43.0622 33.028 38.7358C33.028 36.2548 32.2385 33.9618 30.9073 32.0791Z"
        fill="#36B294"
      />
      <path
        d="M22.5188 58.8724H20.5132L20.9945 37H21.5159L22.5188 58.8724Z"
        fill="#805F59"
      />
      <path
        d="M21.1747 45.4316L16.662 41.7612L16.1206 42.0621L21.1747 46.5747V45.4316Z"
        fill="#805F59"
      />
      <path
        d="M21.4756 43.5063L25.9883 39.8359L26.5297 40.1369L21.4756 44.6495V43.5063Z"
        fill="#805F59"
      />
      <path
        d="M48.3279 26.6925C48.4755 26.1048 48.5625 25.4929 48.5625 24.8594C48.5625 20.7086 45.1977 17.3438 41.0469 17.3438C40.611 17.3438 40.1865 17.3888 39.771 17.4601C38.4567 16.6579 36.9179 16.1875 35.2656 16.1875C30.4763 16.1875 26.5937 20.07 26.5937 24.8594C26.5937 25.0743 26.6105 25.2849 26.6258 25.4959C24.4544 27.9448 23.125 31.1572 23.125 34.6875C23.125 42.3504 29.337 48.5625 37 48.5625C44.663 48.5625 50.875 42.3504 50.875 34.6875C50.875 31.7074 49.9269 28.9537 48.3279 26.6925Z"
        fill="#34BE71"
      />
      <path
        d="M48.3277 26.6925C48.4752 26.1048 48.5622 25.4929 48.5622 24.8594C48.5622 20.7086 45.1974 17.3438 41.0466 17.3438C40.6107 17.3438 40.1862 17.3888 39.7707 17.4601C38.4565 16.6579 36.9176 16.1875 35.2654 16.1875C31.7021 16.1875 28.6439 18.3383 27.3101 21.411C28.8548 19.6312 31.137 18.5 33.6891 18.5C35.294 18.5 36.7887 18.9537 38.0654 19.7271C38.469 19.6584 38.8814 19.6149 39.3047 19.6149C43.3366 19.6149 46.6051 22.8596 46.6051 26.8621C46.6051 27.4731 46.5207 28.0631 46.3772 28.6298C47.9304 30.8102 48.8513 33.4656 48.8513 36.3392C48.8513 40.5675 46.8704 44.3314 43.7855 46.7833C48.0138 44.4059 50.8747 39.8837 50.8747 34.6875C50.8747 31.7074 49.9266 28.9537 48.3277 26.6925Z"
        fill="#52C883"
      />
      <path
        d="M25.2968 27.4757C25.2922 27.4122 25.2915 27.3478 25.2872 27.2842C25.139 27.5173 25.0026 27.7578 24.8682 27.9999C25.0099 27.8243 25.1465 27.6441 25.2968 27.4757Z"
        fill="#52C883"
      />
      <path
        d="M38.2527 58.8724H35.8438L36.4219 34.4707H37.0481L38.2527 58.8724Z"
        fill="#805F59"
      />
      <path
        d="M36.6387 43.8857L31.2188 39.4775L30.5684 39.8389L36.6387 45.2588V43.8857Z"
        fill="#805F59"
      />
      <path
        d="M37 38.5459L33.3223 35.5547L32.8809 35.7998L37 39.4777V38.5459Z"
        fill="#805F59"
      />
      <path
        d="M37 41.5732L42.4199 37.165L43.0703 37.5264L37 42.9463V41.5732Z"
        fill="#805F59"
      />
      <g opacity="0.6">
        <path
          opacity="0.6"
          d="M29.854 9.56128C29.854 7.95756 31.1541 6.6575 32.7578 6.6575C32.9999 6.6575 33.2313 6.6958 33.456 6.75159C34.2136 5.9334 35.288 5.41309 36.4912 5.41309C38.7821 5.41309 40.6394 7.27031 40.6394 9.56128H29.854Z"
          fill="white"
        />
      </g>
      <path
        d="M44.7862 10.1395C44.7862 9.16764 43.9995 8.3798 43.0292 8.3798C42.8827 8.3798 42.7427 8.40307 42.6067 8.43674C42.1482 7.94086 41.4981 7.62549 40.77 7.62549C39.3836 7.62549 38.2598 8.75095 38.2598 10.1393H44.7862V10.1395Z"
        fill="white"
      />
      <path
        d="M52.0312 14.0584C52.0312 12.931 52.944 12.0169 54.0697 12.0169C54.2397 12.0169 54.4021 12.0438 54.5598 12.0831C55.0917 11.5079 55.8459 11.1421 56.6905 11.1421C58.2988 11.1421 59.6025 12.4478 59.6025 14.0584H52.0312Z"
        fill="white"
      />
    </g>
    <defs>
      <clipPath id="clip0_364_4305">
        <rect width="74" height="74" fill="white" />
      </clipPath>
    </defs>
  </svg>
);

const Collaborator = (
  <svg
    width="76"
    height="76"
    viewBox="0 0 76 76"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <g clipPath="url(#clip0_365_4865)">
      <path
        d="M66.2274 12.5608L64.0766 17.4147C52.9438 42.5422 18.3385 45.2096 3.48438 22.0875C3.94602 21.0841 4.45219 20.1029 4.99992 19.1484C11.549 7.70836 23.8752 0 38.0006 0C49.2031 0 59.2731 4.84797 66.2274 12.5608Z"
        fill="#FFF9BB"
      />
      <path
        d="M75.0617 29.5762L41.6648 32.8952C39.2274 33.1372 36.7723 33.1372 34.3349 32.8952L0.937988 29.5762C1.52729 26.9681 2.38525 24.461 3.48369 22.0875C4.36838 22.4022 5.11502 23.0627 5.86908 23.6461C6.74783 24.3259 7.80619 24.9523 8.90314 24.7727C10.7022 24.4758 11.7888 22.1454 13.6116 22.2077C15.9168 22.2879 16.9945 26.1205 19.2596 25.693C20.3299 25.4912 20.9993 24.3571 22.0384 24.0305C23.361 23.6134 24.6553 24.608 25.8443 25.3205C26.9724 25.9973 28.0338 26.1784 29.1456 25.5535C30.3939 24.8514 31.6571 24.1285 33.1504 24.317C34.0425 24.4298 34.8634 24.8588 35.7421 25.0444C36.7203 25.2507 37.4224 24.9479 37.9999 24.3957C39.3774 23.0761 40.0349 20.333 42.021 19.7051C44.4228 18.9451 46.8438 21.7535 49.2781 21.1019C50.8071 20.6937 51.6442 19.1054 52.4235 17.7279C53.2028 16.3504 54.4007 14.8779 55.9801 14.9877C57.3338 15.0827 58.3017 16.3237 58.9266 17.529C59.5515 18.7328 60.0814 20.0895 61.217 20.8317C63.8028 22.5254 65.4771 19.7733 67.8922 19.1247C68.9313 18.8456 70.101 18.8738 71.0762 19.2835C71.3523 19.7689 71.618 20.2617 71.8703 20.7605C73.2805 23.5214 74.3596 26.4768 75.0617 29.5762Z"
        fill="#50BA4A"
      />
      <path
        d="M75.0619 29.5762L41.6649 32.8952C40.4462 33.0155 39.2231 33.0763 38 33.0763V24.3957C39.3775 23.0761 40.0351 20.333 42.0212 19.7051C44.4229 18.9451 46.8439 21.7535 49.2783 21.1019C50.8072 20.6937 51.6444 19.1054 52.4237 17.7279C53.203 16.3504 54.4009 14.8779 55.9802 14.9877C57.334 15.0827 58.3018 16.3237 58.9267 17.529C59.5516 18.7328 60.0816 20.0895 61.2171 20.8317C63.8029 22.5254 65.4773 19.7733 67.8923 19.1247C68.9314 18.8456 70.1011 18.8738 71.0763 19.2835C71.3524 19.7689 71.6181 20.2617 71.8705 20.7605C73.2806 23.5214 74.3598 26.4768 75.0619 29.5762Z"
        fill="#00A23E"
      />
      <path
        d="M58.207 29.5762C45.5007 49.397 16.7231 52.5246 0.172363 34.3633C0.326738 32.7349 0.583535 31.1377 0.938301 29.5762H58.207Z"
        fill="#008839"
      />
      <path
        d="M75.9998 38.0003C75.9998 40.2135 75.8098 42.3836 75.4461 44.4929C75.265 45.5498 75.0394 46.5918 74.7707 47.616C74.3566 49.2058 73.8415 50.7555 73.2329 52.2562L56.9404 60.5628C50.5101 59.5727 44.1466 58.2917 37.9998 56.4451C37.0423 56.1571 36.0909 55.8558 35.1453 55.5396C32.843 54.7692 30.5452 53.9514 28.4033 52.795C27.8763 52.5115 27.3375 52.2681 26.7972 52.0306C25.4004 51.4175 24.0021 50.8535 22.8309 49.7714C21.9344 48.9431 21.1669 47.8832 21.0304 46.669C20.8953 45.48 21.207 44.4098 21.7651 43.4301C22.92 41.4069 25.1287 39.7711 26.6413 38.2704C29.7763 35.1592 32.9128 32.0464 36.0493 28.9352C36.6698 28.3206 37.3169 27.6928 37.9998 27.1138C39.6148 25.7438 41.4198 24.6468 43.489 24.6394C45.2405 24.6335 46.8808 25.4261 48.5774 25.8566C50.4077 26.3212 53.2488 24.6394 56.2769 22.1694C58.0047 24.3039 61.4084 23.6879 62.2797 21.0843L64.5374 14.3289C65.1327 13.7114 65.6982 13.1162 66.2266 12.561C68.042 14.5738 69.6452 16.7811 71.0004 19.1487C72.8395 22.3594 74.2215 25.8655 75.0616 29.5764C75.1017 29.7546 75.1418 29.9327 75.1789 30.1123C75.6925 32.5407 75.9731 35.0523 75.9983 37.6262C75.9998 37.7509 75.9998 37.8756 75.9998 38.0003Z"
        fill="#7E7F92"
      />
      <path
        d="M76 38.0003C76 40.2135 75.81 42.3836 75.4463 44.4929C75.2652 45.5498 75.0396 46.5918 74.7709 47.616C74.3568 49.2058 73.8417 50.7555 73.2331 52.2562L56.9406 60.5628C50.5103 59.5727 44.1468 58.2917 38 56.4451V27.1138C39.615 25.7438 41.42 24.6468 43.4892 24.6394C45.2408 24.6335 46.881 25.4261 48.5777 25.8566C50.4079 26.3212 53.249 24.6394 56.2771 22.1694C58.0049 24.3039 61.4086 23.6879 62.2799 21.0843L64.5377 14.3289C65.1329 13.7114 65.6984 13.1162 66.2269 12.561C68.0423 14.5738 69.6454 16.7811 71.0006 19.1487C72.8398 22.3594 74.2217 25.8655 75.0619 29.5764C75.102 29.7546 75.142 29.9327 75.1791 30.1123C75.6927 32.5407 75.9733 35.0523 75.9985 37.6262C76 37.7509 76 37.8756 76 38.0003Z"
        fill="#6E6F83"
      />
      <path
        d="M75.9995 38.0003C75.9995 40.2135 75.8095 42.3836 75.4458 44.4929C75.2647 45.5498 75.0391 46.5918 74.7704 47.616C74.3563 49.2058 73.8412 50.7555 73.2326 52.2562L56.9401 60.5628C50.5098 59.5727 44.1463 58.2917 37.9995 56.4451C37.042 56.1571 36.0906 55.8558 35.145 55.5396C34.7487 55.406 34.3523 55.2725 33.9575 55.1344C32.056 54.4768 30.1768 53.7525 28.403 52.795C27.876 52.5115 27.3372 52.2681 26.7969 52.0306C27.2481 49.7773 28.213 47.671 29.4242 45.7012C30.2629 44.3371 31.2188 43.0382 32.2015 41.8032C33.9159 39.6479 35.7269 37.6618 37.9995 36.4951C39.4423 35.7529 41.0706 35.3418 42.9795 35.4264C45.1245 35.5214 47.2085 36.3556 49.3549 36.2665C51.8294 36.1656 54.0842 34.8519 56.0999 33.4121C61.0414 29.8822 65.2363 25.3875 70.1926 21.8785C70.7374 21.4925 71.297 21.1185 71.8699 20.7607C73.2801 23.5217 74.3592 26.4771 75.0613 29.5764C75.1014 29.7546 75.1415 29.9327 75.1786 30.1123C75.6922 32.5407 75.9728 35.0523 75.998 37.6262C75.9995 37.7509 75.9995 37.8756 75.9995 38.0003Z"
        fill="#6E6F83"
      />
      <path
        d="M76 38.0003C76 40.2135 75.81 42.3836 75.4463 44.4929C75.2652 45.5498 75.0396 46.5918 74.7709 47.616C74.3568 49.2058 73.8417 50.7555 73.2331 52.2562L56.9406 60.5628C50.5103 59.5727 44.1468 58.2917 38 56.4451V36.4951C39.4428 35.7529 41.0712 35.3418 42.9801 35.4264C45.125 35.5214 47.2091 36.3556 49.3555 36.2665C51.8299 36.1656 54.0847 34.8519 56.1005 33.4121C61.042 29.8822 65.2368 25.3875 70.1931 21.8785C70.7379 21.4925 71.2975 21.1185 71.8705 20.7607C73.2806 23.5217 74.3598 26.4771 75.0619 29.5764C75.102 29.7546 75.142 29.9327 75.1791 30.1123C75.6927 32.5407 75.9733 35.0523 75.9985 37.6262C76 37.7509 76 37.8756 76 38.0003Z"
        fill="#605F74"
      />
      <path
        d="M76 38.0004C76 40.2136 75.81 42.3838 75.4463 44.4931C75.2652 45.5499 75.0396 46.592 74.7709 47.6162C74.3568 49.206 73.8417 50.7557 73.2331 52.2564L56.9406 60.5629C49.5098 59.4199 42.1696 57.8866 35.1455 55.5398C34.7492 55.4062 34.3529 55.2726 33.958 55.1346C35.8595 52.1762 37.8337 49.2446 40.3705 46.8191C43.1819 44.1294 46.7949 42.0824 50.681 41.9028C52.7606 41.8064 54.8343 42.2428 56.9154 42.1878C63.2462 42.0231 68.495 37.4942 73.2479 33.3098C73.959 32.6834 74.6878 32.054 75.4344 31.438C75.7862 33.4508 75.9777 35.5185 75.9985 37.6263C76 37.751 76 37.8757 76 38.0004Z"
        fill="#58586B"
      />
      <path
        d="M73.2331 52.2559C71.8037 55.7887 69.8577 59.0573 67.4886 61.9682C67.0314 62.5308 66.5594 63.0785 66.071 63.6129C65.6168 64.1101 65.1492 64.5955 64.6698 65.0676C48.358 71.7547 29.6608 68.5321 16.5285 56.7714L0.227109 42.174C0.172187 41.6797 0.127656 41.181 0.0935156 40.6807C0.0311719 39.7961 0 38.901 0 38C0 36.7724 0.0578906 35.5596 0.172187 34.3632C3.24336 34.479 6.30562 34.7551 9.31594 35.3845C15.0575 36.5853 19.8327 40.5961 25.5223 41.9024C28.359 42.554 31.9942 41.6159 34.9348 41.7079C35.9575 41.7391 36.9817 41.8044 38 41.9143C40.3052 42.1607 42.5837 42.6342 44.7613 43.4506C46.4787 44.0933 48.1041 44.9379 49.7117 45.8226L56.2771 22.1691C57.187 21.4254 58.1148 20.6105 59.038 19.7614C59.4507 19.3829 59.8619 18.997 60.2686 18.6051C61.7663 17.1742 63.2225 15.6942 64.5377 14.3286C64.9236 21.3052 66.1141 42.8821 66.5935 51.8952C68.7874 52.1594 70.9991 52.2633 73.2331 52.2559Z"
        fill="#C5F2F9"
      />
      <path
        d="M73.2331 52.2559C71.8037 55.7887 69.8577 59.0573 67.4886 61.9682C67.0314 62.5308 66.5594 63.0785 66.071 63.6129C65.6168 64.1101 65.1492 64.5955 64.6698 65.0676C56.0545 68.5989 46.7741 69.3663 38 67.5717V41.9143C40.3052 42.1607 42.5837 42.6342 44.7613 43.4506C46.4787 44.0933 48.1041 44.9379 49.7117 45.8226L56.2771 22.1691C57.187 21.4254 58.1148 20.6105 59.038 19.7614C59.4507 19.3829 59.8619 18.997 60.2686 18.6051C61.7663 17.1742 63.2225 15.6942 64.5377 14.3286C64.9236 21.3052 66.1141 42.8821 66.5935 51.8952C68.7874 52.1594 70.9991 52.2633 73.2331 52.2559Z"
        fill="#92EAFF"
      />
      <path
        d="M68.2741 60.9661C68.0203 61.3046 67.7575 61.6385 67.4889 61.9681C67.0317 62.5306 66.5596 63.0784 66.0713 63.6128C65.6171 64.11 65.1495 64.5954 64.67 65.0674C48.3582 71.7546 29.6611 68.532 16.5288 56.7713L0.227383 42.1739C0.172461 41.6796 0.12793 41.1809 0.0937891 40.6806C0.0566797 40.1552 0.0299609 39.6252 0.0166016 39.0924C0.340195 39.0745 0.665273 39.0656 0.990352 39.0627C3.08332 39.0463 5.1659 39.3343 7.20988 39.7648C9.05199 40.1537 11.1138 40.5263 12.8416 41.2358C16.3551 42.6816 19.3951 45.0744 22.8641 46.6211C25.4039 47.7537 28.1203 48.4885 30.8857 48.7868C33.2607 49.0421 35.6342 48.8061 38.0003 48.9263C38.4233 48.9456 38.8449 48.9783 39.2679 49.0273C46.335 49.8437 51.6402 55.8465 58.1536 58.3002C61.4222 59.5307 64.82 60.4258 68.2741 60.9661Z"
        fill="#92EAFF"
      />
      <path
        d="M68.2738 60.9665C68.02 61.305 67.7573 61.6389 67.4886 61.9685C67.0314 62.5311 66.5594 63.0788 66.071 63.6132C65.6168 64.1104 65.1507 64.5943 64.6712 65.0664L64.6698 65.0678C56.0545 68.5992 46.7741 69.3666 38 67.572V48.9268C38.423 48.9461 38.8446 48.9787 39.2677 49.0277C46.3348 49.8441 51.6399 55.8469 58.1534 58.3006C59.421 58.7771 60.708 59.2046 62.0098 59.5786C62.4076 59.6944 62.8069 59.8043 63.2077 59.9096C63.6159 60.0165 64.0255 60.1175 64.4367 60.2139H64.4382C65.7073 60.5138 66.9869 60.7646 68.2738 60.9665Z"
        fill="#63DBFA"
      />
      <path
        d="M64.7019 65.0333C62.318 67.3905 59.6238 69.4315 56.6877 71.0925H56.6862L53.903 71.8228C43.8627 74.4606 33.1693 72.3364 24.8984 66.0649L1.39625 48.242C1.33836 48.0342 1.28195 47.8249 1.22703 47.6156C0.959844 46.5914 0.734219 45.5494 0.553125 44.4925C0.421016 43.7281 0.311172 42.9547 0.226562 42.1739C4.75539 41.6752 9.48758 43.547 13.5637 45.8314C18.4651 48.579 23.1854 52.0168 28.7191 52.9891C31.768 53.5264 34.9253 53.28 37.9994 53.5383C39.1825 53.6363 40.3537 53.8114 41.5011 54.1335C46.306 55.4843 50.0199 59.2249 54.4003 61.6177C57.6006 63.3663 61.1023 64.3683 64.7019 65.0333Z"
        fill="#B6E337"
      />
      <path
        d="M64.7024 65.0336C62.3185 67.3908 59.6244 69.4318 56.6883 71.0928L56.6868 71.0943V71.0928L53.9036 71.8231C48.6341 73.2081 43.1849 73.2808 38 72.1304V53.5386C39.183 53.6365 40.3542 53.8117 41.5016 54.1338C46.3066 55.4846 50.0205 59.2252 54.4009 61.618C57.6012 63.3666 61.1028 64.3686 64.7024 65.0336Z"
        fill="#6CDC2D"
      />
      <path
        d="M56.6885 71.0927C51.2022 74.1995 44.8669 75.9792 38.1175 76H38.0002C26.8822 76 16.879 71.2248 9.92916 63.6129C7.78275 61.2616 5.92729 58.6402 4.42213 55.8036C3.15596 53.4227 2.13768 50.8918 1.39697 48.2422C3.7126 48.5806 5.95401 49.1922 8.01135 50.4524C13.1028 53.5726 17.8156 59.1672 23.5483 60.8416C28.2181 62.2057 33.1997 61.9786 38.0002 62.7356C38.8047 62.8603 39.6048 63.0147 40.396 63.2077C46.2785 64.646 51.3655 68.161 56.6885 71.0927Z"
        fill="#6CDC2D"
      />
      <path
        d="M56.6868 71.0924C51.2005 74.1992 44.8667 75.979 38.1173 75.9997H38V62.7354C38.8045 62.86 39.6046 63.0144 40.3958 63.2074C46.2784 64.6457 51.3638 68.1607 56.6868 71.0924Z"
        fill="#5DBF1D"
      />
      <path
        d="M66.5936 51.8952V51.8967C64.0523 51.5909 61.5348 51.0684 59.0381 50.249L60.2686 18.6051C61.7664 17.1742 63.2226 15.6942 64.5377 14.3286C64.9236 21.3052 66.1141 42.882 66.5936 51.8952Z"
        fill="#63DBFA"
      />
      <path
        d="M46.9098 49.7607C46.9098 49.753 46.9092 49.7454 46.9092 49.7377C46.9092 48.3229 48.056 47.1761 49.4708 47.1761C49.8068 47.1761 50.1275 47.2416 50.4217 47.3591C50.9897 46.3414 52.0766 45.6528 53.3248 45.6528C54.9457 45.6528 56.2949 46.8136 56.5882 48.3492C56.6756 48.3367 56.7648 48.3299 56.8558 48.3299C57.7371 48.3299 58.4756 48.94 58.6729 49.7607H46.9098Z"
        fill="white"
      />
      <path
        d="M49.409 49.7605C49.409 49.7561 49.4087 49.7518 49.4087 49.7473C49.4087 48.9337 50.0682 48.2744 50.8816 48.2744C51.0749 48.2744 51.2593 48.3119 51.4283 48.3796C51.755 47.7945 52.38 47.3984 53.0977 47.3984C54.0297 47.3984 54.8056 48.066 54.9742 48.9489C55.0245 48.9417 55.0758 48.9377 55.128 48.9377C55.6348 48.9377 56.0595 49.2885 56.1729 49.7605H49.409Z"
        fill="#DFF7FD"
      />
      <path
        d="M51.0769 42.2357C51.0769 42.597 50.784 42.8899 50.4227 42.8899C50.0614 42.8899 49.7686 42.597 49.7686 42.2357C49.7686 41.8744 50.0614 41.5815 50.4227 41.5815C50.7839 41.5814 51.0769 41.8743 51.0769 42.2357Z"
        fill="white"
      />
      <path
        d="M48.1664 45.8367C48.3599 45.8367 48.5168 45.6798 48.5168 45.4862C48.5168 45.2926 48.3599 45.1357 48.1664 45.1357C47.9728 45.1357 47.8159 45.2926 47.8159 45.4862C47.8159 45.6798 47.9728 45.8367 48.1664 45.8367Z"
        fill="white"
      />
      <path
        d="M46.5502 42.7497C46.7437 42.7497 46.9006 42.5928 46.9006 42.3993C46.9006 42.2057 46.7437 42.0488 46.5502 42.0488C46.3566 42.0488 46.1997 42.2057 46.1997 42.3993C46.1997 42.5928 46.3566 42.7497 46.5502 42.7497Z"
        fill="white"
      />
      <path
        d="M69.3967 53.0244C69.3967 53.0166 69.3973 53.0091 69.3973 53.0012C69.3973 51.5864 68.2505 50.4396 66.8357 50.4396C66.4997 50.4396 66.179 50.5051 65.8848 50.6226C65.3168 49.605 64.2299 48.9165 62.9817 48.9165C61.3608 48.9165 60.0116 50.0773 59.7183 51.6129C59.6309 51.6004 59.5417 51.5936 59.4508 51.5936C58.5695 51.5936 57.8311 52.2036 57.6338 53.0244H69.3967Z"
        fill="white"
      />
      <path
        d="M66.8973 53.0244C66.8973 53.0199 66.8976 53.0154 66.8976 53.011C66.8976 52.1976 66.2381 51.538 65.4247 51.538C65.2314 51.538 65.0471 51.5756 64.878 51.6433C64.5513 51.0581 63.9263 50.6621 63.2085 50.6621C62.2765 50.6621 61.5006 51.3296 61.3319 52.2125C61.2816 52.2054 61.2304 52.2014 61.1782 52.2014C60.6714 52.2014 60.2469 52.5522 60.1333 53.0242H66.8973V53.0244Z"
        fill="#DFF7FD"
      />
      <path
        d="M65.8837 46.1535C66.2449 46.1535 66.5378 45.8606 66.5378 45.4994C66.5378 45.1381 66.2449 44.8452 65.8837 44.8452C65.5224 44.8452 65.2295 45.1381 65.2295 45.4994C65.2295 45.8606 65.5224 46.1535 65.8837 46.1535Z"
        fill="white"
      />
      <path
        d="M68.1405 49.1003C68.334 49.1003 68.491 48.9434 68.491 48.7499C68.491 48.5563 68.334 48.3994 68.1405 48.3994C67.9469 48.3994 67.79 48.5563 67.79 48.7499C67.79 48.9434 67.9469 49.1003 68.1405 49.1003Z"
        fill="white"
      />
      <path
        d="M69.7567 46.0134C69.9503 46.0134 70.1072 45.8565 70.1072 45.663C70.1072 45.4694 69.9503 45.3125 69.7567 45.3125C69.5632 45.3125 69.4062 45.4694 69.4062 45.663C69.4062 45.8565 69.5632 46.0134 69.7567 46.0134Z"
        fill="white"
      />
      <path
        d="M10.6358 46.3194H7.97314L8.11564 41.8577L8.29095 36.3765H10.3179L10.4933 41.8577L10.6358 46.3194Z"
        fill="#EC771B"
      />
      <path
        d="M10.6359 46.3194H9.35547V36.3765H10.3179L10.4934 41.8577L10.6359 46.3194Z"
        fill="#C55732"
      />
      <path
        d="M9.35499 36.3765V41.8577H8.11523L8.29054 36.3765H9.35499Z"
        fill="#C55732"
      />
      <path
        d="M10.4934 41.8577H9.35547V36.3765H10.3179L10.4934 41.8577Z"
        fill="#A44E3E"
      />
      <path
        d="M13.4907 38.1208C12.3455 39.2482 10.8505 39.8118 9.3554 39.8118C7.86063 39.8118 6.36542 39.2482 5.22008 38.1208C3.39311 36.3228 3.0278 33.6307 4.12386 31.475C5.2701 29.2205 6.4674 26.9923 7.44159 24.6583L9.3554 20.0728L11.2659 24.6491C12.2418 26.9865 13.4405 29.2184 14.588 31.4768C15.6831 33.6321 15.3174 36.3232 13.4907 38.1208Z"
        fill="#43AF3E"
      />
      <path
        d="M13.4906 38.1207C12.3454 39.2481 10.8503 39.8117 9.35528 39.8117C8.64605 39.8117 7.93681 39.2481 7.39324 38.1207C6.51463 36.2982 6.34838 33.5571 6.89478 31.3871C7.65463 28.3692 8.3278 25.2609 8.95168 22.1117L9.35528 20.0728L11.2658 24.6491C12.2416 26.9865 13.4404 29.2184 14.5879 31.4768C15.683 33.6319 15.3173 36.3231 13.4906 38.1207Z"
        fill="#00A23E"
      />
      <path
        d="M13.4908 38.1208C12.3456 39.2482 10.8505 39.8118 9.35547 39.8118V20.0728L11.266 24.6491C12.2418 26.9865 13.4406 29.2184 14.588 31.4768C15.6832 33.6321 15.3175 36.3232 13.4908 38.1208Z"
        fill="#008839"
      />
      <path
        d="M25.7301 53.979H23.0522L23.1955 49.4919L23.3718 43.9795H25.4103L25.5867 49.4919L25.7301 53.979Z"
        fill="#EC771B"
      />
      <path
        d="M25.7301 53.979H24.4424V43.9795H25.4103L25.5867 49.4919L25.7301 53.979Z"
        fill="#C55732"
      />
      <path
        d="M24.4422 43.9795V49.4919H23.1953L23.3717 43.9795H24.4422Z"
        fill="#C55732"
      />
      <path
        d="M25.5867 49.4919H24.4424V43.9795H25.4103L25.5867 49.4919Z"
        fill="#A44E3E"
      />
      <path
        d="M28.6012 45.7336C27.4495 46.8674 25.9459 47.4343 24.4424 47.4343C22.939 47.4343 21.4355 46.8674 20.2835 45.7336C18.4463 43.9254 18.0787 41.218 19.181 39.0501C20.3338 36.7829 21.5379 34.5419 22.5176 32.1947L24.4424 27.583L26.3638 32.1853C27.3453 34.5361 28.5509 36.7806 29.7047 39.0517C30.8061 41.2195 30.4382 43.926 28.6012 45.7336Z"
        fill="#43AF3E"
      />
      <path
        d="M28.6006 45.7336C27.4489 46.8674 25.9454 47.4343 24.4418 47.4343C23.7286 47.4343 23.0152 46.8674 22.4687 45.7336C21.585 43.9007 21.4179 41.1441 21.9674 38.9618C22.7316 35.9268 23.4086 32.8009 24.036 29.6335L24.4418 27.583L26.3632 32.1853C27.3447 34.5361 28.5503 36.7806 29.7041 39.0517C30.8055 41.2195 30.4377 43.926 28.6006 45.7336Z"
        fill="#00A23E"
      />
      <path
        d="M28.6012 45.7336C27.4494 46.8674 25.9459 47.4343 24.4424 47.4343V27.583L26.3638 32.1853C27.3452 34.5361 28.5508 36.7806 29.7046 39.0517C30.806 41.2195 30.4382 43.926 28.6012 45.7336Z"
        fill="#008839"
      />
      <path
        d="M43.8487 59.1596H41.1709L41.3143 54.6725L41.4906 49.1602H43.529L43.7055 54.6725L43.8487 59.1596Z"
        fill="#EC771B"
      />
      <path
        d="M43.8487 59.1596H42.561V49.1602H43.529L43.7055 54.6725L43.8487 59.1596Z"
        fill="#C55732"
      />
      <path
        d="M42.5607 49.1602V54.6725H41.314L41.4903 49.1602H42.5607Z"
        fill="#C55732"
      />
      <path
        d="M43.7055 54.6725H42.561V49.1602H43.529L43.7055 54.6725Z"
        fill="#A44E3E"
      />
      <path
        d="M46.7197 50.9143C45.568 52.0481 44.0645 52.615 42.561 52.615C41.0576 52.615 39.5541 52.0481 38.4022 50.9143C36.5648 49.1061 36.1974 46.3987 37.2997 44.2308C38.4526 41.9635 39.6566 39.7226 40.6363 37.3753L42.5611 32.7637L44.4825 37.366C45.4639 39.7168 46.6696 41.9613 47.8234 44.2324C48.9245 46.4002 48.5568 49.1065 46.7197 50.9143Z"
        fill="#43AF3E"
      />
      <path
        d="M46.7198 50.9143C45.568 52.0481 44.0645 52.615 42.561 52.615C41.8477 52.615 41.1345 52.0481 40.5878 50.9143C39.7042 49.0814 39.537 46.3248 40.0865 44.1424C40.8507 41.1075 41.5277 37.9815 42.155 34.8142L42.5608 32.7637L44.4822 37.366C45.4637 39.7168 46.6693 41.9613 47.8231 44.2324C48.9245 46.4002 48.5568 49.1065 46.7198 50.9143Z"
        fill="#00A23E"
      />
      <path
        d="M46.7193 50.9143C45.5676 52.0481 44.0641 52.615 42.5605 52.615V32.7637L44.4819 37.366C45.4634 39.7168 46.669 41.9613 47.8228 44.2324C48.9241 46.4002 48.5564 49.1065 46.7193 50.9143Z"
        fill="#008839"
      />
      <path
        d="M64.3848 65.3468C63.5758 66.1275 62.7327 66.8727 61.8569 67.5793L61.9608 64.3225L62.1375 58.8096H64.1755L64.3522 64.3225L64.3848 65.3468Z"
        fill="#EC771B"
      />
      <path
        d="M64.3851 65.3468C64.0007 65.7179 63.6073 66.0815 63.208 66.4363V58.8096H64.1758L64.3525 64.3225L64.3851 65.3468Z"
        fill="#C55732"
      />
      <path
        d="M63.2086 58.8101V64.3224H61.9619L62.1383 58.8101H63.2086Z"
        fill="#C55732"
      />
      <path
        d="M64.3529 64.3224H63.2085V58.8101H64.1766L64.3529 64.3224Z"
        fill="#A44E3E"
      />
      <path
        d="M67.3672 60.5647C66.2155 61.6985 64.7119 62.2653 63.2084 62.2653C61.705 62.2653 60.2015 61.6985 59.0496 60.5647C57.2123 58.7564 56.8449 56.0491 57.9472 53.8811C59.1 51.6139 60.3041 49.373 61.2838 47.0257L63.2086 42.4141L65.1299 47.0164C66.1114 49.3672 67.317 51.6117 68.4708 53.8828C69.5719 56.0504 69.2043 58.7569 67.3672 60.5647Z"
        fill="#43AF3E"
      />
      <path
        d="M67.3672 60.5647C66.2155 61.6985 64.712 62.2653 63.2085 62.2653C62.4952 62.2653 61.782 61.6985 61.2353 60.5647C60.3516 58.7318 60.1845 55.9752 60.734 53.7928C61.4982 50.7579 62.1752 47.6319 62.8025 44.4646L63.2083 42.4141L65.1297 47.0164C66.1112 49.3672 67.3168 51.6117 68.4706 53.8828C69.572 56.0504 69.2043 58.7569 67.3672 60.5647Z"
        fill="#00A23E"
      />
      <path
        d="M67.3668 60.5647C66.2151 61.6985 64.7115 62.2653 63.208 62.2653V42.4141L65.1294 47.0164C66.1109 49.3672 67.3165 51.6117 68.4703 53.8828C69.5715 56.0504 69.2039 58.7569 67.3668 60.5647Z"
        fill="#008839"
      />
      <path
        d="M11.7265 20.3299C11.7265 20.3183 11.7256 20.307 11.7256 20.2954C11.7256 18.187 13.4347 16.4779 15.5431 16.4779C16.0439 16.4779 16.5219 16.5754 16.9601 16.7507C17.8066 15.2342 19.4264 14.208 21.2866 14.208C23.7023 14.208 25.713 15.938 26.1499 18.2264C26.2802 18.2077 26.4132 18.1976 26.5486 18.1976C27.8619 18.1976 28.9625 19.1067 29.2565 20.3299H11.7265Z"
        fill="#FFEB98"
      />
      <path
        d="M15.4511 20.3298C15.4511 20.3231 15.4507 20.3166 15.4507 20.31C15.4507 19.0977 16.4335 18.1148 17.6458 18.1148C17.9337 18.1148 18.2087 18.1707 18.4606 18.2717C18.9473 17.3996 19.8787 16.8096 20.9484 16.8096C22.3374 16.8096 23.4936 17.8044 23.7449 19.1203C23.8199 19.1096 23.8963 19.1037 23.9741 19.1037C24.7294 19.1037 25.3622 19.6265 25.5312 20.3298H15.4511Z"
        fill="#F9E073"
      />
      <path
        d="M31.8902 10.3901C31.8902 10.3818 31.8896 10.3736 31.8896 10.3653C31.8896 8.84707 33.1203 7.61638 34.6386 7.61638C34.9993 7.61638 35.3433 7.68659 35.6589 7.81291C36.2686 6.72086 37.4348 5.98193 38.7743 5.98193C40.5139 5.98193 41.9616 7.22762 42.2763 8.87543C42.3701 8.86192 42.4658 8.85464 42.5634 8.85464C43.509 8.85464 44.3016 9.50925 44.5132 10.3901H31.8902Z"
        fill="#FFEB98"
      />
      <path
        d="M34.5721 10.3903C34.5721 10.3856 34.5718 10.3808 34.5718 10.3761C34.5718 9.50312 35.2795 8.79537 36.1525 8.79537C36.3599 8.79537 36.5577 8.83575 36.7393 8.90833C37.0897 8.28045 37.7605 7.85547 38.5308 7.85547C39.5309 7.85547 40.3635 8.57183 40.5445 9.5193C40.5983 9.51158 40.6534 9.50728 40.7095 9.50728C41.2534 9.50728 41.709 9.88372 41.8308 10.3902H34.5721V10.3903Z"
        fill="#F9E073"
      />
      <path
        d="M7.76401 56.1999C8.53437 56.1999 9.15887 55.5754 9.15887 54.805C9.15887 54.0347 8.53437 53.4102 7.76401 53.4102C6.99364 53.4102 6.36914 54.0347 6.36914 54.805C6.36914 55.5754 6.99364 56.1999 7.76401 56.1999Z"
        fill="#5DBF1D"
      />
      <path
        d="M19.6534 64.0258C20.3653 63.7308 20.7032 62.9145 20.4081 62.2027C20.1131 61.4909 19.2968 61.1531 18.5849 61.4481C17.873 61.7432 17.5351 62.5595 17.8301 63.2713C18.1252 63.9831 18.9415 64.3209 19.6534 64.0258Z"
        fill="#5DBF1D"
      />
      <path
        d="M34.44 72.806C34.9846 72.2613 34.9846 71.3783 34.44 70.8337C33.8953 70.289 33.0123 70.289 32.4676 70.8337C31.923 71.3783 31.923 72.2613 32.4676 72.806C33.0123 73.3506 33.8953 73.3506 34.44 72.806Z"
        fill="#5DBF1D"
      />
      <path
        d="M51.9619 72.4482C52.6738 72.1531 53.0117 71.3369 52.7167 70.6251C52.4216 69.9132 51.6054 69.5754 50.8935 69.8705C50.1816 70.1656 49.8437 70.9818 50.1387 71.6936C50.4338 72.4055 51.2501 72.7433 51.9619 72.4482Z"
        fill="#00A23E"
      />
      <path
        d="M13.5958 62.1211C13.5958 62.6734 13.1481 63.1211 12.5957 63.1211C12.0434 63.1211 11.5957 62.6734 11.5957 62.1211C11.5957 61.5688 12.0434 61.1211 12.5957 61.1211C13.1479 61.1211 13.5958 61.5688 13.5958 62.1211Z"
        fill="#5DBF1D"
      />
      <path
        d="M24.4419 69.4287C24.4419 69.9811 23.9943 70.4287 23.4419 70.4287C22.8896 70.4287 22.4419 69.9811 22.4419 69.4287C22.4419 68.8764 22.8896 68.4287 23.4419 68.4287C23.9943 68.4287 24.4419 68.8764 24.4419 69.4287Z"
        fill="#5DBF1D"
      />
      <path
        d="M31.043 65.7691C31.043 66.3214 30.5953 66.7691 30.043 66.7691C29.4907 66.7691 29.043 66.3214 29.043 65.7691C29.043 65.2167 29.4907 64.769 30.043 64.769C30.5952 64.769 31.043 65.2169 31.043 65.7691Z"
        fill="#5DBF1D"
      />
      <path
        d="M41.5621 67.312C41.5621 67.8644 41.1144 68.3121 40.562 68.3121C40.0097 68.3121 39.562 67.8644 39.562 67.312C39.562 66.7597 40.0097 66.312 40.562 66.312C41.1142 66.312 41.5621 66.7597 41.5621 67.312Z"
        fill="#00A23E"
      />
      <path
        d="M42.5616 73.6407C42.5616 74.193 42.1139 74.6407 41.5615 74.6407C41.0092 74.6407 40.5615 74.193 40.5615 73.6407C40.5615 73.0883 41.0092 72.6406 41.5615 72.6406C42.1139 72.6406 42.5616 73.0883 42.5616 73.6407Z"
        fill="#00A23E"
      />
      <path
        d="M46.9092 70.4292C46.9092 70.9815 46.4615 71.4292 45.9092 71.4292C45.3569 71.4292 44.9092 70.9815 44.9092 70.4292C44.9092 69.8769 45.3569 69.4292 45.9092 69.4292C46.4614 69.4291 46.9092 69.8769 46.9092 70.4292Z"
        fill="#00A23E"
      />
    </g>
    <defs>
      <clipPath id="clip0_365_4865">
        <rect width="76" height="76" fill="white" />
      </clipPath>
    </defs>
  </svg>
);

const Ambassador = (
  <svg
    width="76"
    height="76"
    viewBox="0 0 76 76"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M76 38C76 58.9861 58.9861 76 38 76C31.6231 76 25.6144 74.4295 20.3374 71.6523C13.8878 68.2605 21.3895 61.9934 17.7974 55.6699C16.7153 53.7669 2.93461 52.8348 2.19094 50.7448V50.7434C0.771875 46.7593 0 42.4709 0 38C0 17.0139 17.0139 0 38 0C58.9861 0 76 17.0139 76 38Z"
      fill="#8964A8"
    />
    <path
      d="M38.71 57.3068L62.9517 37.8964C64.7987 36.446 67.4479 36.6446 69.055 38.3565C70.6633 40.0682 70.6984 42.7244 69.1356 44.4766L53.4657 62.052"
      fill="#F7AE75"
    />
    <path
      d="M60.4303 29.5169C60.4303 37.2713 64.148 44.3254 59.2595 49.5931C53.8681 55.3998 46.1694 59.0339 37.6206 59.0339C27.3991 59.0339 18.3918 53.8384 13.0948 45.9453C9.94142 41.2499 12.0479 35.5987 12.0479 29.5171C12.0479 20.3236 12.3071 12.1122 18.8959 6.69869C23.99 2.51305 30.5122 0 37.6206 0C46.6056 0 54.6517 4.01464 60.0667 10.3465C64.4759 15.5044 60.4303 22.1988 60.4303 29.5169Z"
      fill="#60B7FF"
    />
    <path
      d="M43.3967 58.4689C41.5288 58.839 39.5976 59.0339 37.6201 59.0339C27.3987 59.0339 18.3915 53.8384 13.0945 45.945C9.94109 41.2499 12.0911 35.599 12.0911 29.5169C12.0911 20.3241 12.307 12.1124 18.8953 6.69898C23.9892 2.51364 30.5119 0 37.6201 0C39.5964 0 41.5288 0.193711 43.3967 0.564953C38.5461 1.52653 34.1243 3.67695 30.4461 6.69898C23.8567 12.1124 19.654 20.3241 19.654 29.5169C19.654 35.599 21.4919 41.2499 24.6453 45.945C28.9184 52.3119 35.6046 56.924 43.3967 58.4689Z"
      fill="#26A6FE"
    />
    <path
      d="M31.8275 14.5488H25.0082C26.0918 14.5488 27.0725 14.9878 27.7823 15.6978C28.4936 16.4076 28.9326 17.3898 28.9326 18.4732C28.9326 20.6403 27.1752 22.3976 25.0082 22.3976H14.8006C15.8842 22.3976 16.8649 22.8366 17.5747 23.5465C18.286 24.2578 18.725 25.2386 18.725 26.322C18.725 28.4891 16.9676 30.2464 14.8006 30.2464H22.2382C24.4052 30.2464 26.1626 32.0038 26.1626 34.1708C26.1626 36.3393 24.4052 38.0952 22.2382 38.0952H28.7019C29.7855 38.0952 30.7662 38.5341 31.4774 39.2454C32.1872 39.9553 32.6263 40.936 32.6263 42.0209C32.6263 44.188 30.8689 45.9453 28.7019 45.9453H13.0947C9.94132 41.2499 8.10352 35.5988 8.10352 29.5171C8.10352 20.3237 12.3071 12.1122 18.896 6.69873H31.8277C33.9947 6.69873 35.7521 8.45608 35.7521 10.6231C35.7519 12.7916 33.9947 14.5488 31.8275 14.5488Z"
      fill="#6FD7A3"
    />
    <path
      d="M67.1374 29.5171C67.1374 37.2715 64.1479 44.3255 59.2595 49.5933H42.4644C41.3808 49.5933 40.4001 49.1543 39.6903 48.443C38.979 47.7332 38.54 46.7525 38.54 45.6689C38.54 43.5003 40.2974 41.7431 42.4644 41.7431H56.0754C53.9069 41.7431 52.1497 39.9858 52.1497 37.8187C52.1497 36.7352 52.5886 35.7544 53.2999 35.0433C54.0097 34.3334 54.9905 33.8944 56.0754 33.8944H48.2961C47.2125 33.8944 46.2318 33.4554 45.5219 32.7454C44.8106 32.0341 44.3717 31.0534 44.3717 29.97C44.3717 27.8029 46.1291 26.0456 48.2961 26.0456H54.7571C53.6735 26.0456 52.6915 25.6066 51.9816 24.8967C51.2703 24.1854 50.8314 23.2046 50.8314 22.1212C50.8314 19.9527 52.5888 18.1955 54.7571 18.1955H47.9378C45.7707 18.1955 44.0134 16.4381 44.0134 14.2711C44.0134 12.104 45.7707 10.3467 47.9378 10.3467H60.0666C64.4758 15.5046 67.1374 22.199 67.1374 29.5171Z"
      fill="#6FD7A3"
    />
    <path
      d="M20.519 22.3969H14.8001C15.884 22.3969 16.8652 22.8361 17.5743 23.5464C18.2857 24.2579 18.725 25.2378 18.725 26.3217C18.725 28.4882 16.9678 30.2466 14.8001 30.2466H19.6635C19.8042 36.0508 21.619 41.4377 24.6457 45.9447H13.0949C9.94147 41.2496 8.10352 35.5988 8.10352 29.5167C8.10352 20.3238 12.3074 12.1121 18.8957 6.69873H30.4465C25.6165 10.6662 22.0687 16.1383 20.519 22.3969Z"
      fill="#3EC3A4"
    />
    <path
      d="M71.1089 51.3L65.6702 55.3494L51.0432 66.2402C48.7943 67.9131 46.0646 68.8156 43.2606 68.8171H23.1726L20.3374 71.6523C11.9462 67.2407 5.40607 59.7802 2.19092 50.7448C6.25217 47.31 11.4148 45.407 16.7734 45.407H20.1236L20.1222 50.3752L28.0918 51.4559L44.8637 53.7314L66.0814 43.1285C67.3579 42.4932 68.7904 42.4739 70.0254 42.9682C70.9561 43.3393 71.7739 44.0013 72.3336 44.9127C72.5696 45.2942 72.7432 45.6965 72.862 46.1077C73.4053 47.9913 72.7522 50.0784 71.1089 51.3Z"
      fill="#FFCE9A"
    />
    <path
      d="M72.8622 46.1079C71.2815 45.2773 69.335 45.2826 67.7187 46.2439L47.4694 58.2978L25.9697 55.283L28.0906 51.4561L44.864 53.7301L66.0812 43.13C68.3157 42.0154 71.0293 42.788 72.334 44.9141C72.5692 45.2945 72.7448 45.6972 72.8622 46.1079Z"
      fill="#F7AE75"
    />
    <path
      d="M33.5671 33.129C30.278 31.481 26.2757 32.8116 24.6279 36.1007L22.408 40.5317C18.2639 39.9708 14.0406 42.0477 12.0628 45.9956C9.57347 50.9641 11.5833 57.0096 16.5518 59.4989C21.5203 61.9882 27.5659 59.9784 30.0552 55.0099L36.5391 42.0683C38.1866 38.7791 36.8562 34.7769 33.5671 33.129Z"
      fill="#FFCE9A"
    />
    <path
      d="M14.3865 50.6261C11.115 51.7275 7.72022 53.9645 5.2324 56.4508L4.9385 56.7447C3.85639 54.8417 2.93459 52.8348 2.19092 50.7448V50.7434C5.41795 48.0165 9.33967 46.2546 13.5019 45.646L14.3865 50.6261Z"
      fill="#F7AE75"
    />
    <path
      d="M35.69 34.8068C33.121 34.6647 30.5916 36.0287 29.3664 38.4742L27.1464 42.9052C23.0023 42.3449 18.7785 44.4223 16.8009 48.3695C14.7226 52.5176 9.57228 50.9636 12.0616 45.9951C14.0404 42.0474 18.263 39.9705 22.4071 40.5308L24.6274 36.101C26.2755 32.8113 30.2774 31.481 33.5671 33.1291C34.4096 33.5513 35.1228 34.1271 35.69 34.8068Z"
      fill="#F7AE75"
    />
  </svg>
);

const Advocate = (
  <svg
    width="76"
    height="76"
    viewBox="0 0 76 76"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M73.0216 23.8278C67.3855 9.96376 53.7804 0.188721 37.8923 0.188721C23.3052 0.188721 14.3194 8.41676 14.2946 8.43059C14.2946 8.43059 13.9211 8.8969 13.8512 9.20684C13.2837 11.7261 12.7534 15.1027 12.7534 17.5666C12.7534 26.8105 16.1972 35.2795 21.8439 41.8569H57.3983C67.009 41.8571 74.3888 33.3407 73.0216 23.8278Z"
      fill="#EAB1B7"
    />
    <path
      d="M14.2948 8.43066C11.5876 10.5874 9.18411 13.1085 7.1543 15.9177L13.4425 17.2114C13.438 16.9721 13.4334 16.7329 13.4334 16.4925C13.4336 13.7254 13.7319 11.0292 14.2948 8.43066Z"
      fill="#E490B7"
    />
    <path
      d="M17.8691 36.2965C19.0268 38.2673 20.3592 40.1277 21.844 41.8572H75.6129C75.7208 40.7529 75.798 39.4813 75.798 38.0944C75.798 33.048 74.8117 28.2317 73.0217 23.8281H17.8691V36.2965Z"
      fill="#93D8E4"
    />
    <path
      d="M53.7317 31.3476C53.2392 31.3476 52.8398 30.9482 52.8398 30.4557C52.8398 29.7022 52.2267 29.0892 51.4734 29.0892C50.7981 29.0892 50.2305 29.572 50.1242 30.2372C50.055 30.67 49.6817 30.9882 49.2435 30.9882C48.8053 30.9882 48.432 30.6698 48.3627 30.2372C48.2565 29.572 47.6889 29.0892 47.0136 29.0892C46.2601 29.0892 45.6471 29.7022 45.6471 30.4557C45.6471 30.9482 45.2477 31.3476 44.7552 31.3476C44.2627 31.3476 43.8633 30.9482 43.8633 30.4557C43.8633 28.7186 45.2765 27.3054 47.0136 27.3054C47.881 27.3054 48.6712 27.6513 49.2435 28.2235C49.8158 27.6513 50.606 27.3054 51.4734 27.3054C53.2105 27.3054 54.6235 28.7186 54.6235 30.4557C54.6235 30.9482 54.2243 31.3476 53.7317 31.3476Z"
      fill="#70C6DA"
    />
    <path
      d="M69.0032 37.0423C68.5107 37.0423 68.1113 36.6429 68.1113 36.1504C68.1113 35.3969 67.4982 34.784 66.7449 34.784C66.0696 34.784 65.502 35.2669 65.3957 35.9319C65.3265 36.3646 64.9532 36.6829 64.515 36.6829C64.0768 36.6829 63.7035 36.3645 63.6342 35.9319C63.528 35.2667 62.9604 34.784 62.2851 34.784C61.5316 34.784 60.9186 35.3971 60.9186 36.1504C60.9186 36.6429 60.5191 37.0423 60.0267 37.0423C59.5342 37.0423 59.1348 36.6429 59.1348 36.1504C59.1348 34.4133 60.548 33.0002 62.2851 33.0002C63.1525 33.0002 63.9427 33.3462 64.515 33.9182C65.0873 33.3462 65.8775 33.0002 66.7449 33.0002C68.482 33.0002 69.8951 34.4135 69.8951 36.1504C69.8951 36.6431 69.4958 37.0423 69.0032 37.0423Z"
      fill="#70C6DA"
    />
    <path
      d="M71.4777 29.3984C70.9853 29.3984 70.5858 28.999 70.5858 28.5065C70.5858 27.753 69.9728 27.14 69.2195 27.14C68.5441 27.14 67.9766 27.6228 67.8703 28.288C67.8011 28.7207 67.4278 29.039 66.9896 29.039C66.5514 29.039 66.1781 28.7206 66.1088 28.288C66.0025 27.6228 65.435 27.14 64.7597 27.14C64.0062 27.14 63.3932 27.753 63.3932 28.5065C63.3932 28.999 62.9937 29.3984 62.5013 29.3984C62.0088 29.3984 61.6094 28.999 61.6094 28.5065C61.6094 26.7694 63.0226 25.3562 64.7597 25.3562C65.6271 25.3562 66.4173 25.7021 66.9896 26.2743C67.5619 25.7021 68.3521 25.3562 69.2195 25.3562C70.9566 25.3562 72.3696 26.7694 72.3696 28.5065C72.3696 28.9992 71.9704 29.3984 71.4777 29.3984Z"
      fill="#70C6DA"
    />
    <path
      d="M61.7482 0.188721C58.4728 0.188721 56.4551 2.03628 56.4496 2.03941C56.4496 2.03941 56.3657 2.14406 56.35 2.21377C56.2226 2.77953 56.1035 3.53764 56.1035 4.09092C56.1035 8.79166 60.0675 12.6014 64.7683 12.6014C66.5784 12.6014 68.5923 11.7339 69.9401 10.6908C69.9703 10.6675 70.0659 10.5106 70.0659 10.5106C70.0718 10.4744 70.2594 9.72711 70.2594 8.70024C70.2596 3.99935 66.4489 0.188721 61.7482 0.188721Z"
      fill="#F9EF63"
    />
    <path
      d="M70.0655 10.5102C68.6116 11.6683 66.7703 12.3607 64.7671 12.3607C60.0663 12.3607 56.2557 8.5501 56.2557 3.84936C56.2557 3.228 56.3227 2.6227 56.4491 2.03911C56.4489 2.03925 56.4492 2.03896 56.4491 2.03911C54.4917 3.59859 53.2363 6.00255 53.2363 8.69979C53.2363 13.4005 57.047 17.2112 61.7477 17.2112C65.7923 17.2112 69.2283 14.3748 70.0655 10.5102Z"
      fill="#F4DD45"
    />
    <path
      d="M23.369 8.44388C22.9287 7.6336 22.6787 6.70498 22.6787 5.71795C22.6787 2.56004 25.2388 0 28.3968 0C30.5904 0 32.4955 1.23528 33.4545 3.04821C34.1262 2.77097 34.8622 2.61816 35.634 2.61816C38.7919 2.61816 41.3519 5.1782 41.3519 8.33611C41.3519 8.42248 41.35 8.50825 41.3463 8.59372C42.4415 9.07193 43.2071 10.1645 43.2071 11.436C43.2071 13.148 41.8191 14.536 40.1071 14.536H24.1825C22.4705 14.536 21.0825 13.148 21.0825 11.436C21.0825 10.0054 22.0516 8.80124 23.369 8.44388Z"
      fill="#DAFFFB"
    />
    <path
      d="M55.4044 55.8004L67.7744 39.4334L30.2746 23.7385L27.7392 23.9521L25.3907 21.6945L13.4354 16.6909L12.9248 19.3248L13.0773 55.8004H55.4044Z"
      fill="#5EA55C"
    />
    <path
      d="M13.4359 16.6907C13.3188 16.6598 10.631 15.3024 7.15218 15.9163C6.2362 17.2474 5.41328 18.599 4.68044 19.9653L0.528809 44.5105C0.930608 46.873 1.55687 49.1828 2.39287 51.4112L4.30748 53.2041L42.8517 53.4437C26.0657 49.6037 13.5279 34.6195 13.4359 16.6907Z"
      fill="#4F8980"
    />
    <path
      d="M25.3914 21.6943C25.5891 22.1144 25.7307 22.5526 25.7882 23.0022C25.9785 24.4882 25.2279 26.0731 23.5574 27.7129C21.245 29.9827 19.3469 32.307 17.9905 34.5204L17.8696 37.5071L20.6822 38.9606C21.6866 36.5942 23.7593 33.7636 26.6814 30.8953C28.9977 28.6216 30.2019 26.2197 30.2755 23.7383L25.3914 21.6943Z"
      fill="#93D8E4"
    />
    <path
      d="M20.2615 43.1976C19.7769 42.1119 19.9641 40.6044 20.7296 38.8487C19.7234 37.4731 18.807 36.0281 17.9903 34.5205C17.6711 35.0414 17.3816 35.5561 17.124 36.0624C15.3815 39.4887 15.0669 42.5009 16.1892 45.0153C17.2158 47.3153 19.3574 48.9697 22.5546 49.9325C24.8301 50.6177 27.7121 50.962 31.1539 50.962C32.369 50.962 33.6539 50.9191 35.0065 50.8331L34.9983 50.7041C32.8515 49.6768 30.8175 48.4522 28.9177 47.0558C24.1665 46.5751 21.0905 45.0548 20.2615 43.1976Z"
      fill="#70C6DA"
    />
    <path
      d="M3.11833 53.2039L5.73144 53.2197V46.6039L3.62537 44.1501L2.39307 46.6039V51.4112C2.61946 52.0149 2.86131 52.6126 3.11833 53.2039Z"
      fill="#664545"
    />
    <path
      d="M57.8795 12.7C58.3945 11.7519 58.6872 10.6654 58.6872 9.51058C58.6872 5.8156 55.6919 2.82031 51.997 2.82031C49.4304 2.82031 47.2012 4.26563 46.0792 6.38671C45.2933 6.06236 44.432 5.88353 43.5291 5.88353C39.8343 5.88353 36.8389 8.87882 36.8389 12.5738C36.8389 12.6747 36.8411 12.7752 36.8456 12.8753C35.5641 13.4348 34.6685 14.7132 34.6685 16.2008C34.6685 18.204 36.2923 19.8279 38.2955 19.8279H56.9278C58.931 19.8279 60.5549 18.204 60.5549 16.2008C60.5547 14.527 59.421 13.118 57.8795 12.7Z"
      fill="white"
    />
    <path
      d="M10.6551 38.3154C10.6551 34.4957 8.0317 21.4474 4.68055 19.9651C0.369274 28.003 -0.824083 36.5545 0.528923 44.5102C1.55014 45.233 2.76223 45.6517 4.06217 45.6517C7.70334 45.6517 10.6551 42.3671 10.6551 38.3154Z"
      fill="#3D6B73"
    />
    <path
      d="M2.39307 46.6038C2.92612 46.7587 3.48564 46.8411 4.06225 46.8411C4.63901 46.8411 5.19838 46.7586 5.73144 46.6038V39.2131H2.39307V46.6038Z"
      fill="#523838"
    />
    <path
      d="M10.6551 38.3154C10.6551 34.4957 8.0317 21.4474 4.68055 19.9651C0.369274 28.003 -0.824083 36.5545 0.528923 44.5102C1.55014 45.233 2.76223 45.6517 4.06217 45.6517C7.70334 45.6517 10.6551 42.3671 10.6551 38.3154Z"
      fill="#3D6B73"
    />
    <path
      d="M13.8839 57.0418H10.7642V48.5262L11.2441 47.5586L13.8839 48.5262V57.0418Z"
      fill="#664545"
    />
    <path
      d="M18.4851 40.7033C18.4851 44.4895 15.7268 47.5587 12.3243 47.5587C8.92191 47.5587 6.16357 44.4894 6.16357 40.7033C6.16357 36.9172 8.92191 23.4272 12.3243 23.4272C15.7268 23.4272 18.4851 36.917 18.4851 40.7033Z"
      fill="#5EA570"
    />
    <path
      d="M10.7642 48.5263C11.2624 48.671 11.7851 48.7481 12.3239 48.7481C12.8628 48.7481 13.3856 48.671 13.8837 48.5263V41.6421H10.7642V48.5263Z"
      fill="#523838"
    />
    <path
      d="M18.4851 40.7033C18.4851 44.4895 15.7268 47.5587 12.3243 47.5587C8.92191 47.5587 6.16357 44.4894 6.16357 40.7033C6.16357 36.9172 8.92191 23.4272 12.3243 23.4272C15.7268 23.4272 18.4851 36.917 18.4851 40.7033Z"
      fill="#5EA570"
    />
    <path
      d="M24.355 52.747H21.2354V44.2313L21.6266 43.4424L24.355 44.2313V52.747Z"
      fill="#664545"
    />
    <path
      d="M21.2355 44.2313C21.7338 44.376 22.2564 44.4531 22.7953 44.4531C23.3341 44.4531 23.8569 44.376 24.3551 44.2313V37.9417H21.2354V44.2313H21.2355Z"
      fill="#523838"
    />
    <path
      d="M28.9558 36.4083C28.9558 40.1946 26.1975 43.2638 22.7951 43.2638C19.3926 43.2638 16.6343 40.1944 16.6343 36.4083C16.6343 32.6222 19.3926 19.1323 22.7951 19.1323C26.1975 19.1323 28.9558 32.6221 28.9558 36.4083Z"
      fill="#8BC852"
    />
    <path
      d="M28.9558 36.4083C28.9558 40.1946 26.1975 43.2638 22.7951 43.2638C19.3926 43.2638 16.6343 40.1944 16.6343 36.4083C16.6343 32.6222 19.3926 19.1323 22.7951 19.1323C26.1975 19.1323 28.9558 32.6221 28.9558 36.4083Z"
      fill="#8BC852"
    />
    <path
      d="M64.6265 38.5635L50.4489 41.9381L48.6051 43.2462L45.6791 43.0733L28.9194 47.0626C35.6613 64.0666 58.3067 67.3487 69.5987 52.9584L74.9358 46.1568C74.9553 46.0379 75.413 44.2044 75.6533 41.4223C72.7422 38.7606 68.6347 37.6094 64.6265 38.5635Z"
      fill="#8BC852"
    />
    <path
      d="M51.3386 54.3983C42.9511 54.3983 35.1999 51.6741 28.9214 47.0621L3.11768 53.2042C8.97149 66.6602 22.3339 75.9419 37.7305 75.9997C48.2962 76.0459 57.9081 71.7522 64.8304 64.7614L66.1808 61.5262L68.8953 59.9084C71.757 55.8482 73.844 51.1947 74.9354 46.157C68.4604 51.3145 60.2601 54.3983 51.3386 54.3983Z"
      fill="#5EA55C"
    />
    <path
      d="M60.133 49.9743C54.3178 46.049 51.6551 43.4281 50.4491 41.938L45.6792 43.0734C46.9924 45.4203 50.2961 48.8408 57.5796 53.7571C57.6311 53.7919 57.6819 53.8264 57.7325 53.8609C57.841 53.9349 62.1641 54.0085 62.2701 54.0818L63.4158 52.4328C62.4643 51.6307 61.3756 50.8131 60.133 49.9743Z"
      fill="#93D8E4"
    />
    <path
      d="M63.4159 52.4326C61.5802 53.0495 59.6817 53.5297 57.7324 53.8608C63.7379 57.9453 65.1334 60.7461 64.8307 64.7612C66.2686 63.3098 67.6408 61.6887 68.8958 59.9082C68.1371 57.4588 66.495 55.0276 63.4159 52.4326Z"
      fill="#70C6DA"
    />
    <path
      d="M23.7627 44.5254H25.9229V45.9491H23.7627V44.5254Z"
      fill="#664545"
    />
    <path d="M5.04395 48.9272H7.20412V50.351H5.04395V48.9272Z" fill="#664545" />
    <path
      d="M38.3936 52.0769H33.1896C32.5739 52.0769 32.0747 51.5777 32.0747 50.962C32.0747 50.3463 32.5739 49.8472 33.1896 49.8472H38.3936C39.0093 49.8472 39.5085 50.3463 39.5085 50.962C39.5085 51.5777 39.0093 52.0769 38.3936 52.0769Z"
      fill="#AAD540"
    />
    <path
      d="M31.0291 58.157H27.3961C26.7804 58.157 26.2812 57.6578 26.2812 57.0421C26.2812 56.4264 26.7804 55.9272 27.3961 55.9272H31.0291C31.6448 55.9272 32.144 56.4264 32.144 57.0421C32.144 57.6578 31.645 58.157 31.0291 58.157Z"
      fill="#AAD540"
    />
    <path
      d="M17.2826 62.1933H14.6539C14.0382 62.1933 13.5391 61.6942 13.5391 61.0785C13.5391 60.4628 14.0382 59.9636 14.6539 59.9636H17.2826C17.8984 59.9636 18.3975 60.4628 18.3975 61.0785C18.3975 61.6942 17.8984 62.1933 17.2826 62.1933Z"
      fill="#AAD540"
    />
    <path
      d="M40.9465 65.8762H37.8927C37.277 65.8762 36.7778 65.377 36.7778 64.7613C36.7778 64.1456 37.277 63.6465 37.8927 63.6465H40.9465C41.5622 63.6465 42.0614 64.1456 42.0614 64.7613C42.0614 65.377 41.5622 65.8762 40.9465 65.8762Z"
      fill="#AAD540"
    />
    <path
      d="M32.441 65.8762H31.0289C30.4132 65.8762 29.9141 65.377 29.9141 64.7613C29.9141 64.1456 30.4132 63.6465 31.0289 63.6465H32.441C33.0567 63.6465 33.5558 64.1456 33.5558 64.7613C33.5558 65.377 33.0567 65.8762 32.441 65.8762Z"
      fill="#AAD540"
    />
    <path
      d="M25.2692 70.4961H22.7955C22.1798 70.4961 21.6807 69.9969 21.6807 69.3812C21.6807 68.7655 22.1798 68.2664 22.7955 68.2664H25.2692C25.8849 68.2664 26.3841 68.7655 26.3841 69.3812C26.3841 69.9969 25.8849 70.4961 25.2692 70.4961Z"
      fill="#AAD540"
    />
    <path
      d="M21.4261 54.4292H18.4855C17.8698 54.4292 17.3706 53.93 17.3706 53.3143C17.3706 52.6986 17.8698 52.1995 18.4855 52.1995H21.4261C22.0418 52.1995 22.5409 52.6986 22.5409 53.3143C22.5409 53.93 22.0419 54.4292 21.4261 54.4292Z"
      fill="#AAD540"
    />
    <path
      d="M10.655 56.915H8.64173C8.02602 56.915 7.52686 56.4159 7.52686 55.8002C7.52686 55.1845 8.02602 54.6853 8.64173 54.6853H10.655C11.2707 54.6853 11.7699 55.1845 11.7699 55.8002C11.7699 56.4159 11.2707 56.915 10.655 56.915Z"
      fill="#AAD540"
    />
    <path
      d="M49.4891 61.1025H47.0343C46.4186 61.1025 45.9194 60.6034 45.9194 59.9877C45.9194 59.372 46.4186 58.8728 47.0343 58.8728H49.4891C50.1048 58.8728 50.604 59.372 50.604 59.9877C50.604 60.6034 50.1048 61.1025 49.4891 61.1025Z"
      fill="#AAD540"
    />
    <path
      d="M38.3933 72.9837H35.0065C34.3908 72.9837 33.8916 72.4845 33.8916 71.8688C33.8916 71.2531 34.3908 70.7539 35.0065 70.7539H38.3933C39.009 70.7539 39.5082 71.2531 39.5082 71.8688C39.5082 72.4845 39.009 72.9837 38.3933 72.9837Z"
      fill="#AAD540"
    />
    <path
      d="M53.9073 69.7432H47.671C47.0553 69.7432 46.5562 69.244 46.5562 68.6283C46.5562 68.0126 47.0553 67.5134 47.671 67.5134H53.9073C54.523 67.5134 55.0222 68.0126 55.0222 68.6283C55.0222 69.244 54.523 69.7432 53.9073 69.7432Z"
      fill="#AAD540"
    />
    <path
      d="M60.0268 61.1025H56.6569C56.0412 61.1025 55.542 60.6034 55.542 59.9877C55.542 59.372 56.0412 58.8728 56.6569 58.8728H60.0268C60.6425 58.8728 61.1416 59.372 61.1416 59.9877C61.1416 60.6034 60.6425 61.1025 60.0268 61.1025Z"
      fill="#AAD540"
    />
    <path
      d="M43.2074 56.5833H41.8058C41.1901 56.5833 40.6909 56.0841 40.6909 55.4684C40.6909 54.8527 41.1901 54.3535 41.8058 54.3535H43.2074C43.8231 54.3535 44.3223 54.8527 44.3223 55.4684C44.3223 56.0841 43.8231 56.5833 43.2074 56.5833Z"
      fill="#AAD540"
    />
  </svg>
);

const Hero = (
  <svg
    width="76"
    height="76"
    viewBox="0 0 76 76"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M38 76C58.9868 76 76 58.9868 76 38C76 17.0132 58.9868 0 38 0C17.0132 0 0 17.0132 0 38C0 58.9868 17.0132 76 38 76Z"
      fill="#B26483"
    />
    <path
      d="M61.3455 43.8831C61.0906 43.8831 60.8497 43.9333 60.6189 44.006C59.8877 42.9548 58.6745 42.2637 57.297 42.2637C55.9195 42.2637 54.7063 42.9548 53.9751 44.006C53.7443 43.9333 53.5034 43.8831 53.2485 43.8831C51.9069 43.8831 50.8193 44.9707 50.8193 46.3123H63.7745C63.7747 44.9707 62.6871 43.8831 61.3455 43.8831Z"
      fill="#9B5A6F"
    />
    <g opacity="0.35">
      <path
        opacity="0.35"
        d="M31.3252 62.9375C43.7861 62.9375 53.8877 52.8359 53.8877 40.375C53.8877 27.9141 43.7861 17.8125 31.3252 17.8125C18.8643 17.8125 8.7627 27.9141 8.7627 40.375C8.7627 52.8359 18.8643 62.9375 31.3252 62.9375Z"
        fill="#FF7998"
      />
    </g>
    <path
      d="M22.2249 62.6635C28.0707 62.6635 32.8097 57.9245 32.8097 52.0787C32.8097 46.2329 28.0707 41.4939 22.2249 41.4939C16.3791 41.4939 11.6401 46.2329 11.6401 52.0787C11.6401 57.9245 16.3791 62.6635 22.2249 62.6635Z"
      fill="#FF7998"
    />
    <path
      d="M43.6523 46.3127C43.6523 44.0411 45.4939 42.1995 47.7655 42.1995C48.1084 42.1995 48.4362 42.2536 48.7546 42.3328C49.8278 41.1738 51.3496 40.4368 53.0538 40.4368C56.2989 40.4368 58.9297 43.0675 58.9297 46.3127H43.6523Z"
      fill="#9B5A6F"
    />
    <path
      d="M73.6952 51.0625H20.1875L32.0603 67.6875C32.0603 67.6875 41.3539 71.7198 48.4463 74.534C60.1469 71.1943 69.5459 62.3978 73.6952 51.0625Z"
      fill="#FF4F70"
    />
    <path
      d="M23.6758 58.8555H40.0533C38 56.4557 34.005 57.3227 31.0482 55.0703C28.3076 52.9827 25.8425 48.2175 20.6328 47.3516C15.4232 46.4854 12.7656 46.3125 12.7656 46.3125L22.6367 60.1172L23.6758 59.9113V58.8555Z"
      fill="#835354"
    />
    <path
      d="M43.9375 42.75C43.5637 42.75 43.2105 42.8236 42.8719 42.9304C41.7994 41.3887 40.0204 40.375 38 40.375C35.9796 40.375 34.2006 41.3887 33.1281 42.9304C32.7895 42.8236 32.4363 42.75 32.0625 42.75C30.095 42.75 28.5 44.345 28.5 46.3125H47.5C47.5 44.345 45.905 42.75 43.9375 42.75Z"
      fill="#B26483"
    />
    <path
      d="M49.9492 21.939H42.5312C42.6642 21.5656 42.75 21.1699 42.75 20.7515C42.75 19.1464 41.683 17.7861 40.222 17.342C39.7778 15.8803 38.4176 14.814 36.8125 14.814H29.6875C28.0824 14.814 26.7222 15.8803 26.278 17.342C24.817 17.7863 23.75 19.1466 23.75 20.7515C23.75 21.1699 23.8358 21.5656 23.9689 21.939H21.417C19.4526 21.939 17.8545 23.537 17.8545 25.5015C17.8545 27.4659 19.4526 29.064 21.417 29.064H28.5C30.4644 29.064 32.0625 27.4659 32.0625 25.5015C32.0625 25.083 31.9767 24.6873 31.8437 24.314H33.4688C33.3358 24.6873 33.25 25.083 33.25 25.5015C33.25 27.4659 34.8481 29.064 36.8125 29.064H37.0154C36.8843 29.4357 36.8125 29.8351 36.8125 30.2515C36.8125 32.2159 38.4106 33.814 40.375 33.814H45.125C47.0894 33.814 48.6875 32.2159 48.6875 30.2515C48.6875 29.8351 48.6157 29.4357 48.4846 29.064H49.9492C51.9136 29.064 53.5117 27.4659 53.5117 25.5015C53.5117 23.537 51.9136 21.939 49.9492 21.939Z"
      fill="#674447"
    />
    <path
      d="M38 76.0001C48.1209 76.0001 57.3102 72.0357 64.1204 65.5849C58.9227 65.4581 57.696 64.3244 48.5297 64.3244C44.6441 64.3244 34.4749 67.7782 30.7034 60.5045C27.7324 54.7746 22.3605 50.1737 17.9703 49.0448C14.2565 48.0898 13.1955 44.4821 12.8771 40.1316C12.5428 35.5627 8.84494 35.4628 6.51062 32.4918C4.30884 29.6894 4.3697 26.5127 1.89095 26.1606C0.669602 29.8876 0 33.8647 0 38.0002C0 58.987 17.0132 76.0001 38 76.0001Z"
      fill="#674447"
    />
    <path
      d="M20.2551 50.634C19.9424 50.634 19.6296 50.5146 19.3909 50.2759C18.9136 49.7986 17.4259 49.3904 17.9732 48.9949C21.0192 46.794 25.9605 40.242 27.7127 36.6528C28.1315 35.7953 28.0576 35.7081 27.3558 34.8785C26.475 33.8365 25.1441 32.2628 25.1441 28.6336C25.1441 27.9587 25.6908 27.4114 26.3663 27.4114C27.0419 27.4114 27.5886 27.9587 27.5886 28.6336C27.5886 31.3675 28.4563 32.394 29.2226 33.2999C30.0271 34.2506 31.0285 35.434 29.9089 37.7257C28.0314 41.5714 23.6272 47.9112 20.9047 50.6338C20.666 50.8727 20.5679 50.634 20.2551 50.634Z"
      fill="#674447"
    />
    <path
      d="M27.5898 40.856C27.2365 40.856 26.8856 40.7039 26.6432 40.4091C26.2159 39.8875 26.2911 39.1171 26.8127 38.6892C28.208 37.5452 30.2001 37.0402 32.3092 36.5061C35.0163 35.8203 37.8152 35.112 38.6842 33.0482C38.9468 32.4253 39.6677 32.1358 40.2848 32.396C40.9078 32.658 41.199 33.3748 40.9376 33.9972C39.596 37.1824 36.0439 38.0822 32.9095 38.876C31.0726 39.341 29.3359 39.7808 28.3643 40.5788C28.1363 40.7654 27.8619 40.856 27.5898 40.856Z"
      fill="#674447"
    />
    <path
      d="M74.8125 40.375C72.7921 40.375 71.0131 41.3887 69.9406 42.9304C69.602 42.8236 69.2488 42.75 68.875 42.75C66.9075 42.75 65.3125 44.345 65.3125 46.3125H75.077C75.4996 44.4201 75.7815 42.4755 75.91 40.4883C75.5534 40.421 75.1891 40.375 74.8125 40.375Z"
      fill="#9B5A6F"
    />
  </svg>
);

const Champion = (
  <svg
    width="76"
    height="76"
    viewBox="0 0 76 76"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <g clipPath="url(#clip0_364_4105)">
      <path
        d="M38 76C58.9868 76 76 58.9868 76 38C76 17.0132 58.9868 0 38 0C17.0132 0 0 17.0132 0 38C0 58.9868 17.0132 76 38 76Z"
        fill="#36B294"
      />
      <path
        d="M49.1127 1.65527C44.6107 3.22723 49.2384 5.35226 46.3124 6.72916C42.9478 8.31254 43.0024 10.4172 42.354 11.0834L51.8046 14.306C51.8046 14.306 62.3497 14.8715 68.3101 15.0851C63.5393 8.78457 56.8514 4.01855 49.1127 1.65527Z"
        fill="#52C883"
      />
      <path
        d="M68.3102 15.085C66.0456 12.0945 63.3375 9.46417 60.3018 7.25779C57.5195 7.7558 53.2148 5.789 50.9512 6.86517C49.7188 7.45106 49.207 8.90619 49.207 8.90619C49.207 8.90619 55.7656 12.4194 60.5963 14.7508C63.2851 14.8793 66.1098 15.0062 68.3102 15.085Z"
        fill="#36B294"
      />
      <path
        d="M8.48633 14.071C8.67277 14.151 8.87449 14.2155 9.10368 14.2502C12.3693 14.7449 33.8132 11.7996 33.8132 11.7996C34.14 9.59904 34.0412 8.33628 31.864 7.33493C29.6871 6.33357 29.8849 4.55232 28.2027 3.76055C27.5781 3.46664 25.9024 3.06378 24.0029 2.6731C17.8941 5.09574 12.5624 9.05012 8.48633 14.071Z"
        fill="#52C883"
      />
      <path
        d="M8.67383 13.8548C9.13369 13.876 9.69359 13.8472 10.3905 13.7552C15.6353 13.0626 27.0678 8.14927 27.0678 8.14927C25.6505 7.45621 25.16 5.62835 23.5272 5.90044C21.5101 6.23665 18.5896 6.67395 16.9112 6.41433C13.815 8.484 11.0367 10.9884 8.67383 13.8548Z"
        fill="#36B294"
      />
      <path
        d="M1.83203 49.666C6.75659 64.9438 21.0839 76 37.9997 76C54.9155 76 69.2428 64.9438 74.1674 49.666H1.83203Z"
        fill="#B3F4EF"
      />
      <path
        d="M42.7082 49.875L42.1939 27.2741L41.5566 11.875L42.7082 49.875Z"
        fill="#745154"
      />
      <path
        d="M47.698 10.0938C45.2244 11.3925 42.1864 9.30217 42.1864 11.7995L42.1938 27.2741L42.1323 49.905L50.0173 52.8438L47.5001 55.8125H64.1251L74.3113 49.2307C75.4081 45.6811 76.0001 41.9097 76.0001 38C76.0001 27.6974 71.8937 18.3588 65.2363 11.514C60.1268 10.3144 51.0485 8.3348 47.698 10.0938Z"
        fill="#745154"
      />
      <path
        d="M65.2365 11.5139C60.127 10.3142 52.2503 5.56628 48.6878 8.31237C45.2541 10.9592 42.1865 9.302 42.1865 11.7993V11.9596C42.8183 13.7326 44.0479 15.5043 45.4222 15.1405C47.9456 14.4725 47.5836 11.8994 49.43 11.2069C51.805 10.3163 51.805 13.7303 53.4378 14.6771C55.2137 15.7068 50.6175 25.0858 51.805 25.8807C53.4884 27.0075 55.2521 22.5401 57.5198 20.4843C59.7875 18.4284 61.5999 19.8212 63.3089 20.4843C66.5604 21.746 66.5604 18.2577 70.3742 18.1228C68.903 15.734 67.1826 13.5147 65.2365 11.5139Z"
        fill="#86646A"
      />
      <path
        d="M42.1323 49.905L43.5417 52.8438L47.5001 55.8125"
        fill="#745154"
      />
      <path
        d="M76.0001 38C76.0001 36.897 75.9436 35.8076 75.8514 34.7284L73.6251 34.4375C70.8048 34.4375 68.8616 30.875 66.5001 30.875C62.4429 30.875 61.1564 37.1094 57.6244 36.4263C56.5875 36.2257 55.5505 35.7509 54.5309 35.1797C52.0298 33.7784 46.7579 39.7812 42.7081 39.7812L42.1535 42.0663L42.1323 49.905L50.0173 52.8438L48.3309 54.8325L50.4689 55.8125H64.1251L74.3113 49.2306C75.4081 45.681 76.0001 41.9097 76.0001 38Z"
        fill="#674447"
      />
      <path
        d="M33.292 49.875L33.8063 27.2741L34.4436 11.875L33.292 49.875Z"
        fill="#745154"
      />
      <path
        d="M27.3125 8.31242C30.3803 10.4896 33.8138 9.05461 33.8138 11.7994L33.8063 27.274L33.8678 49.8749L47.698 53.3384L34.8332 55.8124H11.875L1.68877 49.2306C0.591969 45.681 0 41.9096 0 37.9999C0 27.6973 4.10638 18.3587 10.7638 11.5139C15.8733 10.3143 22.9689 5.22982 27.3125 8.31242Z"
        fill="#745154"
      />
      <path
        d="M33.8678 49.8752L33.8368 38.428L33.25 38.0002C29.6875 38.0002 28.2298 32.1412 23.75 30.8752C19.1979 29.5886 15.7681 35.831 14.7447 34.4377C14.1633 33.646 17.8863 23.7502 13.0625 23.7502C8.76613 23.7502 6.72986 18.5681 6.72986 18.5681L6.19133 17.2222C2.2797 23.1932 0 30.3285 0 38.0002C0 38.4213 0.0336953 38.8341 0.0472031 39.2519C4.21607 43.6213 15.642 55.4644 15.9322 55.8127C16.3033 56.258 25.8281 55.6642 25.8281 55.6642C25.8281 55.6642 31.9883 53.2892 32.8789 52.8589C33.1503 52.7278 33.6218 51.5357 34.146 49.9448L33.8678 49.8752Z"
        fill="#674447"
      />
      <path
        d="M47.5 48.6874C47.1915 48.6874 46.8819 48.5563 46.6569 48.343C46.4424 48.1174 46.3125 47.8084 46.3125 47.4999C46.3125 47.1909 46.4424 46.8824 46.6569 46.6568C47.0964 46.2173 47.8919 46.2173 48.343 46.6568C48.5564 46.8824 48.6874 47.1909 48.6874 47.4999C48.6874 47.8084 48.5563 48.1174 48.343 48.343C48.1169 48.5563 47.8085 48.6874 47.5 48.6874Z"
        fill="white"
      />
      <path
        d="M51.8047 49.8676C51.4962 49.8676 51.1866 49.7365 50.9616 49.5232C50.7471 49.2976 50.6172 48.9885 50.6172 48.6801C50.6172 48.371 50.7471 48.0626 50.9616 47.837C51.4011 47.3974 52.1966 47.3974 52.6477 47.837C52.8611 48.0626 52.992 48.371 52.992 48.6801C52.992 48.9885 52.861 49.2976 52.6477 49.5232C52.4216 49.7365 52.1131 49.8676 51.8047 49.8676Z"
        fill="white"
      />
      <path
        d="M29.3906 49.2738C29.0822 49.2738 28.7725 49.1428 28.5475 48.9295C28.333 48.7038 28.2031 48.3948 28.2031 48.0863C28.2031 47.7773 28.333 47.4688 28.5475 47.2432C28.987 46.8037 29.7825 46.8037 30.2336 47.2432C30.4471 47.4688 30.578 47.7773 30.578 48.0863C30.578 48.3948 30.4469 48.7038 30.2336 48.9295C30.0075 49.1428 29.6991 49.2738 29.3906 49.2738Z"
        fill="white"
      />
      <path
        d="M53.4375 53.4301C53.129 53.4301 52.8194 53.299 52.5944 53.0857C52.3799 52.8601 52.25 52.551 52.25 52.2426C52.25 51.9335 52.3799 51.6251 52.5944 51.3995C53.0339 50.9599 53.8294 50.9599 54.2805 51.3995C54.4939 51.6251 54.6249 51.9335 54.6249 52.2426C54.6249 52.551 54.4938 52.8601 54.2805 53.0857C54.0544 53.299 53.746 53.4301 53.4375 53.4301Z"
        fill="white"
      />
      <path
        d="M25.3086 51.6342C25.0001 51.6342 24.6905 51.5031 24.4655 51.2898C24.251 51.0642 24.1211 50.7551 24.1211 50.4467C24.1211 50.1376 24.251 49.8292 24.4655 49.6036C24.905 49.164 25.7005 49.164 26.1516 49.6036C26.365 49.8292 26.4959 50.1376 26.4959 50.4467C26.4959 50.7551 26.3649 51.0642 26.1516 51.2898C25.9255 51.5031 25.617 51.6342 25.3086 51.6342Z"
        fill="white"
      />
      <path
        d="M13.0627 13.0624C13.7798 13.4994 14.5836 17.4896 14.9181 16.7653C17.0746 12.0976 20.3507 15.6429 24.9377 11.8749C27.0158 10.1679 29.9351 13.2851 30.9742 14.621C32.6468 16.7716 30.2072 25.3085 34.1461 31.5736L33.8139 11.7995C33.8139 9.05461 30.3804 10.4896 27.3127 8.31242C22.9689 5.22982 15.8735 10.3143 10.764 11.5139C10.3657 11.9233 9.97785 12.3429 9.59814 12.7699C11.4787 12.9419 12.3205 12.6101 13.0627 13.0624Z"
        fill="#86646A"
      />
      <path
        d="M42.1858 11.7996H33.8134L32.458 52.2501H43.5412L42.1858 11.7996Z"
        fill="#DDF9FF"
      />
      <path
        d="M51.0625 55.8125C51.0625 53.1892 48.9358 51.0625 46.3125 51.0625C45.9456 51.0625 45.5923 51.1131 45.2492 51.1919C44.2338 50.3804 42.9635 49.875 41.5625 49.875C40.4755 49.875 39.4701 50.1885 38.5938 50.6985C37.7174 50.1885 36.712 49.875 35.625 49.875C33.4243 49.875 31.5252 51.0861 30.4996 52.8648C29.9293 52.4773 29.2414 52.25 28.5 52.25C26.5325 52.25 24.9375 53.845 24.9375 55.8125"
        fill="white"
      />
      <path
        d="M30.974 60.5626C30.974 60.5626 30.5781 57.396 26.4961 57.0611C22.1553 56.705 22.5625 52.8289 18.5053 49.8601C17.2094 48.9121 13.9697 47.5044 11.875 43.9376C9.12891 39.2619 4.67578 39.7814 0.124242 35.0615C0.049875 36.0325 0 37.0102 0 38.0001C0 46.4496 2.76138 54.2523 7.42588 60.5626C14.862 60.5626 28.196 60.5626 30.974 60.5626Z"
        fill="#86646A"
      />
      <path
        d="M16.5879 49.062C16.7562 49.0209 16.8993 48.9744 17.0491 48.9293C15.5041 47.9655 13.3929 46.5221 11.875 43.9375C9.24142 39.4533 5.03752 39.7345 0.682812 35.603L0.0512109 36.2475C0.021375 36.8284 0 37.4116 0 38C0 40.2531 0.210039 42.4554 0.586328 44.6004C3.25969 44.509 6.30221 43.7957 7.08789 44.4941C8.08984 45.3848 12.3203 50.1045 16.5879 49.062Z"
        fill="#674447"
      />
      <path
        d="M62.1459 57.0611C61.1822 58.7541 59.4094 61.0573 56.2801 61.0573C47.5223 61.0573 43.9375 66.5001 43.9375 66.5001H63.1211C68.703 61.5759 72.8312 55.0439 74.7681 47.6221C67.127 48.4459 64.6717 52.6235 62.1459 57.0611Z"
        fill="#86646A"
      />
      <path
        d="M73.7677 50.8096C72.4665 50.5887 70.7015 50.4527 69.6671 50.5676C68.8887 50.6541 66.9958 51.5341 65.1108 52.4976C63.9674 53.888 63.0597 55.4562 62.146 57.0608C61.559 58.0923 60.6657 59.3447 59.3541 60.1703L59.353 60.1764C61.8787 62.0532 66.5843 58.1158 70.5935 57.5041C71.8589 55.3963 72.926 53.1578 73.7677 50.8096Z"
        fill="#674447"
      />
      <path
        d="M17.073 48.9461C17.0734 48.9459 17.074 48.9458 17.0745 48.9456C15.5275 47.9818 13.4009 46.5359 11.875 43.9376C9.12891 39.2619 4.67578 39.7814 0.124242 35.0615C0.049875 36.0325 0 37.0102 0 38.0001C0 39.2157 0.0728828 40.4131 0.184656 41.5996C2.48529 43.0405 5.05207 41.9615 7.42187 43.3439C9.79687 44.7293 12.573 49.8973 17.073 48.9461Z"
        fill="#52C883"
      />
      <path
        d="M21.5113 58.2595C18.1843 58.2595 15.4873 60.221 15.4873 62.6406H27.5354C27.5354 60.221 24.8383 58.2595 21.5113 58.2595Z"
        fill="#674447"
      />
      <path
        d="M38.524 63.457C36.2131 63.457 34.3398 64.8194 34.3398 66.5H42.708C42.708 64.8194 40.8347 63.457 38.524 63.457Z"
        fill="#86646A"
      />
      <path
        d="M34.3398 64.5381C32.8499 64.5381 31.6421 65.4165 31.6421 66.5H37.0375C37.0375 65.4164 35.8298 64.5381 34.3398 64.5381Z"
        fill="#86646A"
      />
      <path
        d="M14.1637 59.2896C12.2303 59.2896 10.6631 60.4294 10.6631 61.8354H17.6643C17.6643 60.4294 16.0971 59.2896 14.1637 59.2896Z"
        fill="#674447"
      />
      <path
        d="M57.8825 64.3093C53.6702 64.3093 50.2554 66.7928 50.2554 69.8564H58.6826C60.3947 68.742 62.0066 67.4918 63.5129 66.1238C62.1182 65.0116 60.1158 64.3093 57.8825 64.3093Z"
        fill="#674447"
      />
      <path
        d="M62.1456 57.0611C61.5576 58.094 60.663 59.3489 59.3481 60.1745C59.3499 60.175 59.351 60.176 59.3526 60.1766C62.8195 61.1202 66.7752 54.1437 72.06 54.8085C73.188 52.5297 74.1128 50.1323 74.7678 47.6221C67.1269 48.4459 64.6717 52.6235 62.1456 57.0611Z"
        fill="#52C883"
      />
      <path
        d="M42.1865 11.7996H33.8141L32.9194 38.5003C35.5264 36.6 35.8233 19.6927 37.2087 20.7814C38.5941 21.8699 37.8024 29.3642 38.9899 29.3642C40.1774 29.3642 40.2125 17.9103 42.4709 20.2859L42.1865 11.7996Z"
        fill="#AEE1F9"
      />
    </g>
    <defs>
      <clipPath id="clip0_364_4105">
        <rect width="76" height="76" fill="white" />
      </clipPath>
    </defs>
  </svg>
);

const Legend = (
  <svg
    width="76"
    height="76"
    viewBox="0 0 76 76"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M37.9182 0.163086C23.3262 0.163086 14.3375 8.39394 14.3127 8.40775C14.3127 8.40775 13.9391 8.87429 13.8691 9.18423C13.3014 11.7044 12.771 15.0821 12.771 17.5467C12.771 38.4886 30.4311 55.4609 51.3729 55.4609C59.4371 55.4609 68.4091 51.5959 74.4138 46.9489C74.5482 46.845 74.9743 46.1465 74.9743 46.1465C75.0008 45.9848 75.8368 42.6555 75.8368 38.0811C75.8368 17.1399 58.86 0.163086 37.9182 0.163086Z"
      fill="#4278C3"
    />
    <path
      d="M51.3695 54.3909C30.4276 54.3909 13.451 37.4142 13.451 16.4723C13.451 13.7043 13.7495 11.0072 14.3126 8.40771C5.59223 15.355 0 26.0656 0 38.0814C0 47.2216 3.23386 55.6063 8.61976 62.1538L25.0318 73.7539C29.0547 75.2076 33.3941 75.9999 37.9184 75.9999C55.9363 75.9999 71.2443 63.3635 74.9741 46.1468C68.4971 51.306 60.294 54.3909 51.3695 54.3909Z"
      fill="#3B69AF"
    />
    <path
      d="M37.9207 7.479C31.8901 7.479 26.2672 9.22329 21.5283 12.2349L20.1719 42.6813L49.0676 58.4056L68.0756 43.3265C68.37 41.6225 68.5233 39.87 68.5233 38.0819C68.5233 21.1802 54.8219 7.479 37.9207 7.479Z"
      fill="#0096F2"
    />
    <path
      d="M50.6722 47.8707C38.5033 47.8707 27.7886 41.6494 21.5333 32.2139L12.3097 25.7888C12.3097 25.7888 11.8176 56.4027 18.8409 62.0101C24.0728 66.1874 30.7049 68.6844 37.9205 68.6844C42.187 68.6844 46.2495 67.8113 49.939 66.2339L59.9918 59.2785C64.1485 54.9507 67.0448 49.4028 68.0904 43.2256C62.9629 46.1803 57.0149 47.8707 50.6722 47.8707Z"
      fill="#4278C3"
    />
    <path
      d="M44.9139 21.3825L44.9132 21.3826C44.8072 21.3883 44.344 21.425 43.9713 21.8093C43.5597 22.2338 43.571 22.7601 43.5745 22.8516C43.5876 23.6928 42.9097 24.3789 42.0715 24.3789C42.0499 24.3789 42.028 24.3794 42.006 24.3805C39.855 24.4155 38.1221 26.169 38.1221 28.3283V33.3958C38.1221 35.1403 36.7222 36.6166 34.9782 36.589C33.744 36.5696 32.7462 37.6036 32.8257 38.8506C32.8955 39.9437 33.9049 40.8337 35.0002 40.8337H36.849C37.5624 40.8337 38.1082 41.4198 38.1224 42.133C38.1362 42.8243 38.701 43.3806 39.3956 43.3806C41.5631 43.3806 43.3451 45.0307 43.5542 47.1431L53.4477 50.5717L63.3246 45.5253C64.1986 44.2315 65.679 43.3806 67.3579 43.3806C67.6014 43.3806 67.8402 43.3612 68.0739 43.3262C68.3682 41.6219 68.5232 39.8701 68.5232 38.0819C68.523 29.6583 65.1194 22.0304 59.6128 16.4968H50.2955C48.6835 16.4968 47.3796 17.8133 47.395 19.4205C47.4033 20.4902 46.5664 21.3726 45.4967 21.3726L44.9139 21.3825Z"
      fill="#AAD540"
    />
    <path
      d="M62.4937 48.2445C62.4937 47.2268 62.8068 46.2823 63.3412 45.5012C59.4131 47.0304 55.141 47.8706 50.672 47.8706C48.2325 47.8706 45.8523 47.6185 43.5537 47.1426C43.5672 47.2798 43.5745 47.4187 43.5745 47.5595V54.3815C43.5745 55.9957 44.8954 57.2846 46.5097 57.2961C48.1097 57.3072 49.4033 58.6078 49.4033 60.2105C49.5145 63.2589 49.0932 64.4994 49.9383 66.2329C53.5495 64.6893 57.0143 62.3759 59.9902 59.2773C59.989 59.0966 59.9871 58.9498 59.9862 58.8305H59.9875C60.0018 58.6724 59.9525 58.453 60.0512 58.1582C60.2189 57.6568 60.7016 57.307 61.2659 57.2959C61.4897 57.2915 61.6984 57.2273 61.8787 57.1203C62.0339 56.9253 62.2061 56.7032 62.4452 56.3832C62.4761 56.2751 62.4759 56.3639 62.4937 48.2445Z"
      fill="#8BC852"
    />
    <path
      d="M68.0897 43.2258C68.0175 43.2675 67.9447 43.3078 67.8721 43.3487C67.9387 43.3415 68.006 43.3358 68.0717 43.326C68.0763 43.2992 68.0817 43.2723 68.0863 43.2454C68.0876 43.2389 68.0886 43.2324 68.0897 43.2258Z"
      fill="#4F8980"
    />
    <path
      d="M26.7216 16.1611C26.2821 16.1887 25.9172 15.8666 25.8894 15.4271C25.7685 13.5199 24.1245 12.0718 22.2172 12.1923L21.5292 12.2358C19.4918 13.5306 17.6179 15.0598 15.9453 16.7851C15.8252 16.9089 15.7072 17.0351 15.5894 17.161V26.514L21.5053 32.2158C23.534 32.0875 25.1872 30.5392 25.4475 28.5231L26.217 22.5647C26.2651 22.1923 26.5705 21.9062 26.9454 21.8828L27.0143 21.8785C28.5779 21.7802 29.8253 20.4689 29.762 18.9035C29.6969 17.2935 28.3213 16.0603 26.7216 16.1611Z"
      fill="#AAD540"
    />
    <path
      d="M13.5898 56.6424C16.0942 59.9194 18.5019 61.7008 18.8422 62.0084L18.5096 56.7424C18.4615 55.9835 19.0379 55.3293 19.7968 55.2815L20.4699 55.2391C21.2288 55.191 21.8052 54.5371 21.7571 53.7781C21.7697 53.3487 21.4828 52.5078 22.2467 51.917C22.454 51.7566 22.7096 51.6536 22.9905 51.6337C23.7488 51.5798 24.3386 50.9592 24.2905 50.2004L24.0724 46.7502C24.0238 45.9803 23.3542 45.4314 22.5835 45.4648C21.8365 45.497 21.1979 44.9255 21.1504 44.176L20.7391 37.665C20.68 36.7297 19.8815 35.9803 18.9472 36.054C17.991 36.1294 17.1615 35.4071 17.1012 34.4534L17.0861 34.2132C17.0264 33.2684 17.744 32.4541 18.6886 32.3944L21.5045 32.2164C21.5146 32.2158 21.5242 32.2139 21.5343 32.2133C18.5406 27.6978 16.567 22.4473 15.9456 16.7893C5.33057 27.7522 4.46117 44.6862 13.5898 56.6424Z"
      fill="#8BC852"
    />
    <path
      d="M30.2836 67.9439C28.8338 68.6146 27.2008 68.9566 25.4791 68.8696C20.2274 68.6045 15.9941 64.3117 15.7993 59.0568C15.7024 56.4397 16.5918 54.0331 18.124 52.1761C18.3042 51.9576 18.1118 51.6337 17.8347 51.6919C12.8521 52.7412 9.04024 56.9673 8.62061 62.1535C12.909 67.3668 18.5618 71.4144 25.0326 73.7524C27.4783 72.6518 29.4768 70.7343 30.6789 68.346C30.8061 68.0931 30.5407 67.825 30.2836 67.9439Z"
      fill="#ECBE6B"
    />
    <path
      d="M43.2632 53.1825C43.2886 53.0418 43.411 52.9397 43.5538 52.9397C43.6968 52.9397 43.8191 53.042 43.8445 53.1825L44.6431 57.6069L49.0674 58.4055C49.3913 58.464 49.3913 58.9283 49.0674 58.9868L44.6431 59.7853L43.8445 64.2097C43.786 64.5336 43.3217 64.5336 43.2632 64.2097L42.4646 59.7853L38.0403 58.9868C37.7164 58.9283 37.7164 58.464 38.0403 58.4055L42.4646 57.6069L43.2632 53.1825Z"
      fill="#ECBE6B"
    />
    <path
      d="M8.34231 38.3737C8.36769 38.233 8.49015 38.1309 8.63295 38.1309C8.77575 38.1309 8.89821 38.2331 8.92359 38.3737L9.72218 42.798L14.1465 43.5966C14.4704 43.6551 14.4704 44.1194 14.1465 44.1779L9.72218 44.9765L8.92359 49.4008C8.86511 49.7247 8.40079 49.7247 8.34231 49.4008L7.54371 44.9765L3.11938 44.1779C2.79549 44.1194 2.79549 43.6551 3.11938 43.5966L7.54371 42.798L8.34231 38.3737Z"
      fill="#ECBE6B"
    />
    <path
      d="M56.8677 0C52.248 0 49.4022 2.60582 49.3943 2.61027C49.3943 2.61027 49.276 2.75797 49.2539 2.85609C49.0741 3.65394 48.9062 4.72328 48.9062 5.50362C48.9062 12.1337 54.4973 17.507 61.1273 17.507C63.6802 17.507 66.5207 16.2833 68.4219 14.8121C68.4645 14.7793 68.5993 14.5582 68.5993 14.5582C68.6076 14.5069 68.8723 13.4529 68.8723 12.0047C68.8723 5.37477 63.4975 0 56.8677 0Z"
      fill="#F9EF63"
    />
    <path
      d="M68.5996 14.558C66.549 16.1913 63.9521 17.168 61.1265 17.168C54.4964 17.168 49.1218 11.7932 49.1218 5.16328C49.1218 4.28705 49.2164 3.43294 49.3946 2.61015C49.3943 2.6103 49.3949 2.61 49.3946 2.61015C46.6338 4.80955 44.8633 8.20031 44.8633 12.0046C44.8633 18.6347 50.2381 24.0093 56.868 24.0093C62.5722 24.0092 67.4187 20.0087 68.5996 14.558Z"
      fill="#F4DD45"
    />
  </svg>
);

const opentabsLogo = (
  <svg
    width="70"
    height="70"
    viewBox="0 0 195 195"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M162.44 24.6204C122.191 -11.1775 60.6876 -7.55236 24.9613 32.6258C-10.7651 72.8039 -7.14722 134.431 32.9507 170.379C73.0486 206.177 134.552 202.552 170.429 162.374C206.155 122.196 202.538 60.4182 162.44 24.6204Z"
      fill="#28AF89"
    />
    <path
      d="M176.459 88.8147C178.87 110.867 172.087 133.977 155.807 151.499C126.11 183.671 75.9124 185.635 43.8039 155.728C11.6955 125.972 9.73582 75.6738 39.5831 43.501C50.5874 31.5684 64.4558 23.8651 79.078 20.24L80.7362 27.3391C67.4707 30.5111 54.8083 37.6102 44.8592 48.4855C17.876 77.7884 19.5341 123.404 48.7785 150.441C78.0228 177.479 123.547 175.817 150.531 146.514C165.304 130.503 171.484 109.508 169.223 89.4189L176.459 88.8147Z"
      fill="white"
    />
    <path
      d="M152.641 100.596C137.868 102.862 126.713 110.414 118.724 122.951C117.819 124.31 118.272 125.066 119.779 125.368C122.04 125.67 124.151 125.821 126.412 126.123C139.979 125.972 152.038 116.305 155.204 103.164C155.656 100.747 155.204 100.143 152.641 100.596Z"
      fill="white"
    />
    <path
      d="M133.347 99.0861C134.252 98.633 135.006 96.9715 135.006 95.9142C135.006 88.815 133.498 82.018 130.483 75.372C129.579 73.4084 128.222 73.2573 126.715 74.4657C124.453 76.1272 122.192 77.6377 120.233 79.6013C110.887 88.3619 107.118 104.222 113.901 115.55C115.861 114.795 117.519 111.925 119.027 110.264C123.248 105.883 127.77 102.107 133.347 99.0861Z"
      fill="white"
    />
    <path
      d="M105.76 114.04C103.8 109.961 102.896 105.279 102.896 100.748C102.896 95.0079 104.403 89.5703 107.117 85.0389C108.624 82.4712 110.433 80.0544 112.694 78.0908C114.051 76.2783 114.202 74.4657 113.297 72.3511C110.734 66.4603 107.569 61.0227 103.197 56.3403C100.785 53.9235 100.484 53.9235 98.9764 56.9444C91.4392 72.8042 90.0825 88.8151 94.7556 104.977C95.0571 105.883 95.2078 106.79 95.5093 107.545C95.9615 108.753 96.2631 109.81 96.7153 111.019C97.1675 112.378 97.469 113.889 97.9212 115.248C105.76 138.66 94.9064 157.39 88.4244 169.473C87.6707 170.984 86.0124 172.948 89.4795 173.099C94.9063 173.25 100.484 173.25 105.911 173.099C106.664 173.099 107.72 171.739 108.172 171.135C112.694 163.734 118.272 144.551 113.749 132.769C111.187 126.123 108.775 120.384 105.76 114.04Z"
      fill="white"
    />
    <path
      d="M86.7655 103.92C87.3684 104.071 88.4236 104.222 88.7251 103.769C89.0266 103.315 89.0266 102.409 88.7251 101.805C86.1625 94.5549 85.1073 87.0026 85.861 79.2992C86.0117 78.2419 85.1073 76.7315 84.2028 76.1273C79.379 72.6532 74.103 70.5386 68.3747 69.3302C66.5658 68.8771 65.6613 69.4813 65.5106 71.2938C64.9076 79.1482 65.5106 85.9453 70.1836 92.4402C74.2537 98.0289 80.1327 102.107 86.7655 103.92Z"
      fill="white"
    />
    <path
      d="M94.6051 128.238C95.2081 127.029 95.0573 125.821 94.9066 124.462C94.4544 120.383 92.7962 116.154 89.7813 113.435C82.6963 107.091 72.1443 109.055 67.019 99.5391C65.813 97.4244 65.0593 94.8566 62.9489 93.6483C61.8937 93.0441 60.6877 92.742 59.4818 92.5909C53.7535 91.8357 47.8745 92.1378 42.297 93.3462C40.1865 93.7993 39.4328 94.7056 40.3373 97.1223C44.1059 107.998 51.9446 117.362 61.8937 123.102C67.019 125.972 72.4457 128.087 78.3248 129.144C81.1889 129.446 93.0977 131.561 94.6051 128.238Z"
      fill="white"
    />
  </svg>
);

const arrow = (
  <svg
    width="16"
    height="16"
    viewBox="0 0 16 16"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M14.6666 1.33337L7.33325 8.66671"
      stroke="white"
      strokeWidth="1.33333"
      strokeLinecap="round"
      strokeLinejoin="round"
    />
    <path
      d="M14.6666 1.33337L9.99992 14.6667L7.33325 8.66671L1.33325 6.00004L14.6666 1.33337Z"
      stroke="white"
      strokeWidth="1.33333"
      strokeLinecap="round"
      strokeLinejoin="round"
    />
  </svg>
);

const DEFAULT_SECONDS_PER_TREE_SAVED = 25;
const DEFAULT_SECONDS_PER_TAB_OPENED = 1;
const STORAGE_SECONDS_PER_TAB_OPENED = "secondsPerTabOpened";
const userLevels = [
  {
    level: 1,
    trees: 5,
    title: "Ally",
    image: Ally,
  },
  {
    level: 2,
    trees: 25,
    title: "Helper",
    image: Helper,
  },
  {
    level: 3,
    trees: 75,
    title: "Apprentice",
    image: Apprentice,
  },
  {
    level: 4,
    trees: 150,
    title: "Fellow",
    image: Fellow,
  },
  {
    level: 5,
    trees: 250,
    title: "Believer",
    image: Believer,
  },
  {
    level: 6,
    trees: 500,
    title: "Supporter",
    image: Supporter,
  },
  {
    level: 7,
    trees: 750,
    title: "Collaborator",
    image: Collaborator,
  },
  {
    level: 8,
    trees: 1_000,
    title: "Ambassador",
    image: Ambassador,
  },
  {
    level: 9,
    trees: 1_500,
    title: "Advocate",
    image: Advocate,
  },
  {
    level: 10,
    trees: 2_500,
    title: "Hero",
    image: Hero,
  },
  {
    level: 11,
    trees: 5_000,
    title: "Champion",
    image: Champion,
  },
  {
    level: 12,
    trees: 10_000,
    title: "Legend",
    image: Legend,
  },
];

const tab = (
  <svg
    width="32"
    height="32"
    viewBox="0 0 32 32"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      className="svg-fill"
      d="M32 16C32 24.8367 24.8367 32 16 32C7.16333 32 0 24.8367 0 16C0 7.16333 7.16333 0 16 0C24.8367 0 32 7.16333 32 16Z"
    />
    <path d="M5.125 7.08472H26.875V23.875H5.125V7.08472Z" fill="#E6E6E6" />
    <path d="M6 13H26V23H6V13Z" fill="white" />
    <path
      d="M20.666 18H24.666V22H20.666V18Z"
      fill="#E6E6E6"
      fillOpacity="0.3"
    />
    <path
      d="M8 10C8 10.5522 7.55225 11 7 11C6.44775 11 6 10.5522 6 10C6 9.44775 6.44775 9 7 9C7.55225 9 8 9.44775 8 10Z"
      fill="#FE6A16"
    />
    <path
      d="M11 10C11 10.5522 10.5522 11 10 11C9.44775 11 9 10.5522 9 10C9 9.44775 9.44775 9 10 9C10.5522 9 11 9.44775 11 10Z"
      fill="#FFD400"
    />
    <path
      d="M14 10C14 10.5522 13.5522 11 13 11C12.4478 11 12 10.5522 12 10C12 9.44775 12.4478 9 13 9C13.5522 9 14 9.44775 14 10Z"
      fill="#09CE67"
    />
    <path d="M16 9H26V11H16V9Z" fill="white" />
  </svg>
);

const colourLogo = (
  <svg
    width="32"
    height="32"
    viewBox="0 0 32 32"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      className="svg-fill"
      d="M32 16C32 24.8367 24.8367 32 16 32C7.16333 32 0 24.8367 0 16C0 7.16333 7.16333 0 16 0C24.8367 0 32 7.16333 32 16Z"
    />
    <path
      d="M25.9534 17.254C23.1919 17.6772 21.1066 19.088 19.6131 21.4298C19.444 21.6837 19.5286 21.8248 19.8104 21.8812C20.2331 21.9377 20.6276 21.9659 21.0502 22.0223C23.5864 21.9941 25.8407 20.1883 26.4324 17.7337C26.517 17.2822 26.4325 17.1694 25.9534 17.254Z"
      fill="white"
    />
    <path
      d="M22.346 16.9719C22.515 16.8872 22.6559 16.5768 22.6559 16.3793C22.6559 15.0533 22.3741 13.7836 21.8106 12.5421C21.6415 12.1753 21.3879 12.1471 21.1061 12.3728C20.6834 12.6832 20.2607 12.9654 19.8944 13.3322C18.1473 14.9686 17.4428 17.9312 18.7109 20.0473C19.0772 19.9062 19.3872 19.3701 19.669 19.0597C20.458 18.2415 21.3033 17.5361 22.346 16.9719Z"
      fill="white"
    />
    <path
      d="M17.1893 19.765C16.823 19.0032 16.6539 18.1286 16.6539 17.2821C16.6539 16.21 16.9357 15.1942 17.4429 14.3478C17.7247 13.8681 18.0629 13.4167 18.4855 13.0499C18.7391 12.7113 18.7673 12.3728 18.5983 11.9778C18.1192 10.8774 17.5274 9.86165 16.7103 8.98699C16.2594 8.53556 16.203 8.53556 15.9212 9.09985C14.5123 12.0624 14.2587 15.0532 15.1322 18.0721C15.1886 18.2414 15.2168 18.4107 15.2731 18.5518C15.3577 18.7775 15.414 18.975 15.4986 19.2007C15.5831 19.4547 15.6395 19.7368 15.724 19.9908C17.1893 24.364 15.1604 27.8627 13.9487 30.1199C13.8078 30.402 13.4978 30.7688 14.146 30.797C15.1604 30.8252 16.203 30.8252 17.2175 30.797C17.3584 30.797 17.5556 30.5431 17.6402 30.4302C18.4855 29.0477 19.5282 25.4644 18.6828 23.2637C18.2037 22.0222 17.7529 20.9501 17.1893 19.765Z"
      fill="white"
    />
    <path
      d="M13.6385 17.8747C13.7512 17.9029 13.9484 17.9311 14.0048 17.8465C14.0611 17.7618 14.0611 17.5925 14.0048 17.4797C13.5257 16.1254 13.3285 14.7146 13.4694 13.2757C13.4976 13.0782 13.3285 12.796 13.1594 12.6832C12.2577 12.0342 11.2714 11.6392 10.2006 11.4135C9.86246 11.3288 9.69338 11.4417 9.6652 11.7803C9.55249 13.2474 9.66521 14.5171 10.5388 15.7303C11.2996 16.7743 12.3986 17.5361 13.6385 17.8747Z"
      fill="white"
    />
    <path
      d="M15.1045 22.4173C15.2172 22.1916 15.189 21.9659 15.1608 21.7119C15.0763 20.9501 14.7663 20.1601 14.2027 19.6522C12.8783 18.4672 10.9058 18.834 9.94769 17.0565C9.72226 16.6615 9.58137 16.1818 9.18686 15.9561C8.98961 15.8433 8.76417 15.7868 8.53874 15.7586C7.46793 15.6175 6.36895 15.674 5.32633 15.8997C4.93182 15.9843 4.79093 16.1536 4.96 16.6051C5.66448 18.6365 7.12979 20.3858 8.9896 21.458C9.94769 21.9941 10.9621 22.3891 12.0611 22.5866C12.5965 22.643 14.8227 23.038 15.1045 22.4173Z"
      fill="white"
    />
  </svg>
);

const cloud = (
  <svg
    width="32"
    height="32"
    viewBox="0 0 32 32"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M32 16C32 24.8367 24.8367 32 16 32C7.16333 32 0 24.8367 0 16C0 7.16333 7.16333 0 16 0C24.8367 0 32 7.16333 32 16Z"
      className="svg-fill"
    />
    <path
      d="M10.3545 8.47927C10.3545 8.7554 10.1306 8.97927 9.85449 8.97927C9.57837 8.97927 9.35449 8.7554 9.35449 8.47927C9.35449 8.20315 9.57837 7.97927 9.85449 7.97927C10.1306 7.97927 10.3545 8.20315 10.3545 8.47927Z"
      fill="#09CE67"
    />
    <path
      d="M25.7254 13.7071C25.8766 13.4047 25.9521 13.052 25.9521 12.6992C25.9521 11.3638 24.8687 10.3055 23.5584 10.3055C23.5332 10.3055 23.508 10.3055 23.4829 10.3055C22.8529 7.937 20.7112 6.19842 18.1411 6.19842C16.3521 6.19842 14.7647 7.05511 13.7317 8.36535C13.1269 8.03779 12.4466 7.86141 11.7159 7.86141C9.32222 7.86141 7.35687 9.80157 7.35687 12.2205C7.35687 12.5984 7.40726 12.9512 7.48285 13.2787C5.29073 13.6567 3.60254 15.5968 3.60254 17.915C3.60254 20.5102 5.71907 22.6268 8.31435 22.6268H23.6592C26.2545 22.6268 28.371 20.5102 28.371 17.915C28.371 16.1008 27.2876 14.4882 25.7254 13.7071Z"
      fill="white"
    />
    <path
      d="M11.8674 13.5559C12.4217 13.5559 12.8752 13.7827 13.228 14.2362L13.9587 13.4299C13.3792 12.7748 12.6737 12.4473 11.817 12.4473C11.0611 12.4473 10.4059 12.6992 9.87681 13.2284C9.34767 13.7323 9.0957 14.3874 9.0957 15.1433C9.0957 15.9244 9.34767 16.5543 9.87681 17.0583C10.4059 17.5622 11.0611 17.8142 11.8422 17.8142C12.6233 17.8142 13.3288 17.4866 13.9335 16.8315L13.2028 16.0756C12.85 16.5291 12.3713 16.7559 11.817 16.7559C11.4138 16.7559 11.0359 16.6047 10.7587 16.3276C10.4563 16.0252 10.3303 15.6473 10.3303 15.1685C10.3303 14.6898 10.4815 14.3118 10.7839 14.0095C11.0611 13.6819 11.439 13.5559 11.8674 13.5559Z"
      className="svg-fill"
    />
    <path
      d="M17.1588 12.4473C16.4029 12.4473 15.7477 12.6992 15.2186 13.2032C14.6895 13.7071 14.4375 14.3622 14.4375 15.1181C14.4375 15.874 14.6895 16.5291 15.2186 17.0331C15.7477 17.537 16.3777 17.789 17.1588 17.789C17.9399 17.789 18.5698 17.537 19.0989 17.0331C19.6281 16.5291 19.88 15.874 19.88 15.1181C19.88 14.3622 19.6281 13.7071 19.0989 13.2032C18.5698 12.6992 17.9399 12.4473 17.1588 12.4473ZM18.2674 16.3024C17.9651 16.6299 17.6123 16.7811 17.184 16.7811C16.7556 16.7811 16.3777 16.6299 16.1005 16.3024C15.7981 15.9748 15.647 15.5969 15.647 15.1181C15.647 14.6646 15.7981 14.2614 16.1005 13.9339C16.4029 13.6063 16.7556 13.4551 17.184 13.4551C17.6123 13.4551 17.9903 13.6063 18.2674 13.9339C18.5698 14.2614 18.721 14.6646 18.721 15.1181C18.721 15.5969 18.5698 15.9748 18.2674 16.3024Z"
      className="svg-fill"
    />
    <path
      d="M21.543 18.0662L22.1478 17.4362C22.3997 17.1843 22.5509 16.9827 22.6517 16.8063C22.7525 16.6551 22.7777 16.4788 22.7777 16.3024C22.7777 15.9748 22.6769 15.7229 22.4501 15.5465C22.2233 15.3701 21.9714 15.2693 21.669 15.2693C21.3667 15.2693 21.1399 15.3449 20.9383 15.4709C20.7367 15.5969 20.5604 15.7984 20.4092 16.0252L21.0139 16.378C21.2155 16.0756 21.4171 15.9244 21.6186 15.9244C21.7446 15.9244 21.8202 15.9748 21.8958 16.0504C21.9714 16.126 21.9966 16.2268 21.9966 16.3276C21.9966 16.4536 21.9462 16.5543 21.8706 16.6803C21.795 16.8063 21.6438 16.9575 21.4422 17.1843L20.4344 18.2173V18.7969H22.8533V18.1166H21.543V18.0662Z"
      className="svg-fill"
    />
  </svg>
);

const tiktokLogo = (
  <svg
    width="15"
    height="15"
    viewBox="0 0 21 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    className="social-icon"
  >
    <path d="M7.8749 19.2904C9.75378 19.2904 11.2769 17.9452 11.2769 15.8883V0.629639H15.3569C15.1281 3.4124 17.8944 6.10048 20.9452 6.03901V9.87556C18.3361 9.87556 16.1175 8.77235 15.3453 8.1601V15.8883C15.3453 19.2904 12.669 23.1482 7.8749 23.1482C3.0808 23.1482 0.462891 19.2904 0.462891 15.8883C0.462891 11.0867 5.54425 8.30193 8.90973 8.98256V12.8903C8.74043 12.8304 8.30382 12.7419 7.93193 12.7419C6.03743 12.672 4.47287 14.2086 4.47287 15.8883C4.47287 17.7672 5.99601 19.2904 7.8749 19.2904Z" />
  </svg>
);

const facebookLogo = (
  <svg
    width="15"
    height="15"
    viewBox="0 0 16 16"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    className="social-icon"
  >
    <path d="M14.6714 0.499672H1.32433C1.10558 0.499672 0.89578 0.586572 0.741096 0.741256C0.586412 0.89594 0.499512 1.10574 0.499512 1.32449V14.6716C0.499512 14.7799 0.520846 14.8871 0.562297 14.9872C0.603749 15.0873 0.664504 15.1782 0.741096 15.2548C0.817688 15.3314 0.908615 15.3922 1.00869 15.4336C1.10876 15.4751 1.21601 15.4964 1.32433 15.4964H8.50776V9.68517H6.55819V7.43566H8.50776V5.74853C8.46738 5.35243 8.51414 4.95229 8.64477 4.57618C8.7754 4.20007 8.98673 3.8571 9.26395 3.57131C9.54116 3.28552 9.87754 3.06384 10.2495 2.92182C10.6215 2.7798 11.02 2.72088 11.4171 2.74918C12.0007 2.74559 12.5841 2.77563 13.1642 2.83916V4.86372H11.972C11.0272 4.86372 10.8473 5.31362 10.8473 5.96598V7.41316H13.0968L12.8043 9.66267H10.8473V15.4964H14.6714C14.7797 15.4964 14.887 15.4751 14.9871 15.4336C15.0871 15.3922 15.1781 15.3314 15.2547 15.2548C15.3312 15.1782 15.392 15.0873 15.4335 14.9872C15.4749 14.8871 15.4962 14.7799 15.4962 14.6716V1.32449C15.4962 1.21617 15.4749 1.10892 15.4335 1.00885C15.392 0.908775 15.3312 0.817848 15.2547 0.741256C15.1781 0.664665 15.0871 0.603909 14.9871 0.562458C14.887 0.521007 14.7797 0.499672 14.6714 0.499672V0.499672Z" />
  </svg>
);

const messengerLogo = (
  <svg
    width="15"
    height="15"
    viewBox="0 0 16 16"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    className="social-icon"
  >
    <path d="M7.98084 0.499673C7.00559 0.464261 6.03325 0.626491 5.12233 0.976602C4.2114 1.32671 3.3807 1.85747 2.68021 2.53694C1.97972 3.21642 1.42392 4.03057 1.04623 4.93041C0.668545 5.83026 0.476783 6.79721 0.482482 7.77308C0.469915 8.78624 0.673405 9.79045 1.07939 10.7188C1.48538 11.6471 2.08455 12.4783 2.83697 13.1569C2.8967 13.2101 2.94534 13.2746 2.98009 13.3467C3.01483 13.4187 3.03499 13.4969 3.03942 13.5768V14.9115C3.04353 15.0099 3.07151 15.1058 3.12093 15.191C3.17035 15.2762 3.23975 15.3481 3.32313 15.4005C3.40651 15.4528 3.50139 15.4842 3.59957 15.4917C3.69776 15.4993 3.79631 15.4829 3.88674 15.4439L5.38641 14.7916C5.51447 14.7432 5.65577 14.7432 5.78382 14.7916C6.49275 14.9829 7.22406 15.0787 7.95835 15.0765C9.89136 15.0795 11.7464 14.3144 13.1153 12.9497C14.4843 11.585 15.255 9.73233 15.258 7.79933C15.261 5.86632 14.496 4.0113 13.1312 2.64235C11.7665 1.2734 9.91385 0.502656 7.98084 0.499673ZM12.4799 6.09345L10.2828 9.58769C10.2 9.71924 10.0907 9.83219 9.96203 9.9194C9.83332 10.0066 9.68792 10.0662 9.53502 10.0944C9.38212 10.1226 9.22504 10.1187 9.07369 10.0832C8.92234 10.0476 8.78002 9.98099 8.6557 9.88762L6.90108 8.57541C6.8232 8.517 6.72848 8.48543 6.63114 8.48543C6.53379 8.48543 6.43907 8.517 6.3612 8.57541L3.99172 10.375C3.92572 10.4259 3.84383 10.4518 3.76058 10.448C3.67733 10.4442 3.59811 10.4111 3.53698 10.3545C3.47584 10.2978 3.43676 10.2214 3.42666 10.1386C3.41657 10.0559 3.43611 9.9723 3.48183 9.90262L5.67885 6.40838C5.76171 6.27683 5.87094 6.16388 5.99966 6.07667C6.12837 5.98946 6.27376 5.92988 6.42666 5.9017C6.57956 5.87351 6.73665 5.87733 6.888 5.91292C7.03934 5.9485 7.18167 6.01508 7.30599 6.10845L9.06061 7.42066C9.13848 7.47907 9.2332 7.51064 9.33055 7.51064C9.42789 7.51064 9.52261 7.47907 9.60049 7.42066L11.97 5.62105C12.036 5.57016 12.1179 5.5443 12.2011 5.54806C12.2844 5.55182 12.3636 5.58496 12.4247 5.6416C12.4858 5.69824 12.5249 5.77471 12.535 5.85743C12.5451 5.94015 12.5256 6.02377 12.4799 6.09345Z" />
  </svg>
);

const whatsappLogo = (
  <svg
    width="15"
    height="15"
    viewBox="0 0 19 18"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    className="social-icon"
  >
    <path d="M14.0374 10.7835C13.8151 10.6719 12.7189 10.1319 12.5146 10.0581C12.3103 9.98338 12.1618 9.94648 12.0133 10.1697C11.8648 10.392 11.4373 10.8951 11.3068 11.0436C11.1772 11.1921 11.0467 11.2101 10.8244 11.0985C10.1674 10.8369 9.56105 10.4629 9.03247 9.99328C8.54496 9.54266 8.127 9.02219 7.79227 8.44888C7.66267 8.22568 7.77877 8.10508 7.89037 7.99438C7.99027 7.89448 8.11357 7.73428 8.22427 7.60378C8.31595 7.49112 8.39111 7.36596 8.44747 7.23208C8.47712 7.17056 8.49093 7.1026 8.48763 7.03438C8.48433 6.96616 8.46402 6.89985 8.42857 6.84148C8.37277 6.72988 7.92727 5.63278 7.74187 5.18638C7.56097 4.75258 7.37737 4.81108 7.23967 4.80388C7.11007 4.79758 6.96157 4.79578 6.81307 4.79578C6.7001 4.79893 6.58901 4.82542 6.48679 4.87359C6.38456 4.92176 6.29341 4.99057 6.21907 5.07568C5.96709 5.3143 5.76757 5.60279 5.63323 5.92277C5.49888 6.24275 5.43266 6.5872 5.43877 6.93418C5.51103 7.77499 5.82728 8.5764 6.34867 9.23998C7.30439 10.6728 8.61633 11.8325 10.1557 12.6051C10.5709 12.7835 10.9951 12.9403 11.4265 13.0749C11.8813 13.213 12.3621 13.2429 12.8305 13.1622C13.1407 13.0993 13.4345 12.9728 13.6934 12.7906C13.9522 12.6085 14.1705 12.3746 14.3344 12.1038C14.4806 11.7707 14.5256 11.402 14.464 11.0436C14.4091 10.95 14.2606 10.8951 14.0374 10.7835ZM16.2802 2.61238C14.7501 1.08269 12.7163 0.161144 10.5574 0.0193C8.39852 -0.122544 6.26164 0.524982 4.5446 1.84133C2.82756 3.15767 1.64739 5.05313 1.22379 7.17481C0.800189 9.29649 1.16204 11.4998 2.24196 13.3746L0.976562 17.9961L5.70517 16.7568C7.01301 17.4689 8.47841 17.8421 9.96757 17.8422H9.97117C11.7353 17.8413 13.4595 17.3175 14.926 16.3371C16.3926 15.3567 17.5357 13.9636 18.2108 12.3338C18.8859 10.704 19.0629 8.9107 18.7192 7.1804C18.3756 5.45011 17.5268 3.86049 16.2802 2.61237V2.61238ZM13.9105 15.2025C12.7298 15.9425 11.3646 16.3352 9.97117 16.3356H9.96757C8.63998 16.3355 7.33685 15.9783 6.19477 15.3015L5.92387 15.1413L3.11766 15.8775L3.86646 13.1415L3.69096 12.8607C2.91205 11.6185 2.51897 10.1733 2.56141 8.70777C2.60385 7.24222 3.07991 5.82217 3.92939 4.62718C4.77888 3.43219 5.96363 2.51594 7.33385 1.99427C8.70406 1.4726 10.1982 1.36896 11.6273 1.69644C13.0564 2.02392 14.3563 2.76783 15.3627 3.83408C16.369 4.90033 17.0366 6.24105 17.281 7.6867C17.5254 9.13235 17.3356 10.618 16.7356 11.9558C16.1357 13.2936 15.1525 14.4234 13.9105 15.2025Z" />
  </svg>
);

const twitterLogo = (
  <svg
    width="15"
    height="15"
    viewBox="0 0 16 14"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    className="social-icon"
  >
    <path d="M15.4904 2.34905C14.9268 2.59357 14.3307 2.75521 13.7208 2.82894C14.3643 2.44452 14.8465 1.83975 15.078 1.12682C14.4733 1.48678 13.8113 1.7404 13.1209 1.87665C12.6594 1.37619 12.0449 1.04306 11.3736 0.929497C10.7024 0.815938 10.0125 0.928377 9.41205 1.24918C8.81161 1.56998 8.33464 2.081 8.05593 2.7021C7.77722 3.32319 7.71254 4.01923 7.87204 4.68104C6.64938 4.6192 5.4534 4.30084 4.3618 3.74664C3.2702 3.19244 2.30739 2.4148 1.53592 1.46424C1.26534 1.93676 1.12315 2.47189 1.12351 3.0164C1.12256 3.52208 1.24665 4.02015 1.48475 4.46626C1.72285 4.91237 2.06757 5.29269 2.48822 5.57334C1.99931 5.56004 1.52084 5.42885 1.09352 5.19093V5.22842C1.09719 5.93693 1.34546 6.62243 1.79635 7.16897C2.24725 7.71551 2.87307 8.08953 3.56798 8.22776C3.30048 8.30917 3.02276 8.35209 2.74316 8.35524C2.54962 8.35298 2.35656 8.33542 2.16579 8.30275C2.36368 8.91222 2.74663 9.44486 3.26135 9.82653C3.77608 10.2082 4.39698 10.4199 5.03766 10.4323C3.9558 11.2835 2.6201 11.7481 1.24349 11.752C0.992845 11.7528 0.7424 11.7378 0.493652 11.707C1.89917 12.6145 3.5371 13.0962 5.21012 13.0942C6.36464 13.1062 7.50997 12.888 8.57922 12.4524C9.64847 12.0168 10.6202 11.3725 11.4377 10.5571C12.2551 9.74177 12.9019 8.77169 13.3403 7.70356C13.7786 6.63543 13.9997 5.49066 13.9907 4.33611C13.9907 4.20864 13.9907 4.07367 13.9907 3.9387C14.5791 3.4999 15.0866 2.96198 15.4904 2.34905Z" />
  </svg>
);
const linkedinLogo = (
  <svg
    width="15"
    height="15"
    viewBox="0 0 25 25"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    className="social-icon"
  >
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M2.0303 0.925903C1.09237 0.925903 0.332031 1.68624 0.332031 2.62417V23.1535C0.332031 24.0914 1.09237 24.8518 2.0303 24.8518H22.5597C23.4976 24.8518 24.258 24.0914 24.258 23.1535V2.62417C24.258 1.68624 23.4976 0.925903 22.5597 0.925903H2.0303ZM5.7023 8.35611C6.84861 8.35611 7.77787 7.42685 7.77787 6.28054C7.77787 5.13424 6.84861 4.20497 5.7023 4.20497C4.556 4.20497 3.62673 5.13424 3.62673 6.28054C3.62673 7.42685 4.556 8.35611 5.7023 8.35611ZM9.67874 9.89001H13.1186V11.4658C13.1186 11.4658 14.0521 9.59892 16.5919 9.59892C18.8575 9.59892 20.7343 10.715 20.7343 14.117V21.2907H17.1696V14.9863C17.1696 12.9794 16.0982 12.7587 15.2818 12.7587C13.5875 12.7587 13.2974 14.2202 13.2974 15.248V21.2907H9.67874V9.89001ZM7.51163 9.89003H3.89298V21.2908H7.51163V9.89003Z"
    />
  </svg>
);
const copy = (
  <svg
    width="16"
    height="16"
    viewBox="0 0 16 16"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M13.3333 6H7.33333C6.59695 6 6 6.59695 6 7.33333V13.3333C6 14.0697 6.59695 14.6667 7.33333 14.6667H13.3333C14.0697 14.6667 14.6667 14.0697 14.6667 13.3333V7.33333C14.6667 6.59695 14.0697 6 13.3333 6Z"
      stroke="white"
      strokeWidth="1.33333"
      strokeLinecap="round"
      strokeLinejoin="round"
    />
    <path
      d="M3.33325 9.99998H2.66659C2.31296 9.99998 1.97382 9.8595 1.72378 9.60946C1.47373 9.35941 1.33325 9.02027 1.33325 8.66665V2.66665C1.33325 2.31302 1.47373 1.97389 1.72378 1.72384C1.97382 1.47379 2.31296 1.33331 2.66659 1.33331H8.66659C9.02021 1.33331 9.35935 1.47379 9.60939 1.72384C9.85944 1.97389 9.99992 2.31302 9.99992 2.66665V3.33331"
      stroke="white"
      strokeWidth="1.33333"
      strokeLinecap="round"
      strokeLinejoin="round"
    />
  </svg>
);
const socialHandles = [
  { name: "Facebook", image: facebookLogo },
  { name: "Twitter", image: twitterLogo },
  { name: "LinkedIn", image: linkedinLogo },
  { name: "Messenger", image: messengerLogo },
  { name: "WhatsApp", image: whatsappLogo },
];

const REFERRAL_LINK_HEADER = "https://app.opentabs.org/r/";
const EventPropertyInviteSentPersonalCounterFacebook =
  "PersonalCounter_Facebook";
const EventPropertyInviteSentPersonalCounterTwitter = "PersonalCounter_Twitter";
const EventPropertyInviteSentPersonalCounterLinkedIn =
  "PersonalCounter_LinkedIn";
const EventPropertyInviteSentPersonalCounterMessenger =
  "PersonalCounter_Messenger";
const EventPropertyInviteSentPersonalCounterWhatsApp =
  "PersonalCounter_WhatsApp";
const EventPropertyInviteSentUniversalCounterFacebook =
  "UniversalCounter_Facebook";
const EventPropertyInviteSentUniversalCounterTwitter =
  "UniversalCounter_Twitter";
const EventPropertyInviteSentUniversalCounterLinkedIn =
  "UniversalCounter_LinkedIn";
const EventPropertyInviteSentUniversalCounterMessenger =
  "UniversalCounter_Messenger";
const EventPropertyInviteSentUniversalCounterWhatsApp =
  "UniversalCounter_WhatsApp";

const COMMUNITY_DISCORD_LINK = "https://discord.com/invite/RWh4C6wZDh";
const STORAGE_CUMMULATIVE_TABS_OPENED = "cummulativeTabsOpened";
const GLOBAL_TREES_SAVED_TILL_CHANGED_DATE = 8_212_000;
const CHROME = "chrome";
const FIREFOX = "firefox";
const SAFARI = "safari";
const EDGE = "edge";
const SAVING_TREES_RATE_CHANGED_DATE = new Date(2022, 4, 3, 0, 0, 0);
const CO2_STORED_PER_TREE = 0.11;
const STORAGE_RECENT_DAY_TABS_OPENED = "lastTabDay.count";
const STORAGE_TREES_SAVED = "treesSaved";
const SUB_DOMAIN = "http://localhost:5001";
// const SUB_DOMAIN = "https://app.opentabs.org";
const ACHIEVEMENT_LINK_QUERY = "?level=";

const browsers = {
  [CHROME]: {
    webstoreLink:
      "https://chrome.google.com/webstore/detail/opentabs/igeeighenacaciapkehcacnojlegbnpa",
  },
  [FIREFOX]: {
    webstoreLink: "https://addons.mozilla.org/en-US/firefox/addon/opentabs",
  },
  [SAFARI]: {
    webstoreLink:
      "https://apps.apple.com/es/app/opentabs/id1607542045?l=en&mt=12",
  },
  [EDGE]: {
    webstoreLink:
      "https://microsoftedge.microsoft.com/addons/detail/opentabs/oaljniopiimfdkdoppegcoikkaaingln",
  },
};
const RATE_US_LINK = browsers[browserType].webstoreLink;

const Counter = ({ togglePopup, header, popup }) => {
  const [isPopupVisible, setIsPopupVisible] = React.useState(false);

  const handleClick = () => {
    setIsPopupVisible(!isPopupVisible);
  };
  const handleClose = () => {
    setIsPopupVisible(false);
  };

  return (
    <>
      <div className="app-dash metric-item" onClick={handleClick}>
        {header}
      </div>
      {isPopupVisible && (
        <>
          <div className="app-wrapper nipple nipple-top-right">{popup}</div>
        </>
      )}
    </>
  );
};

const ViewHeader = ({
  header,
  description,
  adsWhitelistMessage,
  adsBlocked,
}) => (
  <header>
    <h3 className="general-header">{header}</h3>
    <p className="description">{description}</p>
  </header>
);

const counterAppreciationMessage = (type, handleSignin, loggedIn) =>
  type === "global" ? (
    <>
      This is the power of the many!{" "}
      <a
        href={COMMUNITY_DISCORD_LINK}
        target="_blank"
        className="counterAppreciationMessage"
        rel="noopener noreferrer"
      >
        Join
      </a>{" "}
      our discord to engage with our community.
    </>
  ) : (
    <>
      {loggedIn ? (
        <>
          Your tabs make a difference Thank you for opening tabs with purpose.
        </>
      ) : (
        <>
          Small actions add up.{" "}
          <span className="counterAppreciationMessage" onClick={handleSignin}>
            Sign in
          </span>{" "}
          to keep track of your impact across devices
        </>
      )}
    </>
  );

const Heading = ({ type, handleSignin, loggedIn }) => (
  <div className="pb-6">
    <p className="text popup-text-colour">
      {counterAppreciationMessage(type, handleSignin, loggedIn)}
    </p>
  </div>
);

const Statistic = ({ title, image, value }) => {
  return (
    <div className="pt-14">
      <div className="flex-container">
        {image}
        <p className="numbers-heading">{value ? addCommas(value) : value}</p>
      </div>
      <div>
        <p className="text counter-popup-text">{title}</p>
      </div>
      <hr className="grey-horizontal" />
    </div>
  );
};

const Statistics = ({ dataList }) =>
  dataList.map((element, index) => {
    if (
      element.title === "Tons of CO2 eq. you have stored" &&
      element.value === String(0)
    )
      return null;
    return (
      <Statistic
        title={element.title}
        image={element.image}
        value={element.value}
        key={index}
      />
    );
  });

const ShareYourImpact = ({ type }) => (
  <div className="flex-container-space mt-16">
    <p className="text-small primary-text-colour fw-600">Share your impact</p>
    <ShareOnSocial type={type} />
  </div>
);

// TODO: Set dispatch for trees saved, current badge

const getIndividualPropertyName = (socialHandle) => {
  switch (socialHandle) {
    case "Facebook":
      return EventPropertyInviteSentPersonalCounterFacebook;
    case "Twitter":
      return EventPropertyInviteSentPersonalCounterTwitter;
    case "LinkedIn":
      return EventPropertyInviteSentPersonalCounterLinkedIn;
    case "Messenger":
      return EventPropertyInviteSentPersonalCounterMessenger;
    case "WhatsApp":
      return EventPropertyInviteSentPersonalCounterWhatsApp;
  }
};

const getGlobalPropertyName = (socialHandle) => {
  switch (socialHandle) {
    case "Facebook":
      return EventPropertyInviteSentUniversalCounterFacebook;
    case "Twitter":
      return EventPropertyInviteSentUniversalCounterTwitter;
    case "LinkedIn":
      return EventPropertyInviteSentUniversalCounterLinkedIn;
    case "Messenger":
      return EventPropertyInviteSentUniversalCounterMessenger;
    case "WhatsApp":
      return EventPropertyInviteSentUniversalCounterWhatsApp;
  }
};

const ShareOnSocial = ({
  link: badgeLink,
  type,
  badgeName,
  numberOfTreesSaved,
  showCopyButton,
  eventProperty,
}) => {
  const id = "12345",
    treesSaved = 43428782;
  const formattedTreesSaved = addCommas(NumberFloor(treesSaved));

  let INVITE_MESSAGE, TWITTER_INVITE_MESSAGE, link;

  INVITE_MESSAGE =
    type === "achievement" || type === "achievement_notification"
      ? `I've achieved the ${badgeName} Badge for saving ${numberOfTreesSaved} trees with OpenTabs, a browser extension that saves a tree for every 10 tabs you open. It's an easy (and free) way to help the environment! 🌳✨`
      : `Hi there 😊 I've saved ${formattedTreesSaved} trees with OpenTabs, and I think you should too! It's a browser extension that saves a tree for every 10 tabs you open, so it's an easy (and free) way to help the environment. Give it a try, they're currently saving 10 trees for every new person that joins: `;
  TWITTER_INVITE_MESSAGE =
    type === "achievement" || type === "achievement_notification"
      ? INVITE_MESSAGE
      : `I've saved ${formattedTreesSaved} trees with OpenTabs! It's a browser extension that saves a tree for every 10 tabs you open, so it's an easy (and free) way to help the environment. Give it a try, they're currently saving 10 trees for every new person that joins:`;
  link =
    type === "achievement" || type === "achievement_notification"
      ? badgeLink
      : `${REFERRAL_LINK_HEADER}${id}/`;

  const buttonRef = React.useRef(null);
  const copyButtonClickHandler = () => {
    copyValueToClipboard(link);
    buttonRef.current.querySelector("span").innerText = "Copied";
  };

  const getSharingLink = (socialHandle) => {
    switch (socialHandle) {
      case "Facebook": {
        return `https://www.facebook.com/sharer.php?u=${link}`;
      }
      case "Twitter": {
        return `http://twitter.com/share?text=${TWITTER_INVITE_MESSAGE}&url=${link}`;
      }
      case "LinkedIn": {
        return `https://www.linkedin.com/sharing/share-offsite/?url=${link}`;
      }
      case "Messenger": {
        return `https://www.messenger.com/t/`;
      }
      case "WhatsApp": {
        return `https://web.whatsapp.com/send?text=${INVITE_MESSAGE} ${link}`;
      }
      default: {
        return link;
      }
    }
  };

  const socialInviteHandler = (socialHandle) => {
    const eventProperty = ((type) => {
      switch (type) {
        case "individual":
          return getIndividualPropertyName(socialHandle);
        case "global":
          return getGlobalPropertyName(socialHandle);
      }
    })(type);
  };

  return (
    <>
      {socialHandles.map((element, index) => (
        <a
          href={getSharingLink(element.name)}
          target="_blank"
          rel="noopener noreferrer"
          key={index}
          onClick={() => socialInviteHandler(element.name)}
        >
          <span key={index}>{element.image}</span>
        </a>
      ))}
      {showCopyButton === true && (
        <button
          className="button small-button button-primary image-button"
          onClick={copyButtonClickHandler}
          ref={buttonRef}
        >
          {copy}
          <span>Copy</span>
        </button>
      )}
    </>
  );
};

const CounterPopup = (props) => {
  const storageUserProfileInString =
    localStorage.storageUserProfile || localStorage.loggedInData;
  const loggedIn = !!storageUserProfileInString;
  const handleSignin = () => {};
  return (
    <div className="app counter-popup">
      <Heading
        type={props.type}
        handleSignin={handleSignin}
        loggedIn={loggedIn}
      />
      <Statistics dataList={props.dataList} />
      <ShareYourImpact type={props.type} />
    </div>
  );
};

const GlobalCounter = () => {
  const globalCounterRef = React.useRef(null);

  const [treesSaved, setTreesSaved] = React.useState(getTotalTreesSaved());
  const [tabsOpened, setTabsOpened] = React.useState(
    Math.ceil(Date.now() / 1000000)
  );
  const secondsPerTabOpened =
    getLocalStorage(STORAGE_SECONDS_PER_TAB_OPENED) ||
    DEFAULT_SECONDS_PER_TAB_OPENED;

  React.useEffect(() => {
    const treeIncrementInterval = setInterval(() => {
      setTreesSaved((prevValue) => prevValue + 1);
    }, DEFAULT_SECONDS_PER_TREE_SAVED * 1000);
    return () => {
      clearInterval(treeIncrementInterval);
    };
  }, []);

  React.useEffect(() => {
    const tabIncrementInterval = setInterval(() => {
      setTabsOpened((prevValue) => prevValue + 1);
    }, secondsPerTabOpened * 1000);
    return () => {
      clearInterval(tabIncrementInterval);
    };
  }, []);

  const counterDataList = [
    { title: "Trees we have saved", image: colourLogo, value: treesSaved },
    {
      title: "Tons of CO2 eq. we have stored",
      image: cloud,
      value: addCommas(treesToCO2Stored(treesSaved)),
    },
  ];

  const CounterHeader = () => (
    <>
      <span>{addCommas(treesSaved)}</span> {globe}
    </>
  );

  return (
    <div className="app-container counter" ref={globalCounterRef}>
      <Counter
        togglePopup={() => {}}
        header={<CounterHeader />}
        popup={<CounterPopup dataList={counterDataList} type="global" />}
      />
    </div>
  );
};

const Separator = () => <div className="horizontal-separator">Or</div>;
const ShareOnSocialHandles = () => (
  <div>
    <h4 className="sub-header">Share on social</h4>
    <p className="sub-description">
      Rack up referrals by sharing your personal referral link to your network:
    </p>
    <div className="flex-container-space width-60 large-icon">
      <ShareOnSocial
        type="giftTrees"
        showCopyButton={true}
        //eventProperty={EventPropertyInviteSentReferralsCopyLink2}
      />
    </div>
  </div>
);

const setUserName = (obj) => {
  localStorage.storageUserProfile.name = obj.value;
};

const YourReferralCount = ({ count = 0 } = {}) => (
  <ColouredCounter text="Your Referral Count" counter={count} />
);

const TreesSavedByReferrals = ({ treesSaved }) => (
  <TransparentCounter text="Trees saved by Referrals" counter={treesSaved} />
);

const ShareYourLink = ({ link, hideMessage = false } = {}) => {
  const inputRef = React.useRef(null);
  const buttonRef = React.useRef(null);

  const copyButtonClickHandler = () => {
    copyToClipboard(inputRef);
    buttonRef.current.querySelector("span").innerText = "Copied";
  };

  return (
    <div className="highlight-background">
      {hideMessage === false && (
        <>
          <h4 className="sub-header">Share your link</h4>
          <p className="sub-description">
            Rack up referrals by sharing your personal referral link with
            others:
          </p>
        </>
      )}
      <div className="flex-container">
        <input
          className="input-box link-input"
          type="text"
          readOnly
          value={link || DEFAULT_REFERRAL_LINK}
          ref={inputRef}
        />
        <button
          className="button button-primary image-button"
          onClick={copyButtonClickHandler}
          ref={buttonRef}
        >
          {copy}
          <span>Copy Link</span>
        </button>
      </div>
    </div>
  );
};

const GiftTrees = () => {
  const formRef = React.useRef(null);
  const nameFormRef = React.useRef(null);

  const [treesSavedByReferrals, setTreesSavedByReferrals] = React.useState(0);
  const [showNameFrame, setShowNameFrame] = React.useState(false);
  const [enteredEmails, setEnteredEmails] = React.useState("");
  const [enteredText, setEnteredText] = React.useState("");
  const [referralList, setReferralList] = React.useState([]);
  const [user, setUser] = React.useState({});

  const fetchUser = async () => {
    if (localStorage.storageUserProfile || localStorage.loggedInData) {
      const storageUserProfile = localStorage.storageUserProfile
        ? JSON.parse(localStorage.storageUserProfile)
        : JSON.parse(localStorage.loggedInData).user;
      const response = await fetchQuery({
        endpoint: API.user.getUser,
        parameters: {
          userId: localStorage.storageUserProfile
            ? storageUserProfile.id
            : storageUserProfile._id,
        },
      });
      setUser(response.user);
      if (response?.user.referralsMade?.length) {
        setReferralList(response.user.referralsMade);
      }
    }
  };

  React.useEffect(() => {
    fetchUser();
  }, []);

  React.useEffect(() => {
    fetchUserReferrals();
  }, [referralList]);

  const fetchUserReferrals = async () => {
    const fetchedUserReferrals = await getUserReferrals(referralList);
    setTreesSavedByReferrals(
      NumberFloor(sumOfTreesInList(fetchedUserReferrals))
    );
  };

  const referralCount = addCommas(getReferralCount(referralList));

  const referralLink = user?._id
    ? `${REFERRAL_LINK_HEADER}${user?._id}/`
    : DEFAULT_REFERRAL_LINK;
  const userName = user?.name
    ? user?.name
    : localStorage.storageUserProfile
    ? JSON.parse(localStorage.storageUserProfile).name
    : "";
  const userTreesSaved = NumberFloor(user?.treesSaved);

  console.log(validUserName(userName));
  const sendInvite = async (event) => {
    event.preventDefault();
    const form = formRef.current;
    const emailInput = form.querySelector("input[type=text]");
    const textArea = form.querySelector("textarea");
    const button = form.querySelector("button[type=submit]");
    const emails = getEmailsFromString(emailInput.value);
    if (validUserName(userName)) {
      button.setAttribute("disabled", true);
      const promises = emails.map(async (email) => {
        await fetchQuery({
          endpoint: API.user.sendEmailInvite,
          parameters: {
            email: email,
            content: textArea.value,
            link: referralLink,
          },
        });
      });
      await Promise.all(promises);
      button.removeAttribute("disabled");
      button.querySelector("span").innerText = "Sent";
      emailInput.value = "";
      emailInput.focus();
    } else {
      setEnteredEmails(emails);
      setEnteredText(textArea.value);
      setShowNameFrame(true);
    }
  };

  const saveNameAndSendInvite = async (event) => {
    event.preventDefault();
    const newName = nameFormRef.current.querySelector("input[type=text]").value;
    // setUserName({
    //   value: newName,
    // });
    const button = nameFormRef.current.querySelector("button");
    button.setAttribute("disabled", true);
    const promises = enteredEmails.map(
      async (email) =>
        await fetchQuery({
          endpoint: API.user.sendEmailInvite,
          parameters: {
            email: email,
            content: enteredText,
            link: referralLink,
          },
        })
    );
    await Promise.all(promises);
    button.querySelector("span").innerText = "Invite Sent";
    nameFormRef.current
      .querySelector("input[type=text]")
      .classList.add(hiddenClassName);
    revisedNameOnce?.value === false &&
      updateMiscellaneousAction(revisedNameOnce);
  };

  const INVITE_MESSAGE = `Hey, ${
    userTreesSaved === 0
      ? `I'm saving trees`
      : userTreesSaved === 1
      ? `I've saved a tree`
      : `I've saved ${addCommas(userTreesSaved)} trees`
  } with OpenTabs, and I think you should too! It's a browser extension that saves a tree for every 10 tabs you open, so it's an easy (and free) way to help the environment. Give it a try, they're currently saving 10 trees for every new person that joins:`;

  const ShareOnEmail = () => (
    <div>
      <h4 className="sub-header">Share via email</h4>
      <p className="sub-description">
        Invite people to join OpenTabs by entering in their e-mails. (We'll
        automatically add your referral link.)
      </p>
      <form ref={formRef} onSubmit={sendInvite}>
        <div className="flex-container">
          <input
            className="input-box flex-auto mt-8 mr-8 cloudsponge-contacts"
            type="text"
            placeholder="To: (enter contact's email)"
            required
          />
          {/* {process.env.BUILD_TARGET !== "firefox" && (
						<button
							className="button button-primary text-small cloudsponge-launch"
							type="button"
						>
							Add from Contacts
						</button>
					)} */}
        </div>
        <p className="text-small mt-8">Separate multiple emails with commas</p>
        <textarea
          className="input-box text-area width-100 mt-16"
          rows="4"
          defaultValue={`${INVITE_MESSAGE}`}
        ></textarea>
        <button
          type="submit"
          className="button button-primary image-button width-45 mt-16"
        >
          {arrow}
          <span>Send the invite</span>
        </button>
      </form>
    </div>
  );

  const NameFrame = () => (
    <>
      <button
        className="sub-header icon-wrapper back-icon"
        onClick={() => setShowNameFrame(false)}
      >
        {angle}
      </button>
      <span className="sub-header">Share via email</span>
      <p className="sub-description">
        Enter your name so your friends recognize you. Email invites are 83%
        more likely to be accepted if sent with your name.
      </p>
      <form ref={nameFormRef} onSubmit={saveNameAndSendInvite}>
        <input
          className="input-box width-100 mt-8"
          type="text"
          placeholder="Your Name"
          autoComplete="true"
          required
        />
        <button
          type="submit"
          className="button button-primary image-button width-45 mt-16"
        >
          {arrow}
          <span>Send the invite</span>
        </button>
      </form>
    </>
  );

  const GiftTreesFrame = () => (
    <>
      <ViewHeader
        header="Gift Trees"
        description="Invite your friends to OpenTabs and we'll save 5 trees for them. We'll also save another 5 trees for you too, just so you don't feel left out. There's no limit, so if you have lot of friends, invite them all. 😏"
      />
      <div className="flex-container-space">
        <YourReferralCount count={referralCount} />
        <div className="popup-colour">
          <TreesSavedByReferrals
            treesSaved={addCommas(treesSavedByReferrals)}
          />
        </div>
      </div>
      <div className="mb-20">
        <ShareYourLink link={referralLink} />
      </div>
      <Separator />
      <ShareOnEmail />
      <Separator />
      <ShareOnSocialHandles />
    </>
  );

  return showNameFrame ? <NameFrame /> : <GiftTreesFrame />;
};

const settingsViewAwards = "Awards";
const settingsViewGiftTrees = "Gift Trees";
const settingsViewCommunity = "Community";
const settingsViewRateUs = "Rate Us";
const settingsViewMyAccount = "My Account";
const settingsViewAboutUs = "About Us";

const settingsNavList = [
  settingsViewAwards,
  settingsViewGiftTrees,
  settingsViewMyAccount,
  settingsViewAboutUs,
];

const SettingsView = (props) => (
  <div className="view-container">
    <div className="view">{props.children}</div>
  </div>
);

const LockedBadge = ({ image, title, numberOfTrees }) => (
  <div className="badge text-small grayscale">
    {image}
    <p className="fw-600">{title}</p>
    <p>{`Save ${addCommas(numberOfTrees)} Trees`}</p>
  </div>
);

const UnlockedBadge = ({ image, title, numberOfTrees }) => (
  <div className="badge text-small">
    {image}
    <p className="fw-600">{title}</p>
    <p>
      You've saved
      <span className="active text-small">
        {` ${addCommas(numberOfTrees)} Trees`}
      </span>
    </p>
  </div>
);

const UnlockedBadges = ({ currentLevel }) => {
  const unlockedUserLevels = userLevels.filter(
    (userLevel) => userLevel.level < currentLevel
  );

  return unlockedUserLevels.length > 0 ? (
    <div className="badges-container">
      {unlockedUserLevels.map((unlockedLevel, index) => (
        <UnlockedBadge
          image={unlockedLevel.image}
          title={unlockedLevel.title}
          numberOfTrees={unlockedLevel.trees}
          key={index}
        />
      ))}
    </div>
  ) : null;
};
const LockedBadges = ({ currentLevel }) => {
  const lockedUserLevels = userLevels.filter(
    (userLevel) => userLevel.level > currentLevel
  );

  return (
    <div className="badges-container">
      {currentLevel > 0 && lockedUserLevels.length > 0 ? (
        <p className="pt-24 text">
          You're doing amazing, sweetie! 😌 Here are the milestones you have
          ahead:
        </p>
      ) : null}
      {lockedUserLevels.map((lockedLevel, index) => (
        <LockedBadge
          image={lockedLevel.image}
          title={lockedLevel.title}
          numberOfTrees={lockedLevel.trees}
          key={index}
        />
      ))}
    </div>
  );
};

const AwardHighlight = ({ link, activeLevel }) =>
  activeLevel ? (
    <div className="highlight-background award-highight">
      <span className="float-left active-award">{activeLevel.image}</span>
      <h4 className="sub-header">{`You're ${
        isVowel(activeLevel.title) ? "an" : "a"
      }  ${activeLevel.title}`}</h4>
      <p className="sub-description">
        {`Congratulations! You have won our ${
          activeLevel.title
        } Badge for saving 
				${addCommas(activeLevel.trees)} trees with OpenTabs.`}
      </p>
      <div className="flex-container-space pb-4 width-70">
        <p className="primary-text-colour text-small fw-600">
          Share your achievement
        </p>
        <ShareOnSocial
          type="achievement"
          badgeName={activeLevel.title}
          numberOfTreesSaved={activeLevel.trees}
          link={link}
        />
      </div>
    </div>
  ) : null;

const Awards = () => {
  // TODO: move this data up, cause its repititive
  const storageUserProfile = localStorage.storageUserProfile
    ? JSON.parse(localStorage.storageUserProfile)
    : {};
  const { id, treesSaved } = storageUserProfile;
  const userLevelObject = getUserLevelObject(treesSaved);
  const currentLevel = userLevelObject?.level || 0;
  const achievementLink = id
    ? `${ACHIEVEMENT_LINK_HEADER}${id}${ACHIEVEMENT_LINK_QUERY}${currentLevel}`
    : DEFAULT_ACHIEVEMENT_LINK;

  return (
    <>
      <ViewHeader
        header="Awards"
        description="Win impact badges for every milestone you reach. The more trees you save, the more bragging rights you´ll have. 😉"
      />
      <AwardHighlight link={achievementLink} activeLevel={userLevelObject} />
      <UnlockedBadges currentLevel={currentLevel} />
      <LockedBadges currentLevel={currentLevel} />
    </>
  );
};

const Navbar = (props) => (
  <nav className="nav">
    <div className="nav-list">
      {settingsNavList
        .filter(
          (navItem) =>
            // process.env.BUILD_TARGET === "firefox"
            // navItem !== settingsViewImpactUpgrade
            navItem !== null
        )
        .map((navItem, index) => (
          <div
            key={index}
            onClick={props.onChangeView}
            className={
              props.activeNav === navItem
                ? "nav-item pr-29 active"
                : "nav-item pr-29"
            }
          >
            {navItem}
          </div>
        ))}
    </div>
  </nav>
);

const redirectToDiscord = () => window.open(COMMUNITY_DISCORD_LINK, "_blank");
const redirectToRateUs = () => window.open(RATE_US_LINK, "_blank");

const ShowBookmarksLink =
  "https://www.notion.so/opentabs/Why-Is-My-Bookmarks-Bar-Missing-2a93b78006474f8c950847dd98de9b8b";
const FinancialReportsLink = "https://opentabs.org/financials";
const WebsiteLink = "https://opentabs.org";
const WebsiteAboutLink = "https://opentabs.org/about";
const WebsiteTermsLink = "https://opentabs.org/terms";
const ShopLink = "https://shop.opentabs.org";
const PrivacyPolicyLink = "https://opentabs.org/privacy";
const FAQsLink =
  "https://opentabs.notion.site/FAQs-56d96d07bcee42e5b0eb135b4fd71619";
const CareersLink =
  "https://opentabs.notion.site/Work-at-OpenTabs-2eaf1af25132460399f8d5a857b6f270";
const ContactUsLink = "https://opentabs.contactin.bio";

const aboutUsAnchorList = [
  { name: "Show Bookmarks", link: ShowBookmarksLink },
  // { name: "Financial Reports", link: FinancialReportsLink },
  { name: "About Us", link: WebsiteAboutLink },
  // { name: "Shop", link: ShopLink },
  { name: "Privacy Policy", link: PrivacyPolicyLink },
  { name: "Terms of Service", link: WebsiteTermsLink },
  { name: "FAQs", link: FAQsLink },
  // { name: "Careers", link: CareersLink },
  { name: "Contact Us", link: ContactUsLink },
];

const Links = () => (
  <>
    {aboutUsAnchorList.map((anchor, index) => (
      <a
        className="link"
        href={anchor.link}
        target="_top"
        rel="noopener noreferrer"
        key={index}
      >
        {anchor.name}
      </a>
    ))}
  </>
);
const opentabsFullLogo = (
  <svg
    width="205"
    height="52"
    viewBox="0 0 205 52"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M20.7809 25.3768C20.7809 28.7337 19.7419 31.4912 17.7037 33.6892C15.6656 35.8872 13.108 37.0061 10.1107 37.0061C7.23335 37.0061 4.83556 36.0071 2.87736 33.9689C0.959119 31.9308 0 29.3732 0 26.256C0 22.8991 1.03905 20.1416 3.07717 17.9437C5.1153 15.7457 7.67295 14.6267 10.6702 14.6267C13.5476 14.6267 15.9454 15.6258 17.9036 17.6639C19.8218 19.6621 20.7809 22.2197 20.7809 25.3768ZM16.305 25.8164C16.305 23.5385 15.7056 21.7002 14.5466 20.2615C13.3877 18.8628 11.949 18.1435 10.2306 18.1435C8.63207 18.1435 7.27332 18.8628 6.19431 20.3015C5.07534 21.7402 4.51585 23.5385 4.51585 25.6965C4.51585 27.9744 5.1153 29.8128 6.27424 31.2115C7.43317 32.6502 8.87185 33.3295 10.5903 33.3295C12.1888 33.3295 13.5476 32.6102 14.6266 31.1715C15.7455 29.8128 16.305 28.0144 16.305 25.8164Z"
      fill="#28AF89"
    />
    <path
      d="M39.6435 27.9743C39.6435 30.3321 38.9641 32.4102 37.6053 34.2086C36.2466 36.0069 34.4083 36.8861 32.0504 36.8861C30.2921 36.8861 29.0932 36.5264 28.4538 35.7671H28.2539C28.2539 38.4447 28.2939 41.1222 28.3738 43.8797H23.9379C24.1377 40.7625 24.2176 37.1659 24.2176 33.0496C24.2176 27.7745 23.9379 23.7782 23.3784 20.9807L27.5746 20.5411L27.8143 21.9398H28.0941C29.253 20.8608 30.8516 20.3413 32.8497 20.3413C34.9278 20.3413 36.6063 21.1006 37.8052 22.6192C39.0041 24.0979 39.6435 25.8962 39.6435 27.9743ZM35.2875 28.3739C35.2875 27.0152 34.9278 25.8163 34.2484 24.8172C33.5691 23.8181 32.6099 23.3386 31.411 23.3386C29.8924 23.3386 28.8134 23.7782 28.0941 24.6573C28.2539 27.7345 28.3339 30.5319 28.3339 33.0896C29.0132 33.6091 29.8924 33.8889 31.0114 33.8889C32.4501 33.8889 33.5291 33.3693 34.2484 32.2903C34.9278 31.2113 35.2875 29.8925 35.2875 28.3739Z"
      fill="#28AF89"
    />
    <path
      d="M56.7877 26.9754C56.7877 27.5349 56.7478 28.2542 56.7078 29.1334L46.1975 29.2933C46.3573 30.5321 46.8768 31.5312 47.796 32.3704C48.7151 33.1697 49.8741 33.6093 51.3527 33.6093C52.9912 33.6093 54.7096 33.3695 56.5479 32.89L56.2282 36.0471C54.7096 36.6065 52.8713 36.8463 50.6334 36.8463C47.836 36.8463 45.6779 36.0471 44.1593 34.4885C42.6807 32.89 41.9214 31.0117 41.9214 28.7737C41.9214 26.4559 42.6407 24.4577 44.0394 22.7393C45.4781 21.0209 47.4363 20.1816 49.954 20.1816C52.2719 20.1816 53.9903 20.8211 55.1093 22.0599C56.2282 23.3387 56.7877 24.9772 56.7877 26.9754ZM52.9513 26.8155C52.9513 24.2979 51.8722 23.059 49.7542 23.059C47.7161 23.059 46.5172 24.3378 46.1175 26.9354L52.9513 26.8155Z"
      fill="#28AF89"
    />
    <path
      d="M74.4915 36.4066H70.1355C70.3753 33.6492 70.4952 30.8517 70.4952 28.0543C70.4952 26.3359 70.2554 25.1769 69.7359 24.5775C69.2163 23.978 68.457 23.6583 67.418 23.6583C66.1791 23.6583 65.0202 24.0979 63.9012 24.9372C63.9412 29.1733 63.9812 33.0097 63.9812 36.4066H59.5852C59.785 33.0097 59.8649 30.3322 59.8649 28.374C59.8649 25.7764 59.5852 23.2987 59.0657 21.0208L63.2618 20.5812L63.5416 22.2996H63.8213C65.2999 21.0208 67.0184 20.3813 68.9766 20.3813C70.655 20.3813 72.0138 20.781 73.0129 21.5802C74.0119 22.3795 74.5315 23.8182 74.5315 25.9362C74.5315 26.256 74.5315 26.6556 74.4915 27.2151C74.4515 27.7346 74.4515 28.2941 74.4515 28.8536C74.4116 30.2523 74.4515 32.77 74.4915 36.4066Z"
      fill="#28AF89"
    />
    <path
      d="M93.5541 15.1062L93.4342 18.623C91.2363 18.4631 89.1981 18.3832 87.2799 18.3832C87.2399 20.4213 87.2399 22.7392 87.2399 25.2569C87.2399 29.1733 87.3199 32.8899 87.3998 36.3667H82.844C83.0038 32.8899 83.0438 29.2132 83.0438 25.2569C83.0438 22.7792 83.0038 20.4613 82.9639 18.3832C81.4453 18.3832 79.3272 18.4631 76.6497 18.6629L76.7695 15.1462H93.5541V15.1062Z"
      fill="#28AF89"
    />
    <path
      d="M107.701 36.3666L103.864 36.4865C103.705 36.0469 103.585 35.6073 103.585 35.2476H103.385C102.186 36.2867 100.587 36.7662 98.5493 36.7662C97.1906 36.7662 96.0716 36.4065 95.1525 35.6472C94.2733 34.8879 93.7937 33.8889 93.7937 32.65C93.7937 31.0115 94.513 29.6528 95.9118 28.5737C97.3105 27.5347 99.7482 26.9752 103.265 26.8953C103.305 26.6955 103.305 26.4957 103.305 26.3358C103.305 25.1769 103.025 24.3776 102.466 24.0179C101.906 23.6583 100.867 23.4584 99.3486 23.4584C97.7101 23.4584 96.1116 23.6583 94.513 24.0979L94.8727 21.1006C96.3514 20.5811 98.4294 20.3413 101.147 20.3413C103.105 20.3413 104.624 20.7409 105.703 21.5802C106.782 22.4194 107.301 23.8581 107.301 25.9362C107.301 26.3758 107.301 27.215 107.261 28.4539C107.221 29.6528 107.221 30.452 107.221 30.8916C107.181 33.0896 107.341 34.9279 107.701 36.3666ZM103.345 32.9697C103.265 31.4911 103.265 30.2122 103.265 29.1732C99.5484 29.1732 97.7101 30.1323 97.7101 32.0106C97.7101 33.2894 98.5094 33.9688 100.148 33.9688C101.427 33.9288 102.466 33.6091 103.345 32.9697Z"
      fill="#28AF89"
    />
    <path
      d="M126.444 27.9743C126.444 30.3322 125.765 32.4103 124.406 34.2086C123.047 36.0069 121.209 36.8861 118.851 36.8861C117.092 36.8861 115.894 36.5265 115.174 35.7672H114.974L114.655 36.4066H110.818C110.978 32.5701 111.018 28.5338 111.018 24.2577C111.018 20.2214 110.858 16.6248 110.499 13.4277L115.174 13.1479C115.054 15.6656 115.014 18.543 115.014 21.7401H115.214C116.333 20.7809 117.812 20.3014 119.69 20.3014C121.768 20.3014 123.447 21.0607 124.646 22.5793C125.844 24.0979 126.444 25.8962 126.444 27.9743ZM122.128 28.374C122.128 27.0152 121.768 25.8163 121.089 24.8572C120.409 23.8581 119.45 23.3785 118.251 23.3785C116.733 23.3785 115.654 23.8181 114.934 24.6973C114.934 28.4139 115.014 31.2114 115.174 33.1296C115.854 33.6491 116.733 33.9289 117.852 33.9289C119.29 33.9289 120.369 33.4093 121.089 32.3303C121.768 31.2114 122.128 29.8926 122.128 28.374Z"
      fill="#28AF89"
    />
    <path
      d="M140.511 31.9308C140.511 35.2078 138.073 36.8463 133.238 36.8463C131.479 36.8463 129.921 36.6465 128.602 36.2868L129.161 33.0498C130.52 33.5294 131.879 33.7691 133.238 33.7691C134.556 33.7691 135.436 33.6492 135.955 33.4494C136.475 33.2496 136.714 32.85 136.714 32.3704C136.714 31.5712 135.795 30.8119 133.957 30.0925C132.358 29.4531 131.199 28.8537 130.48 28.2142C129.481 27.375 128.961 26.336 128.961 25.0971C128.961 23.6584 129.481 22.4995 130.56 21.6203C131.639 20.7411 133.198 20.3015 135.276 20.3015C137.194 20.3015 138.713 20.4614 139.831 20.821L139.272 24.0581C138.033 23.5785 136.714 23.3387 135.276 23.3387C133.517 23.3387 132.678 23.7783 132.678 24.6975C132.678 25.1371 132.878 25.5367 133.238 25.8164C133.597 26.0962 134.357 26.4559 135.515 26.8555C137.114 27.415 138.233 28.0144 138.952 28.6538C139.991 29.4531 140.511 30.5721 140.511 31.9308Z"
      fill="#28AF89"
    />
    <path
      d="M195.5 6.51413C184.83 -2.95717 168.525 -1.99805 159.054 8.63219C149.583 19.2624 150.542 35.5674 161.172 45.0787C171.802 54.55 188.107 53.5909 197.618 42.9607C207.09 32.3304 206.131 15.9854 195.5 6.51413Z"
      fill="#28AF89"
    />
    <path
      d="M199.217 23.4986C199.856 29.3332 198.058 35.4476 193.742 40.0833C185.869 48.5955 172.562 49.115 164.049 41.2023C155.537 33.3295 155.018 20.0218 162.93 11.5096C165.848 8.35247 169.524 6.31434 173.401 5.35522L173.84 7.2335C170.324 8.07273 166.967 9.951 164.329 12.8284C157.176 20.5812 157.615 32.6501 165.368 39.8036C173.121 46.957 185.19 46.5174 192.343 38.7645C196.26 34.5284 197.898 28.9735 197.299 23.6584L199.217 23.4986Z"
      fill="white"
    />
    <path
      d="M192.903 26.6156C188.986 27.2151 186.029 29.2132 183.911 32.5302C183.671 32.8899 183.791 33.0897 184.191 33.1696C184.79 33.2495 185.35 33.2895 185.949 33.3694C189.546 33.3295 192.743 30.7718 193.582 27.295C193.702 26.6556 193.582 26.4957 192.903 26.6156Z"
      fill="white"
    />
    <path
      d="M187.788 26.2159C188.027 26.096 188.227 25.6565 188.227 25.3767C188.227 23.4984 187.828 21.7001 187.028 19.9417C186.789 19.4222 186.429 19.3822 186.029 19.7019C185.43 20.1415 184.83 20.5412 184.311 21.0607C181.833 23.3785 180.834 27.5747 182.632 30.5719C183.152 30.3721 183.591 29.6128 183.991 29.1732C185.11 28.0143 186.309 27.0152 187.788 26.2159Z"
      fill="white"
    />
    <path
      d="M180.474 30.1723C179.955 29.0933 179.715 27.8544 179.715 26.6555C179.715 25.1369 180.115 23.6982 180.834 22.4993C181.234 21.82 181.713 21.1806 182.313 20.661C182.672 20.1815 182.712 19.7019 182.472 19.1424C181.793 17.5839 180.954 16.1452 179.795 14.9063C179.155 14.2669 179.076 14.2669 178.676 15.0662C176.678 19.2623 176.318 23.4984 177.557 27.7745C177.637 28.0143 177.677 28.2541 177.757 28.4539C177.877 28.7736 177.957 29.0533 178.076 29.373C178.196 29.7327 178.276 30.1323 178.396 30.492C180.474 36.6863 177.597 41.6417 175.878 44.8388C175.679 45.2384 175.239 45.758 176.158 45.7979C177.597 45.8379 179.076 45.8379 180.514 45.7979C180.714 45.7979 180.994 45.4383 181.114 45.2784C182.313 43.3202 183.791 38.2449 182.592 35.1277C181.913 33.3694 181.274 31.8507 180.474 30.1723Z"
      fill="white"
    />
    <path
      d="M175.439 27.4949C175.599 27.5349 175.878 27.5748 175.958 27.455C176.038 27.3351 176.038 27.0953 175.958 26.9354C175.279 25.0172 174.999 23.019 175.199 20.9809C175.239 20.7012 174.999 20.3015 174.759 20.1417C173.481 19.2225 172.082 18.663 170.563 18.3433C170.084 18.2234 169.844 18.3833 169.804 18.8628C169.644 20.9409 169.804 22.7393 171.043 24.4577C172.122 25.9364 173.68 27.0154 175.439 27.4949Z"
      fill="white"
    />
    <path
      d="M177.517 33.9289C177.677 33.6092 177.637 33.2895 177.597 32.9299C177.477 31.8509 177.037 30.7319 176.238 30.0125C174.36 28.3341 171.562 28.8536 170.204 26.3359C169.884 25.7764 169.684 25.0971 169.125 24.7774C168.845 24.6175 168.525 24.5376 168.205 24.4976C166.687 24.2978 165.128 24.3777 163.65 24.6974C163.09 24.8173 162.89 25.0571 163.13 25.6965C164.129 28.5739 166.207 31.0516 168.845 32.5702C170.204 33.3295 171.642 33.889 173.201 34.1687C173.96 34.2487 177.117 34.8081 177.517 33.9289Z"
      fill="white"
    />
  </svg>
);
const instagramLogo = (
  <svg
    width="15"
    height="15"
    viewBox="0 0 26 26"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    className="social-icon"
  >
    <path d="M12.8889 0.606079C9.55324 0.606079 9.13461 0.620665 7.82448 0.680288C6.51691 0.740167 5.62439 0.947184 4.84343 1.25093C4.0356 1.56465 3.35034 1.98431 2.66764 2.66729C1.98443 3.35001 1.56478 4.03529 1.25004 4.84289C0.945539 5.62413 0.738273 6.51693 0.679419 7.82403C0.620822 9.1342 0.605469 9.5531 0.605469 12.8889C0.605469 16.2247 0.62031 16.6421 0.679675 17.9522C0.739808 19.2599 0.946819 20.1524 1.2503 20.9334C1.56427 21.7412 1.98392 22.4265 2.66687 23.1092C3.34932 23.7925 4.03458 24.2132 4.84189 24.5269C5.62336 24.8306 6.51614 25.0376 7.82346 25.0975C9.13359 25.1571 9.55196 25.1717 12.8874 25.1717C16.2234 25.1717 16.6407 25.1571 17.9509 25.0975C19.2584 25.0376 20.152 24.8306 20.9334 24.5269C21.741 24.2132 22.4253 23.7925 23.1077 23.1092C23.7909 22.4265 24.2106 21.7412 24.5253 20.9336C24.8272 20.1524 25.0345 19.2596 25.0959 17.9525C25.1548 16.6423 25.1701 16.2247 25.1701 12.8889C25.1701 9.5531 25.1548 9.13446 25.0959 7.82429C25.0345 6.51668 24.8272 5.62413 24.5253 4.84314C24.2106 4.03529 23.7909 3.35001 23.1077 2.66729C22.4245 1.98406 21.7413 1.5644 20.9327 1.25093C20.1497 0.947184 19.2566 0.740167 17.9491 0.680288C16.6389 0.620665 16.2218 0.606079 12.8851 0.606079H12.8889ZM11.7871 2.81955C12.1141 2.81904 12.479 2.81955 12.8889 2.81955C16.1684 2.81955 16.5571 2.83132 17.8521 2.89017C19.0496 2.94493 19.6996 3.14504 20.1325 3.31316C20.7057 3.53579 21.1144 3.80192 21.544 4.23182C21.9739 4.66172 22.24 5.07114 22.4631 5.64434C22.6312 6.0768 22.8316 6.72677 22.8861 7.92434C22.945 9.21916 22.9577 9.60811 22.9577 12.8861C22.9577 16.1641 22.945 16.553 22.8861 17.8478C22.8313 19.0454 22.6312 19.6954 22.4631 20.1278C22.2405 20.701 21.9739 21.1092 21.544 21.5388C21.1141 21.9687 20.706 22.2349 20.1325 22.4575C19.7001 22.6264 19.0496 22.826 17.8521 22.8807C16.5573 22.9396 16.1684 22.9524 12.8889 22.9524C9.60928 22.9524 9.22059 22.9396 7.92581 22.8807C6.72827 22.8255 6.07833 22.6254 5.64511 22.4572C5.07193 22.2346 4.66252 21.9685 4.23263 21.5386C3.80275 21.1087 3.53663 20.7003 3.31349 20.1268C3.14538 19.6944 2.94502 19.0444 2.89052 17.8468C2.83166 16.552 2.81989 16.163 2.81989 12.883C2.81989 9.60299 2.83166 9.21609 2.89052 7.92127C2.94528 6.7237 3.14538 6.07373 3.31349 5.64076C3.53611 5.06756 3.80275 4.65813 4.23263 4.22823C4.66252 3.79833 5.07193 3.53221 5.64511 3.30907C6.07807 3.14018 6.72827 2.94058 7.92581 2.88557C9.05887 2.83439 9.49797 2.81904 11.7871 2.81648V2.81955ZM19.4452 4.85901C18.6315 4.85901 17.9713 5.51844 17.9713 6.33244C17.9713 7.14617 18.6315 7.80638 19.4452 7.80638C20.2589 7.80638 20.9191 7.14617 20.9191 6.33244C20.9191 5.5187 20.2589 4.8585 19.4452 4.8585V4.85901ZM12.8889 6.58116C9.40559 6.58116 6.5814 9.40545 6.5814 12.8889C6.5814 16.3724 9.40559 19.1954 12.8889 19.1954C16.3723 19.1954 19.1955 16.3724 19.1955 12.8889C19.1955 9.40545 16.372 6.58116 12.8887 6.58116H12.8889ZM12.8889 8.79463C15.1499 8.79463 16.9831 10.6276 16.9831 12.8889C16.9831 15.15 15.1499 16.9832 12.8889 16.9832C10.6277 16.9832 8.7948 15.15 8.7948 12.8889C8.7948 10.6276 10.6277 8.79463 12.8889 8.79463Z" />
  </svg>
);

const brandHandles = [
  {
    name: "Instagram",
    image: instagramLogo,
    link: "https://www.instagram.com/get.opentabs",
  },
  {
    name: "LinkedIn",
    image: linkedinLogo,
    link: "https://linkedin.com/company/opentabs-org",
  },
  {
    name: "Tiktok",
    image: tiktokLogo,
    link: "https://www.tiktok.com/@umberto.greco",
  },
];

const AboutUs = () => (
  <>
    <ViewHeader
      header="About Us"
      description="OpenTabs is transforming the internet into a force of sustainable development. We believe that everyone who wants to fight climate change should be able to, regardless of how much time or money they have."
    />
    <div className="has-2-col">
      <div className="left-col">
        <Links />
      </div>
      <div className="right-col">
        {opentabsFullLogo}
        <div className="flex-container-space pt-20">
          <p className="primary-text-colour text-small fw-600">
            We're on social media
          </p>
          {brandHandles.map((element, index) => (
            <a
              href={element.link}
              target="_top"
              rel="noopener noreferrer"
              key={index}
            >
              {element.image}
            </a>
          ))}
        </div>
      </div>
    </div>
  </>
);

const Settings = () => {
  const [selectedNavItem, setSelectedNavItem] = React.useState(
    settingsNavList[0]
  );
  const [showSettings, setShowSettings] = React.useState(false);

  //React.useEffect(() => {
  // 	defaultSettingsView !== 0 &&
  // 		setSelectedNavItem(settingsNavList[defaultSettingsView]);
  // }, [defaultSettingsView]);

  const changeView = (event) => {
    const selectedNavItem = event.target.innerText;
    console.log(selectedNavItem);
    if (selectedNavItem === settingsViewCommunity) redirectToDiscord();
    else if (selectedNavItem === settingsViewRateUs) redirectToRateUs();
    else setSelectedNavItem(selectedNavItem);
  };

  const toggleSettings = () => setShowSettings((prev) => !prev);

  return (
    <div className="app-container settings">
      {showSettings && (
        <div className="app-wrapper nipple nipple-top-left">
          <div className="app settings-app">
            <Navbar activeNav={selectedNavItem} onChangeView={changeView} />
            <SettingsView>
              {selectedNavItem === settingsViewAwards ? (
                <Awards />
              ) : selectedNavItem === settingsViewGiftTrees ? (
                <GiftTrees />
              ) : selectedNavItem === settingsViewMyAccount ? (
                <MyAccount />
              ) : selectedNavItem === settingsViewAboutUs ? (
                <AboutUs />
              ) : null}
            </SettingsView>
          </div>
        </div>
      )}
      <span onClick={toggleSettings} className="app-dash toggle">
        {settings}
      </span>
    </div>
  );
};

function CountersContainer() {
  return (
    <div className="region top-right">
      <IndividualCounter />
      <GlobalCounter />
    </div>
  );
}

const RADIUS = 15.3843;

const CounterHeader = ({ counter, logo }) => (
  <>
    <span>{counter ? addCommas(counter) : counter}</span>
    {logo}
  </>
);

const IndividualCounter = () => {
  const individualCounterRef = React.useRef(null);
  const [user, setUser] = React.useState({});

  // React.useEffect(() => {
  //   fetchUser();
  // }, []);

  // const fetchUser = async () => {
  //   if (localStorage.storageUserProfile || localStorage.loggedInData) {
  //     const storageUserProfile = localStorage.storageUserProfile
  //       ? JSON.parse(localStorage.storageUserProfile)
  //       : JSON.parse(localStorage.loggedInData).user;
  //     const response = await fetchQuery({
  //       endpoint: API.user.getUser,
  //       parameters: {
  //         userId: localStorage.storageUserProfile
  //           ? storageUserProfile.id
  //           : storageUserProfile._id,
  //       },
  //     });
  //     setUser(response.user);
  //   }
  // };

  // const localTreesSaved = user?.treesSaved || 53.6;
  // let tabsOpened = 0;
  // let userTreesSaved = 0;

  // if (!!localTreesSaved || localTreesSaved === 0)
  //   userTreesSaved = NumberFloor(localTreesSaved);
  // if (!!tabsOpened) userTabsOpened = NumberFloor(tabsOpened);
  const onWidgetClick = () => {};

  const counterDataList = [
    {
      title: "Trees you have saved",
      image: colourLogo,
      value: addCommas(Math.floor(user?.treesSaved)),
    },
    {
      title: "Searches you have made",
      image: tab,
      value: addCommas(user?.searchCount ? user?.searchCount : 0),
    },
    {
      title: "Tons of CO2 eq. you have stored",
      image: cloud,
      value: addCommas(treesToCO2Stored(user.treesSaved)),
    },
  ];

  React.useEffect(() => {
    if (localStorage.storageUserProfile) {
      const storageUserProfile = JSON.parse(localStorage.storageUserProfile)
       const id = storageUserProfile?.id;
      getPersonalCounters(id);
    }
  }, []);

  const getPersonalCounters = async (userId) => {
    if(top != self) return;
    try {
      const response = await fetch(
        `${SUB_DOMAIN}/api/users/updateUserInfo`,
        getPostHeader({ userId, update: true })
      );
      const user = await response.json();
      console.log(user.user);
      setUser(user.user);
    } catch (error) {
      console.error(error);
    }
  };

  const localTreesSaved = user?.treesSaved ? user?.treesSaved : 0;

  var percent = getPercentageOfTreeSaved(localTreesSaved);
	var dashOffset = 100 - percent;
  const logo = (
    <svg
      width="35"
      height="34"
      viewBox="0 0 35 34"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className="progress-circle-logo"
    >
      <circle
        cx="17.8994"
        cy="16.9298"
        r={RADIUS}
        stroke="#E9E9E9"
        strokeOpacity="0.8"
        strokeWidth="3.09091"
        className="progress-circle-bg"
      />
      <circle
        cx="17.8994"
        cy="16.9298"
        r={RADIUS}
        strokeWidth="3.09091"
        style={{ strokeDashoffset: dashOffset }}
        transform="rotate(-90 18 17)"
        className="progress-circle"
      />
      <path d="M28.014 17.3449C25.2524 17.7681 23.1672 19.1789 21.6737 21.5207C21.5046 21.7746 21.5891 21.9157 21.8709 21.9721C22.2936 22.0285 22.6881 22.0568 23.1108 22.1132C25.6469 22.085 27.9012 20.2792 28.493 17.8245C28.5775 17.3731 28.493 17.2603 28.014 17.3449Z" />
      <path d="M24.407 17.0628C24.5761 16.9781 24.717 16.6678 24.717 16.4703C24.717 15.1442 24.4352 13.8745 23.8716 12.6331C23.7025 12.2663 23.4489 12.2381 23.1671 12.4638C22.7444 12.7741 22.3218 13.0563 21.9554 13.4231C20.2083 15.0595 19.5039 18.0221 20.7719 20.1382C21.1382 19.9971 21.4482 19.461 21.73 19.1507C22.519 18.3324 23.3644 17.6271 24.407 17.0628Z" />
      <path d="M19.2498 19.8559C18.8835 19.0941 18.7144 18.2195 18.7144 17.373C18.7144 16.3009 18.9962 15.2852 19.5035 14.4387C19.7852 13.9591 20.1234 13.5076 20.5461 13.1408C20.7997 12.8023 20.8279 12.4637 20.6588 12.0687C20.1798 10.9683 19.588 9.95256 18.7708 9.07791C18.3199 8.62647 18.2636 8.62647 17.9818 9.19077C16.5728 12.1533 16.3192 15.1441 17.1928 18.1631C17.2491 18.3323 17.2773 18.5016 17.3337 18.6427C17.4182 18.8684 17.4746 19.0659 17.5591 19.2917C17.6436 19.5456 17.7 19.8277 17.7845 20.0817C19.2498 24.455 17.221 27.9536 16.0093 30.2108C15.8684 30.4929 15.5584 30.8597 16.2065 30.8879C17.221 30.9161 18.2636 30.9161 19.278 30.8879C19.4189 30.8879 19.6162 30.634 19.7007 30.5211C20.5461 29.1386 21.5887 25.5553 20.7433 23.3546C20.2643 22.1131 19.8134 21.041 19.2498 19.8559Z" />
      <path d="M15.6995 17.9656C15.8122 17.9938 16.0095 18.022 16.0658 17.9374C16.1222 17.8527 16.1222 17.6834 16.0658 17.5706C15.5868 16.2163 15.3895 14.8055 15.5304 13.3666C15.5586 13.1691 15.3895 12.8869 15.2204 12.7741C14.3187 12.1251 13.3324 11.7301 12.2616 11.5044C11.9235 11.4198 11.7544 11.5326 11.7262 11.8712C11.6135 13.3384 11.7262 14.608 12.5998 15.8213C13.3606 16.8652 14.4596 17.627 15.6995 17.9656Z" />
      <path d="M17.1655 22.5082C17.2782 22.2825 17.25 22.0568 17.2218 21.8028C17.1373 21.041 16.8273 20.251 16.2638 19.7432C14.9393 18.5581 12.9668 18.9249 12.0087 17.1474C11.7833 16.7524 11.6424 16.2727 11.2479 16.047C11.0506 15.9342 10.8252 15.8777 10.5998 15.8495C9.52897 15.7085 8.42999 15.7649 7.38736 15.9906C6.99286 16.0752 6.85196 16.2445 7.02104 16.696C7.72551 18.7274 9.19082 20.4767 11.0506 21.5489C12.0087 22.085 13.0232 22.48 14.1222 22.6775C14.6576 22.7339 16.8837 23.1289 17.1655 22.5082Z" />
    </svg>
  );

  return (
    <div className="app-container counter" ref={individualCounterRef}>
      <Counter
        togglePopup={onWidgetClick}
        header={
          <CounterHeader
            counter={addCommas(
              user?.treesSaved ? Math.floor(user?.treesSaved) : 0
            )}
            logo={logo}
          />
        }
        popup={<CounterPopup dataList={counterDataList} type="individual" />}
      />
    </div>
  );
};

if (document.getElementById("opentabs-counters")) {
  const counters = ReactDOM.createRoot(
    document.getElementById("opentabs-counters")
  );
  counters.render(<CountersContainer />);
}

if (document.getElementById("opentabs-setting")) {
  const setting = ReactDOM.createRoot(
    document.getElementById("opentabs-setting")
  );
  setting.render(<Settings />);
}

const RIPPLE_DEPTH_LEVEL = 2;
const LOGGED_IN_MODE = "loggedIn";
const LOG_IN_MODE = "Login";
const SIGN_UP_MODE = "Signup";
const RESET_PASSWORD_MODE = "Send";
const EDIT_RESET_PASSWORD_MODE = "Update";
const EDIT_PASSWORD_MODE = "Update ";
const VERIFY_OTP_MODE = "Verify";

const StatsColumn = ({ text, number }) => (
  <div className="text-center">
    <p className="fw-600 numbers-heading">{number}</p>
    <p className="text">{text}</p>
  </div>
);

const HeaderDescription = ({ loggedIn, name, logOut }) => (
  <p className="description">
    {loggedIn ? (
      <>
        <span>
          You're logged in as
          <span className="primary-text-colour fw-600"> {name}</span>.
        </span>
        <br />
        {/* <span>
          If you're not {name} you can
          <span
            className="primary-text-colour button-text fw-600"
            onClick={logOut}
          >
            {" "}
            log out
          </span>{" "}
          before logging in as different user.
        </span> */}
      </>
    ) : (
      <span>
        Log in to sync your account and keep track of your impact across
        devices. ✨
      </span>
    )}
  </p>
);

const Header = ({ mode, actionButtonClickHandler, loggedIn, name, logOut }) => (
  <header>
    <section className="flex-container-space">
      <h3 className="general-header">My Account</h3>
      <p
        className="primary-text-colour text-small button-text fw-600"
        onClick={() => actionButtonClickHandler(mode)}
      >
        {(mode === EDIT_PASSWORD_MODE ||
          mode === RESET_PASSWORD_MODE ||
          mode === SIGN_UP_MODE) && (
          <span className="rotate-left icon-wrapper mr-6">{angle}</span>
        )}
        {mode === LOGGED_IN_MODE
          ? "Edit password"
          : mode === EDIT_PASSWORD_MODE ||
            mode === RESET_PASSWORD_MODE ||
            mode === SIGN_UP_MODE
          ? "Back"
          : null}
      </p>
    </section>
    <HeaderDescription loggedIn={loggedIn} name={name} logOut={logOut} />
  </header>
);

const ColouredCounter = ({ text, counter }) => (
  <div className="app-container counter">
    <div className="app-dash metric-item default-cursor active-background">
      <span className="text">{text}</span>
      <span className="text fw-600 border-background">{counter}</span>
    </div>
  </div>
);

const TransparentCounter = ({ text, counter }) => (
  <div className="app-container counter">
    <div className="app-dash metric-item default-cursor">
      <span className="active">{counter}</span> {globe}
      <span className="text-small">{text}</span>
    </div>
  </div>
);

const AccountStatistics = ({
  treesSaved,
  daysAsTabber,
  rippledTreesSaved,
  rippledReferrals,
  referralCount,
}) => (
  <div className="highlight-background award-highight account-highlight flex-column-center">
    <header className="account-header">
      <div className="text-center">{opentabsLogo}</div>
      <ColouredCounter text="Trees you've saved" counter={treesSaved} />
    </header>
    <p className="pb-4 fw-600">Your Ripple Effect</p>
    <p className="pb-10 text-small text-center">
      The people you invite to OpenTabs, invite other people, who invite others,
      creating a long chain of impact. All of them have saved trees thanks to
      you, creating a huge ripple effect.
    </p>
    <div className="popup-colour">
      <TransparentCounter
        text="Trees saved through your ripple effect"
        counter={rippledTreesSaved}
      />
    </div>
    <hr className="width-100 pb-18 white-horizontal" />
    <p className="pb-4 fw-600">Your Stats</p>
    <div className="width-100 flex-container-space">
      <StatsColumn text="Days as a Tabber" number={daysAsTabber} />
      <StatsColumn text="Tabbers Invited" number={referralCount} />
      <StatsColumn text="Rippled Tabbers" number={rippledReferrals} />
    </div>
  </div>
);

const LogIn = ({
  logInHandler,
  clearError,
  forgotPasswordClickHandler,
  signUp,
}) => (
  <div className="flex-column-center">
    <form className="flex-column-center account-form" onSubmit={logInHandler}>
      <p className="fw-600">Access your account</p>
      <input
        className="input-box mt-8"
        type="email"
        name="email"
        placeholder="E-mail"
        autoComplete="true"
        autoFocus
        required
        onChange={clearError}
      />
      <input
        className="input-box mt-8"
        name="password"
        type="password"
        placeholder="Password"
        required
        onChange={clearError}
      />
      <button type="submit" className="button button-primary mt-8">
        Log in
      </button>
    </form>
    <button
      className="button button-white primary-text-colour mt-16"
      onClick={forgotPasswordClickHandler}
    >
      Forgot password?
    </button>
    <div>
      <hr className="grey-horizontal" />
      <p>
        Don’t have an account?
        <button
          className="button button-white primary-text-colour"
          onClick={signUp}
        >
          Create one
        </button>
      </p>
    </div>
  </div>
);

const SignUp = ({ signUpHandler, clearError }) => (
  <div className="flex-column-center">
    <form className="flex-column-center account-form" onSubmit={signUpHandler}>
      <p className="fw-600">Create your account</p>
      <input
        className="input-box mt-8"
        type="email"
        name="email"
        placeholder="E-mail"
        autoComplete="true"
        autoFocus
        required
        onChange={clearError}
      />
      <input
        className="input-box mt-8"
        name="password"
        type="password"
        placeholder="Password"
        required
        onChange={clearError}
      />
      <button type="submit" className="button button-primary mt-8">
        {SIGN_UP_MODE}
      </button>
    </form>
  </div>
);

const API = {
  user: {
    getUser: "users/getUser",
    logIn: "users/login",
    signUp: "users/signup",
    mergeUp: "users/signup_withId",
    anonymousSignUp: "users/anonymous_signup",
    updatePassword: "users/update_password",
    sendEmailInvite: "users/sendEmailInvite",
    sendVerificationOTP: "users/reset_password",
    getVerificationOTP: "users/otpVerification",
    updateUser: "users/update_tabs_usingId",
    updateUserConfiguration: "users/update_configuration_usingId",
    updateUserName: "users/update_name_usingId",
    getReferralUser: "users/getReferralUser",
  },
};

const LOCAL_LOGIN_METHOD = "local";

const signUpUser = async (email, password, name) => {
  // TODO: Store user data in MongoDB, fix days as tabber
  const response = await fetchQuery({
    endpoint: API.user.signUp,
    parameters: {
      email: email,
      password: password,
      name: name,
      method: LOCAL_LOGIN_METHOD,
    },
  });
  if (!response.errors) {
    return true;
  }
  console.log("error", response);
  return response.errors.msg ? response.errors.msg : response.errors[0].msg;
};

const mergeUpUser = async (email, password, userId) => {
  const response = await fetchQuery({
    endpoint: API.user.mergeUp,
    parameters: {
      email: email,
      password: password,
      userId: userId,
      method: LOCAL_LOGIN_METHOD,
    },
  });
  if (!response.errors) {
    return true;
  }
  console.log("error", response);

  return response.errors.msg ? response.errors.msg : response.errors[0].msg;
};

const logUserIn = async (email, password) => {
  const response = await fetchQuery({
    endpoint: API.user.logIn,
    parameters: {
      email: email,
      password: password,
      method: LOCAL_LOGIN_METHOD,
    },
  });
  if (!response.errors) {
    localStorage.setItem("loggedInData", JSON.stringify(response));
    return true;
  }
  console.log("error", response);
  return response.errors.msg ? response.errors.msg : response.errors[0].msg;
};

const MyAccount = () => {
  // const {
  // 	logUserIn,
  // 	getResetPasswordOtp,
  // 	updateUserPassword,
  // } = useAuth();
  // let id = 1,
  //   userCreatedDate = new Date(),
  //   installDate = new Date();
  // const { name, email, treesSaved, userCreatedDate, installDate } =
  // 	storageUserProfile;

  const [mode, setMode] = React.useState(LOG_IN_MODE);
  const [enteredEmail, setEnteredEmail] = React.useState("");
  const [loggedIn, setLogedIn] = React.useState(false);
  const [name, setName] = React.useState("");
  const [enteredPassword, setEnteredPassword] = React.useState("");
  const [confirmPassword, setConfirmPassword] = React.useState("");
  const [showError, setShowError] = React.useState(false);
  const [errorMessage, setErrorMessage] = React.useState(null);
  const [isLoading, setIsLoading] = React.useState(false);
  const [enteredVerificationCode, setEnteredVerificationCode] =
    React.useState("");
  const [rippledTreesSaved, setRippledTreesSaved] = React.useState(0);
  const [rippledReferrals, setRippledReferrals] = React.useState([]);
  const [referralList, setReferralList] = React.useState([]);
  const [treesSaved, setTreesSaved] = React.useState(0);
  const [verificationCode, setVerificationCode] = React.useState(0);
  const [userCreatedDate, setUserCreatedDate] = React.useState(
    new Date().toISOString()
  );
  const [user, setUser] = React.useState({});

  const getRippledReferrals = async ({ userId, rippleDepth = 0 } = {}) => {
    if (rippleDepth < RIPPLE_DEPTH_LEVEL) {
      const user = await fetchQuery({
        endpoint: API.user.getReferralUser,
        parameters: { userId: userId },
      });
      if (
        isNotNull(user.referralsMade) &&
        isNotUndefined(user.referralsMade) &&
        arrayNotEmpty(user.referralsMade)
      ) {
        setRippledReferrals((prevReferrals) => [
          ...prevReferrals,
          ...user.referralsMade,
        ]);
        user.referralsMade.forEach(async (referralId) => {
          await getRippledReferrals({
            userId: referralId,
            rippleDepth: rippleDepth + 1,
          });
        });
      }
    }
  };

  React.useEffect(() => {
    const storageUserProfileInString =
      localStorage.storageUserProfile || localStorage.loggedInData;
    if (!storageUserProfileInString) return;
    const parsedStorageUserProfile = localStorage.storageUserProfile
      ? JSON.parse(storageUserProfileInString)
      : JSON.parse(storageUserProfileInString).user;

    if (
      parsedStorageUserProfile?.email ||
      parsedStorageUserProfile?.id ||
      parsedStorageUserProfile?._id
    ) {
      setMode(LOGGED_IN_MODE);
      setLogedIn(true);
      let name = localStorage.storageUserProfile
        ? parsedStorageUserProfile.name
        : parsedStorageUserProfile.local.name;
      setName(name);
    }
  }, [localStorage.storageUserProfile, localStorage.loggedInData]);

  React.useEffect(() => {
    fetchUser();
  }, []);
  React.useEffect(() => {
    fetchedRippledReferrals();
  }, [referralList, loggedIn]);

  const fetchedRippledReferrals = async () => {
    if (localStorage.storageUserProfile || localStorage.loggedInData) {
      const storageUserProfile = localStorage.storageUserProfile
        ? JSON.parse(localStorage.storageUserProfile)
        : JSON.parse(localStorage.loggedInData).user;
      if (mode === LOGGED_IN_MODE) {
        await getRippledReferrals({
          userId: localStorage.storageUserProfile
            ? storageUserProfile.id
            : storageUserProfile._id,
        });
      }
    }
  };

  console.log({ user });

  const fetchUser = async () => {
    if (localStorage.storageUserProfile || localStorage.loggedInData) {
      const storageUserProfile = localStorage.storageUserProfile
        ? JSON.parse(localStorage.storageUserProfile)
        : JSON.parse(localStorage.loggedInData).user;
      const response = await fetchQuery({
        endpoint: API.user.getUser,
        parameters: {
          userId: localStorage.storageUserProfile
            ? storageUserProfile.id
            : storageUserProfile._id,
        },
      });
      setUser(response.user);
      setTreesSaved(response.user?.treesSaved);
      setUserCreatedDate(response.user?.dateCreated);
      if (response?.user.referralsMade?.length) {
        setReferralList(response.user.referralsMade);
      }
    }
  };

  React.useEffect(() => {
    fetchRippledReferrals();
  }, [rippledReferrals]);

  const fetchRippledReferrals = async () => {
    if (mode === LOGGED_IN_MODE) {
      const fetchedRippledReferrals = await getUserReferrals(rippledReferrals);
      setRippledTreesSaved(sumOfTreesInList(fetchedRippledReferrals));
    }
  };

  const emailChangeHandler = (event) => {
    setShowError(false);
    setEnteredEmail(event.target.value);
  };

  const passwordChangeHandler = (event) => {
    setShowError(false);
    setEnteredPassword(event.target.value);
  };

  const confirmPasswordChangeHandler = (event) => {
    setShowError(false);
    setConfirmPassword(event.target.value);
  };

  const verificationCodeChangeHandler = (event) => {
    setShowError(false);
    setEnteredVerificationCode(event.target.value);
  };

  const formSubmitHandler = async (event) => {
    event.preventDefault();
    setIsLoading(true);
    switch (mode) {
      case RESET_PASSWORD_MODE: {
        const otpResponse = await getResetPasswordOtp(enteredEmail);
        setIsLoading(false);
        if (Number(otpResponse)) {
          setVerificationCode(otpResponse);
          setMode(VERIFY_OTP_MODE);
        } else {
          setShowError(true);
          setErrorMessage(otpResponse);
        }
        break;
      }
      case VERIFY_OTP_MODE: {
        setIsLoading(false);
        const isVerified = Number(enteredVerificationCode) === verificationCode;
        if (isVerified) {
          setMode(EDIT_RESET_PASSWORD_MODE);
        } else {
          setShowError(true);
          setErrorMessage("Invalid verification code");
        }
        break;
      }
      case EDIT_RESET_PASSWORD_MODE: {
        setIsLoading(false);
        const isValid = confirmPassword.length > 4;
        if (isValid) {
          setIsLoading(true);
          const response = await updateUserPassword(
            enteredEmail,
            confirmPassword
          );
          setIsLoading(false);
          if (response === true) {
            setIsLoading(true);
            const loginResponse = await logUserIn(
              enteredEmail,
              confirmPassword
            );
            setIsLoading(false);
            loginResponse ? setMode(LOGGED_IN_MODE) : setMode(LOG_IN_MODE);
          }
        } else {
          setShowError(true);
          setErrorMessage("Password must be at least 5 characters");
        }
        break;
      }
      case EDIT_PASSWORD_MODE: {
        setIsLoading(false);
        const isValid = confirmPassword.length > 4;
        if (isValid) {
          setIsLoading(true);
          const response = await updateUserPassword(email, confirmPassword);
          setIsLoading(false);
          response === true && setMode(LOGGED_IN_MODE);
        } else {
          setShowError(true);
          setErrorMessage("Password must be at least 5 characters");
        }
        break;
      }
    }
  };

  let defaultEmailInputField = (
    <input
      className="input-box mt-8"
      type="email"
      name="email"
      placeholder="E-mail"
      autoComplete="true"
      autoFocus
      required
      value={enteredEmail}
      onChange={emailChangeHandler}
    />
  );
  let defaultPasswordInputField = (
    <input
      className="input-box mt-8"
      name="password"
      type="password"
      placeholder="Password"
      required
      value={enteredPassword}
      onChange={passwordChangeHandler}
    />
  );
  let defaultConfirmPasswordInputField = (
    <input
      className="input-box mt-8"
      name="password"
      type="password"
      placeholder="New password"
      autoFocus
      required
      value={confirmPassword}
      onChange={confirmPasswordChangeHandler}
    />
  );
  let defaultButton = (
    <button type="submit" className="button button-primary mt-8">
      {mode}
    </button>
  );
  let disabledButton = (
    <button type="submit" className="button button-primary mt-8" disabled>
      {mode}
    </button>
  );
  let defaultVerificationCodeInputField = (
    <input
      className="input-box mt-8"
      name="verificationCode"
      type="text"
      placeholder="XXXXXX"
      required
      autoFocus
      value={enteredVerificationCode}
      onChange={verificationCodeChangeHandler}
    />
  );

  let emailInputField,
    passwordInputField,
    confirmPasswordInputField,
    verificationCodeInputField,
    description,
    title;

  switch (mode) {
    case RESET_PASSWORD_MODE: {
      title = "Forgot Password?";
      description =
        "Enter your email to receive a verification code to create a new password";
      emailInputField = defaultEmailInputField;
      passwordInputField = false;
      confirmPasswordInputField = false;
      verificationCodeInputField = false;
      break;
    }
    case VERIFY_OTP_MODE: {
      title = "";
      description = "Enter the verification code that was sent to your email.";
      emailInputField = false;
      passwordInputField = false;
      confirmPasswordInputField = false;
      verificationCodeInputField = defaultVerificationCodeInputField;
      break;
    }
    case EDIT_RESET_PASSWORD_MODE: {
      title = "";
      description = "Enter a new password.";
      emailInputField = false;
      passwordInputField = false;
      confirmPasswordInputField = defaultConfirmPasswordInputField;
      verificationCodeInputField = false;
      break;
    }
    case EDIT_PASSWORD_MODE: {
      title = "Edit Password?";
      description = "";
      emailInputField = false;
      passwordInputField = false;
      confirmPasswordInputField = defaultConfirmPasswordInputField;
      verificationCodeInputField = false;
      break;
    }
  }

  let actionButton = defaultButton;
  isLoading && (actionButton = disabledButton);

  const clearError = () => {
    setShowError(false);
    setErrorMessage("");
  };

  const logInHandler = async (event) => {
    event.preventDefault();
    const loginForm = event.target;
    const emailInput = loginForm.email;
    const passwordInput = loginForm.password;
    const enteredEmail = emailInput.value;
    const enteredPassword = passwordInput.value;
    setIsLoading(true);
    setEnteredEmail(enteredEmail);
    setEnteredPassword(enteredPassword);
    const response = await logUserIn(enteredEmail, enteredPassword);
    setIsLoading(false);
    if (response === true) {
      setMode(LOGGED_IN_MODE);
      setLogedIn(true);
    } else {
      setShowError(true);
      setErrorMessage(response);
      emailInput.focus();
    }
  };

  const signUpHandler = async (event) => {
    event.preventDefault();
    const signupForm = event.target;
    const emailInput = signupForm.email;
    const passwordInput = signupForm.password;
    const enteredEmail = emailInput.value;
    const enteredPassword = passwordInput.value;
    const isValid = enteredPassword.length > 4;
    if (isValid) {
      setIsLoading(true);
      setEnteredEmail(enteredEmail);
      setEnteredPassword(enteredPassword);
      let response;
      if (validUserId(id)) {
        response = await mergeUpUser(enteredEmail, enteredPassword, id);
      } else {
        response = await signUpUser(enteredEmail, enteredPassword, name);
      }
      if (response === true) {
        setMode(LOGGED_IN_MODE);
      } else {
        setShowError(true);
        setErrorMessage(response);
        emailInput.focus();
      }
      setIsLoading(false);
    } else {
      setShowError(true);
      setErrorMessage("Password must be at least 5 characters");
      passwordInput.focus();
    }
  };

  const logOutHandler = () => {
    // logUserOut();
    localStorage.removeItem("loggedInData");
    setMode(LOG_IN_MODE);
    setLogedIn(false);
  };

  const forgotPasswordClickHandler = () => {
    setMode(RESET_PASSWORD_MODE);
  };

  const editPasswordClickHandler = () => {
    setMode(EDIT_PASSWORD_MODE);
  };

  const signUpClickHandler = () => {
    setMode(SIGN_UP_MODE);
  };

  const cancelToLogIn = () => {
    setMode(LOG_IN_MODE);
  };

  const cancelToLoggedIn = () => {
    setMode(LOGGED_IN_MODE);
  };

  const cancelSignUp = () => {
    setMode(LOG_IN_MODE);
  };

  const actionButtonClickHandler = (mode) => {
    mode === LOGGED_IN_MODE
      ? editPasswordClickHandler()
      : mode === SIGN_UP_MODE || mode === RESET_PASSWORD_MODE
      ? cancelToLogIn()
      : mode === EDIT_PASSWORD_MODE
      ? cancelToLoggedIn()
      : null;
  };

  const Loading = () =>
    isLoading && <i className="loading-icon center-x mt-8"></i>;

  const ErrorMessage = () =>
    showError && <p className="center-x warn-colour mt-8">{errorMessage}</p>;

  const CombinedForms = () => (
    <div className="flex-column-center">
      <form
        className="flex-column-center account-form"
        onSubmit={formSubmitHandler}
      >
        <p className="fw-600">{title}</p>
        <p className="text-center mt-8">{description}</p>
        {emailInputField}
        {verificationCodeInputField}
        {passwordInputField}
        {confirmPasswordInputField}
        {actionButton}
      </form>
    </div>
  );

  const ViewWindow = React.useCallback(() =>
    mode === LOGGED_IN_MODE ? (
      <AccountStatistics
        treesSaved={addCommas(NumberFloor(treesSaved))}
        daysAsTabber={addCommas(getDaysAsTabber(userCreatedDate))}
        referralCount={addCommas(getReferralCount(referralList))}
        rippledTreesSaved={addCommas(NumberFloor(rippledTreesSaved))}
        rippledReferrals={addCommas(rippledReferrals.length)}
      />
    ) : mode === LOG_IN_MODE ? (
      <LogIn
        logInHandler={logInHandler}
        clearError={clearError}
        forgotPasswordClickHandler={forgotPasswordClickHandler}
        signUp={signUpClickHandler}
      />
    ) : mode === SIGN_UP_MODE ? (
      <SignUp signUpHandler={signUpHandler} clearError={clearError} />
    ) : (
      <CombinedForms />
    )
  );

  return (
    <>
      <Header
        loggedIn={loggedIn}
        name={name}
        logOut={logOutHandler}
        mode={mode}
        actionButtonClickHandler={actionButtonClickHandler}
      />
      <ViewWindow />
      <Loading />
      <ErrorMessage />
    </>
  );
};
